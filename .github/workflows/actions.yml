name: CI
on:
  push:
    paths-ignore:
      - 'examples/**'
      - 'HelpSource/**'
      - 'sounds/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'examples/**'
      - 'HelpSource/**'
      - 'sounds/**'
      - '*.md'
jobs:
  lint:
    runs-on: ubuntu-18.04
    outputs:
      sc-version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: lint class library
        run: |
          sudo npm install -g lintspaces-cli
          lintspaces -e .editorconfig SCClassLibrary/**/*.sc || true # ignore failure
      - name: lint cpp files
        run: |
          sudo apt-get install -y clang-format-8
          echo "Running tools/clang-format.py lintall"
          tools/clang-format.py -c clang-format-8 -d clang-format-diff-8 lintall || exit 1
          echo "Lint successful"
      - name: set version string for artifacts
        id: set-version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            FULL_TAG=${GITHUB_REF#refs/tags/}
            SC_VERSION=${FULL_TAG##Version-}
          else
            SC_VERSION=$GITHUB_SHA
          fi
          echo "::set-output name=version::$SC_VERSION"

  Linux:
    needs: lint
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: 'bionic gcc7'
            os-version: '18.04'
            c-compiler: 'gcc-7'
            cxx-compiler: 'g++-7'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc8'
            os-version: '18.04'
            c-compiler: 'gcc-8'
            cxx-compiler: 'g++-8'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc9'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic gcc9 shared libscsynth'
            os-version: '18.04'
            c-compiler: 'gcc-9'
            cxx-compiler: 'g++-9'
            use-syslibs: false
            shared-libscsynth: true

          - job-name: 'bionic gcc10'
            os-version: '18.04'
            c-compiler: 'gcc-10'
            cxx-compiler: 'g++-10'
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: 'linux-bionic-gcc10' # set if needed - will trigger artifact upload

          # - job-name: 'focal gcc10 use system libraries' # disabled - boost version incompatible
          #   os-version: '20.04'
          #   c-compiler: 'gcc-10'
          #   cxx-compiler: 'g++-10'
          #   use-syslibs: true
          #   shared-libscsynth: false

          - job-name: 'bionic clang6.0'
            os-version: '18.04'
            c-compiler: 'clang-6.0'
            cxx-compiler: 'clang++-6.0'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic clang8'
            os-version: '18.04'
            c-compiler: 'clang-8'
            cxx-compiler: 'clang++-8'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'bionic clang9'
            os-version: '18.04'
            c-compiler: 'clang-9'
            cxx-compiler: 'clang++-9'
            use-syslibs: false
            shared-libscsynth: false

          - job-name: 'focal clang10'
            os-version: '20.04'
            c-compiler: 'clang-10'
            cxx-compiler: 'clang++-10'
            use-syslibs: false
            shared-libscsynth: false

    name: Linux ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
      - name: cache ccache
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-
      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache
          # clang and gcc compilers < 9.x are no longer on ubuntu images; install them manually
          if [[ "$CC" =~ clang-[1-8] ]]; then
            sudo apt-get install -y $CC # package names are clang-X
          elif [[ "$CC" =~ gcc-[1-8] ]]; then
            sudo apt-get install -y $CXX # package names are g++-X
          fi
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev
      - name: install qt from apt
        run: sudo apt-get install qt5-default qt5-qmake qttools5-dev qttools5-dev-tools qtdeclarative5-dev libqt5svg5-dev libqt5websockets5-dev qtwebengine5-dev
      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_ED=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output
      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2
      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE.zip .
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip
          retention-days: 7 # quickly remove test artifacts

  macOS:
    needs: lint
    runs-on: macos-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - job-name: ''
            os-version: '10.15'
            xcode-version: '11.7'
            deployment-target: '10.13' # Qt 5.15 runs on macOS 10.13 and newer
            use-syslibs: false
            shared-libscsynth: false
            build-libsndfile: true
            artifact-suffix: 'macOS' # set if needed - will trigger artifact upload

          - job-name: 'legacy'
            os-version: '10.15'
            xcode-version: '10.3'
            qt-version: '5.9.9' # will use qt from aqtinstall
            deployment-target: '10.10'
            use-syslibs: false
            shared-libscsynth: false
            build-libsndfile: true
            artifact-suffix: 'macOS-legacy' # set if needed - will trigger artifact upload

          - job-name: 'use system libraries'
            os-version: '10.15'
            xcode-version: '11.7'
            deployment-target: '10.13'
            use-syslibs: true
            shared-libscsynth: false

          - job-name: 'shared libscsynth'
            os-version: '10.15'
            xcode-version: '11.7'
            deployment-target: '10.13'
            use-syslibs: false
            shared-libscsynth: true

    name: macOS ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}.dmg'
      DEVELOPER_DIR: '/Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer'
      MACOSX_DEPLOYMENT_TARGET: '${{ matrix.deployment-target }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
          echo "::set-output name=week::$(date '+%V')"
      - name: cache ccache
        uses: actions/cache@v2
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-
      - name: cache homebrew downloads
        uses: actions/cache@v2
        id: cache-homebrew
        with:
          path: ~/Library/Caches/Homebrew/downloads
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-homebrew-${{ steps.current-date.outputs.week }}
      - name: cache qt
        id: cache-qt
        uses: actions/cache@v1
        if: matrix.qt-version
        with:
          path: ../Qt
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-qt${{ matrix.qt-version }}
      - name: cleanup homebrew downloads # make sure we store only relevant downloads in cache
        if: '!steps.cache-homebrew.outputs.cache-hit'
        run: rm -rf $(brew --cache)
      - name: install dependencies
        run: |
          brew install portaudio ccache fftw
          # add ccamke to PATH - see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
      - name: build libsndfile # to make it compatible with older OSes (lower deployment target)
        if: matrix.build-libsndfile == true
        run: |
          brew uninstall --ignore-dependencies libsndfile libvorbis libogg flac opus
          brew install automake
          cd $GITHUB_WORKSPACE/..
          curl -L https://gitlab.xiph.org/xiph/ogg/-/archive/v1.3.5/ogg-v1.3.5.tar.bz2 --output ogg.tar.bz2
          tar xfz ogg.tar.bz2
          cd ogg*/
          echo "*** building libogg ***"
          mkdir build && cd build
          cmake -G"Unix Makefiles" -DBUILD_FRAMEWORK=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-Wall -Wextra" -DCMAKE_INSTALL_PREFIX=/usr/local ..
          cmake --build . --target install
          cd $GITHUB_WORKSPACE/..
          curl -L https://github.com/xiph/flac/archive/refs/tags/1.3.3.tar.gz --output flac.tar.xz
          tar xfz flac.tar.xz
          cd flac*/
          echo "*** building flac ***"
          cd build # build directory already exists
          cmake -G"Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-Wall -Wextra" -DCMAKE_INSTALL_PREFIX=/usr/local ..
          cmake --build . --target install
          cd $GITHUB_WORKSPACE/..
          curl -L https://github.com/xiph/opus/archive/refs/tags/v1.3.1.tar.gz --output opus.tar.gz
          tar xfz opus.tar.gz
          cd opus*/
          echo "*** building opus ***"
          mkdir build && cd build
          cmake -G"Unix Makefiles" -DBUILD_SHARED_LIBS=OFF -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-Wall -Wextra" -DCMAKE_INSTALL_PREFIX=/usr/local ..
          cmake --build . --target install
          cd $GITHUB_WORKSPACE/..
          curl -L https://github.com/xiph/vorbis/releases/download/v1.3.7/libvorbis-1.3.7.tar.gz --output libvorbis.tar.gz
          tar xfz libvorbis.tar.gz
          cd libvorbis*/
          echo "building *** libvorbis ***"
          mkdir build && cd build
          cmake -G"Unix Makefiles" -DBUILD_FRAMEWORK=OFF -DBUILD_SHARED_LIBS=OFF -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-Wall -Wextra" -DCMAKE_INSTALL_PREFIX=/usr/local ..
          cmake --build . --target install
          cd $GITHUB_WORKSPACE/..
          curl -L https://github.com/libsndfile/libsndfile/releases/download/1.0.31/libsndfile-1.0.31.tar.bz2 --output libsndfile.tar.bz2
          tar xfz libsndfile.tar.bz2
          cd libsndfile*/
          echo "building libsndfile"
          mkdir build && cd build
          cmake -G"Unix Makefiles" -DBUILD_SHARED_LIBS=ON -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_C_FLAGS="-Wall -Wextra" -DCMAKE_INSTALL_PREFIX=/usr/local ..
          cmake --build . --target install
      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: brew install yaml-cpp boost
      - name: install qt from homebrew
        if: '!matrix.qt-version'
        run: brew install qt5
      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v2
        if: matrix.qt-version
        with:
          modules: 'qtwebengine'
          version: ${{ matrix.qt-version }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON $EXTRA_CMAKE_FLAGS"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          if [[ -z "${{ matrix.qt-version }}" ]]; then EXTRA_CMAKE_FLAGS="-DCMAKE_PREFIX_PATH=`brew --prefix qt5` -DSC_VERIFY_APP=ON $EXTRA_CMAKE_FLAGS"; fi

          echo "EXTRA_CMAKE_FLAGS:" $EXTRA_CMAKE_FLAGS

          cmake -G"Xcode" -DRULE_LAUNCH_COMPILE=ccache -DSUPERNOVA=ON $EXTRA_CMAKE_FLAGS .. --debug-output
      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install
      - name: create archive
        if: matrix.artifact-suffix
        run: |
          cd $INSTALL_PATH
          ln -s /Applications SuperCollider/Applications
          mkdir -p SuperCollider/.background
          cp ../../package/background_2_arrow.png SuperCollider/.background/background_2_arrow.png
          cp ../../package/ds_store SuperCollider/.DS_Store
          # the following assumes that we end up with the build in the folder SuperCollider
          # hdiutil sometimes fails with "create failed - Resource busy"
          # when that happens, we run it again
          hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE || hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
          retention-days: 7 # quickly remove test artifacts

  Windows:
    needs: lint
    runs-on: windows-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - job-name: '32-bit'
            fftw-arch: 'x86'
            cmake-arch: 'Win32'
            os-version: '2019'
            qt-version: '5.15.2'
            qt-arch: 'win32_msvc2019'
            fftw-url: 'ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll32.zip'
            cmake-generator: 'Visual Studio 16 2019'
            msvc-year: '2019'
            vcvars-script: 'vcvars32.bat'
            chocolatey-options: '--forcex86' # '--forcex86' for 32-bit build
            use-qtwebengine: 'ON' # might need to be turned off for MinGW
            ableton-link: 'ON' # might need to be turned off for MinGW
            artifact-suffix: 'win32' # set if needed - will trigger artifact upload
            create-installer: ${{ startsWith(github.ref, 'refs/tags/') }}
            installer-suffix: 'win32-installer'

          - job-name: '64-bit'
            fftw-arch: 'x64'
            cmake-arch: 'x64'
            os-version: '2019'
            qt-version: '5.15.2'
            qt-arch: 'win64_msvc2019_64'
            fftw-url: 'ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll64.zip'
            cmake-generator: 'Visual Studio 16 2019'
            msvc-year: '2019'
            vcvars-script: 'vcvars64.bat'
            chocolatey-options: '' # '--forcex86' for 32-bit build
            use-qtwebengine: 'ON' # might need to be turned off for MinGW
            ableton-link: 'ON' # might need to be turned off for MinGW
            artifact-suffix: 'win64' # set if needed - will trigger artifact upload
            create-installer: ${{ startsWith(github.ref, 'refs/tags/') }}
            installer-suffix: 'win64-installer'

          - job-name: '64-bit MinGW'
            fftw-arch: 'x64'
            os-version: '2019'
            qt-version: '5.15.2'
            qt-arch: 'win64_mingw81'
            fftw-url: 'ftp://ftp.fftw.org/pub/fftw/fftw-3.3.5-dll64.zip'
            cmake-generator: 'MinGW Makefiles'
            chocolatey-options: '' # '--forcex86' for 32-bit build
            use-qtwebengine: 'OFF' # might need to be turned off for MinGW
            ableton-link: 'OFF' # might need to be turned off for MinGW
            artifact-suffix: 'win64-mingw' # set if needed - will trigger artifact upload

    name: Windows ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      LIBS_DOWNLOAD_PATH: ${{ github.workspace }}/../3rd-party
      VCVARS_SCRIPT_PATH: 'C:/Program Files (x86)/Microsoft Visual Studio/${{ matrix.msvc-year }}/Enterprise/VC/Auxiliary/Build/${{ matrix.vcvars-script }}'
      FFTW_INSTALL_DIR: "C:/Program Files/fftw"
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}'
      INSTALLER_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.installer-suffix }}'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "::set-output name=stamp::$(date '+%Y-%m-%d')"
          echo "::set-output name=week::$(date '+%V')"
      - name: cache qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.qt-version }}-qt${{ matrix.qt-arch }}
      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v2
        with:
          modules: 'qtwebengine'
          version: ${{ matrix.qt-version }}
          arch: ${{ matrix.qt-arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
      - name: install libsndfile
        run: choco install libsndfile ${{ matrix.chocolatey-options }}
      - name: download fftw
        shell: bash
        run: |
          mkdir -p "$FFTW_INSTALL_DIR" && cd "$FFTW_INSTALL_DIR"
          curl -L ${{ matrix.fftw-url }} -o fftw.zip
          7z x fftw.zip -y
      - name: create fftw msvc library
        if: matrix.vcvars-script
        shell: cmd
        working-directory: ${{ env.FFTW_INSTALL_DIR }}
        run: |
          call "%VCVARS_SCRIPT_PATH%"
          lib.exe /machine:${{ matrix.fftw-arch }} /def:libfftw3f-3.def
      - name: install asio sdk
        shell: bash
        env:
          ASIO_PATH: ${{ env.LIBS_DOWNLOAD_PATH }}/asio_sdk
        run: |
          mkdir -p $ASIO_PATH && cd $ASIO_PATH
          curl -L https://www.steinberg.net/asiosdk -o asio.zip
          7z x asio.zip -y
          mv asiosdk_* $GITHUB_WORKSPACE/external_libraries/portaudio/asiosdk
      - name: configure
        shell: bash
        run: |
          export PATH=$Qt5_DIR/bin:$PATH

          mkdir $BUILD_PATH && cd $BUILD_PATH

          cmake -G "${{ matrix.cmake-generator }}" -A "${{ matrix.cmake-arch }}" -D CMAKE_PREFIX_PATH="$Qt5_DIR" -D SUPERNOVA=ON -D SC_USE_QTWEBENGINE=${{ matrix.use-qtwebengine }} -D SC_ABLETON_LINK=${{ matrix.ableton-link }} -D CMAKE_BUILD_TYPE=Release .. # build type is specified here for MinGW build

      - name: build
        shell: bash
        run: |
          BUILD_PARALLELISM=
          if [[ ${{ startsWith(matrix.cmake-generator, 'MinGW') }} == true ]]; then BUILD_PARALLELISM="-- -j2"; fi
          cmake --build $BUILD_PATH --config Release --target install $BUILD_PARALLELISM
      - name: create archive
        if: matrix.artifact-suffix
        shell: bash
        run: cd $INSTALL_PATH && 7z a $ARTIFACT_FILE.zip -tzip SuperCollider # this assumes that we end up with the build in the folder SuperCollider
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip
          retention-days: 7 # quickly remove test artifacts
      - name: create installer
        if: matrix.create-installer == true
        shell: bash
        run: |
          export PATH="C:\Program Files (x86)\NSIS":$PATH
          cmake --build $BUILD_PATH --config Release --target installer
      - name: upload installer
        uses: actions/upload-artifact@v2
        if: matrix.create-installer == true
        with:
          name: ${{ env.INSTALLER_FILE }}
          path: ${{ env.INSTALL_PATH }}/*.exe
          retention-days: 7 # quickly remove test artifacts

  test:
    strategy:
      fail-fast: false
      matrix:
        include:

          - name: macOS
            runs-on: macos-10.15
            sclang: 'build/Install/SuperCollider/SuperCollider.app/Contents/MacOS/sclang'
            artifact-suffix: macOS
            artifact-extension: '.dmg'

          - name: Linux
            runs-on: ubuntu-18.04
            sclang: 'build/Install/bin/sclang'
            artifact-suffix: linux-bionic-gcc10

    needs: [lint, Linux, macOS] # unfortunately we can't use matrix expression here to make Linux test depend only on Linux build
    runs-on: '${{ matrix.runs-on }}'
    name: 'test on ${{ matrix.name }}'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARTIFACT_FILE: 'SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}${{ matrix.artifact-extension }}'
      QUARKS_PATH: ${{ github.workspace }}/build/Quarks
      TESTS_PATH: ${{ github.workspace }}/testsuite/classlibrary
      SCLANG: ${{ github.workspace }}/${{ matrix.sclang }}
      SCRIPT_PROTO: ${{ github.workspace }}/testsuite/scripts/gha_test_run_proto.json
      SCRIPT_RUN: ${{ github.workspace }}/testsuite/scripts/run/gha_test_run.json
      QPM_URL: git+https://github.com/supercollider/qpm.git@topic/testclass-setup-teardown
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false # don't need submodules for testing
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: extract artifact
        run: |
          cd $INSTALL_PATH
          echo Contents of `pwd`:
          ls
          if [[ ${{ runner.os }} == "macOS" ]]; then
            hdiutil attach $ARTIFACT_FILE
            echo "mkdir SuperCollider"
            mkdir SuperCollider
            cp -R /Volumes/SuperCollider/* SuperCollider/
          else
            unzip $ARTIFACT_FILE.zip
          fi
      - name: setup Linux environment
        if: runner.os == 'Linux'
        run: |
          # install dependencies
          sudo apt-get update
          sudo apt-get install --yes libsndfile1 libavahi-client-dev libfftw3-dev libicu-dev libudev-dev qt5-default qtwebengine5-dev jackd1

          # add bin to PATH so qpm can find scsynth
          echo "$INSTALL_PATH/bin" >> $GITHUB_PATH

          # start jack
          jackd --no-realtime -d dummy &
      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: '2.x'
      - name: prepare tests
        run: |
          echo `python --version` # check version
          sudo pip install -U pip setuptools
          sudo pip install $QPM_URL

          # install API quark
          mkdir $QUARKS_PATH && cd $QUARKS_PATH
          git clone --depth=1 https://github.com/supercollider-quarks/API

          # make working copy of the script
          cp $SCRIPT_PROTO $SCRIPT_RUN
      - name: run tests on Linux
        if: runner.os == 'Linux'
        env:
          PYCHARM_HOSTED: 1 # enable color output
          QPM_DEBUG: 1
        run: xvfb-run --server-args="-screen 0, 1280x720x24" -a qpm test.run -l $SCRIPT_RUN --path $SCLANG --include $QUARKS_PATH $TESTS_PATH
      - name: run tests on macOS
        if: runner.os == 'macOS'
        env:
          PYCHARM_HOSTED: 1 # enable color output
          QPM_DEBUG: 1
        run: qpm test.run -l $SCRIPT_RUN --path $SCLANG --include $QUARKS_PATH $TESTS_PATH

  deploy_s3:
    strategy:
      fail-fast: false
      matrix:
        include:

          - artifact-suffix: macOS
            s3-os-name: osx
            s3-artifact-suffx: ''
            s3-artifact-extension: 'dmg'
            artifact-extension: '.dmg' # for download-artifacts action, for non-zip only, should include `.`
            s3-create-latest-link: true # create link to pointing to the "latest" build; activate only one per branch per s3-os-name

          - artifact-suffix: win32
            s3-os-name: win32
            s3-artifact-suffx: ''
            s3-artifact-extension: 'zip'
            s3-create-latest-link: true # create link to pointing to the "latest" build

          - artifact-suffix: win64
            s3-os-name: win64
            s3-artifact-suffx: ''
            s3-artifact-extension: 'zip'
            s3-create-latest-link: true # create link to pointing to the "latest" build

    if: github.repository_owner == 'supercollider' && github.event_name != 'pull_request' # run in the main repo, but not on pull requests
    needs: [lint, macOS, Windows]
    runs-on: ubuntu-18.04
    name: 'deploy ${{ matrix.artifact-suffix }} to s3'
    env:
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      ARTIFACT_FILE: SuperCollider-${{ needs.lint.outputs.sc-version }}-${{ matrix.artifact-suffix }}${{ matrix.artifact-extension }}
      UPLOAD_TO_S3: ${{ (secrets.S3_ACCESS_KEY_ID != 0) && !startsWith(github.ref, 'refs/tags/') }}
      S3_CREATE_LATEST_LINK: ${{ matrix.s3-create-latest-link && (secrets.S3_ACCESS_KEY_ID != 0) && startsWith(github.ref, 'refs/heads/') }}
      S3_ARTIFACT_PATH: ${{ github.workspace }}/build/s3-upload
      S3_ARTIFACT_NAME: SC-${{ github.sha }}${{ matrix.s3-artifact-suffx }}.${{ matrix.s3-artifact-extension }}
      S3_BUILD_LOCATION: builds/supercollider/supercollider/${{ matrix.s3-os-name }}
      S3_ROOT_URL: 'https://supercollider.s3.amazonaws.com'
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        if: env.UPLOAD_TO_S3 == 'true'
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}
      - name: preapre s3 upload
        if: env.UPLOAD_TO_S3 == 'true'
        run: |
          mkdir $S3_ARTIFACT_PATH
          mv $INSTALL_PATH/*.* $S3_ARTIFACT_PATH/$S3_ARTIFACT_NAME

          # set S3_BUILD_LOCATION
          echo 'S3_BUILD_URL<<EOF' >> $GITHUB_ENV
          echo ${{ env.S3_ROOT_URL }}/${{ env.S3_BUILD_LOCATION }}/${{ env.S3_ARTIFACT_NAME }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          if [[ $S3_CREATE_LATEST_LINK == true ]]; then
            # set LATEST_HTML_PATH and LATEST_HTML_URL
            echo 'LATEST_HTML_PATH<<EOF' >> $GITHUB_ENV
            echo ${{ env.S3_ARTIFACT_PATH }}/${GITHUB_REF#refs/heads/}-latest.html >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
            echo 'LATEST_HTML_URL<<EOF' >> $GITHUB_ENV
            echo ${{ env.S3_ROOT_URL }}/${{ env.S3_BUILD_LOCATION }}/${GITHUB_REF#refs/heads/}-latest.html >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV
          fi
      - name: create latest link
        if: env.S3_CREATE_LATEST_LINK == 'true'
        env:
          FWD_HTML: '<html><head><meta http-equiv="refresh" content="0; url=''${{ env.S3_BUILD_URL }}''" /></head></html>'
        run: |
          mkdir -p "${LATEST_HTML_PATH%/*}"
          echo writing $FWD_HTML to $LATEST_HTML_PATH
          echo $FWD_HTML > $LATEST_HTML_PATH
          echo html file contents:
          cat $LATEST_HTML_PATH
      - name: upload to S3
        uses: jakejarvis/s3-sync-action@master
        if: env.UPLOAD_TO_S3 == 'true'
        with:
          args: --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          AWS_S3_BUCKET: supercollider
          AWS_S3_ENDPOINT: https://s3-us-west-2.amazonaws.com
          AWS_REGION: 'us-west-2'
          SOURCE_DIR: ${{ env.S3_ARTIFACT_PATH }}
          DEST_DIR: ${{ env.S3_BUILD_LOCATION }}
      - name: post S3 build location
        if: env.UPLOAD_TO_S3 == 'true'
        run: |
          echo "::group::S3 build location"
          echo $S3_BUILD_URL
          if [[ -n "$LATEST_HTML_URL" ]]; then echo $LATEST_HTML_URL; fi
          echo "::endgroup::"

  # release - list of files uploaded to GH release is specified in the *upload* step
  deploy_gh:
    if: startsWith(github.ref, 'refs/tags/') # run on tagged commits
    needs: [lint, macOS, Windows]
    runs-on: ubuntu-18.04
    name: 'deploy release'
    env:
      INSTALL_PATH: ${{ github.workspace }}/Install
      ARTIFACT_FILE_PREFIX: 'SuperCollider-${{ needs.lint.outputs.sc-version }}'
    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ env.INSTALL_PATH }} # no "name" paramter - download all artifacts
      - name: upload to the release page
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-macOS.dmg/*
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-macOS-legacy.dmg/*
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-win32-installer/*
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-win64-installer/*
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-win32/*
            ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE_PREFIX }}-win64/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
