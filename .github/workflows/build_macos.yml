name: Build Mac OS
on:
  workflow_call:
    inputs:
      sc-version:
        required: true
        type: string

jobs:
  build-macos:
    runs-on: macos-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - job-name: "universal"
            os-version: "12"
            xcode-version: "13.4.1"
            deployment-target: "10.14"
            cmake-architectures: "x86_64;arm64"
            use-syslibs: false
            shared-libscsynth: false
            system-portaudio: true
            build-libsndfile: false
            build-readline: false
            build-fftw: false
            artifact-suffix: "macOS-universal"
            verify-app: false

          - job-name: "x64 legacy"
            os-version: "12"
            xcode-version: "13.4.1"
            qt-version: "5.9.9" # will use qt from aqtinstall
            deployment-target: "10.11"
            cmake-architectures: x86_64
            use-syslibs: false
            shared-libscsynth: false
            build-libsndfile: true
            system-portaudio: false
            build-fftw: true
            vcpkg-triplet: x64-osx-release-supercollider # required for build-libsndfile
            artifact-suffix: "macOS-x64-legacy" # set if needed - will trigger artifact upload

          - job-name: "x64 use system libraries"
            os-version: "12"
            xcode-version: "13.4.1"
            deployment-target: "10.14"
            cmake-architectures: x86_64
            use-syslibs: true
            shared-libscsynth: false
            verify-app: true

          - job-name: "x64 shared libscsynth"
            os-version: "12"
            xcode-version: "13.4.1"
            deployment-target: "10.14"
            cmake-architectures: x86_64
            use-syslibs: false
            shared-libscsynth: true
            verify-app: true

    name: macOS ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      ARTIFACT_FILE: "SuperCollider-${{ inputs.sc-version }}-${{ matrix.artifact-suffix }}.dmg"
      DEVELOPER_DIR: "/Applications/Xcode_${{ matrix.xcode-version }}.app/Contents/Developer"
      MACOSX_DEPLOYMENT_TARGET: "${{ matrix.deployment-target }}"
      CMAKE_OSX_ARCHITECTURES: "${{ matrix.cmake-architectures }}"
      BREW_UNIVERSAL_WORKDIR: ${{ github.workspace }}/brew-universal
      SKIP_SIGNING: 1 # for brew-install-universal
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: prepare timestamp for cache
        id: current-date
        run: |
          echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "week=$(date '+%U')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ matrix.cmake-architectures }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ matrix.cmake-architectures }}-

      - name: cleanup homebrew downloads # always remove existing downloads first, as we bring back relevant downloads from cache
        run: rm -rf $(brew --cache)

      - name: cache homebrew downloads
        uses: actions/cache@v4
        id: cache-homebrew
        with:
          path: ~/Library/Caches/Homebrew/downloads
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ matrix.cmake-architectures }}-homebrew-${{ steps.current-date.outputs.week }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ matrix.qt-version }}-${{ matrix.cmake-architectures }}-homebrew-

      - name: cache homebrew universal packages
        uses: actions/cache@v4
        if: matrix.cmake-architectures != 'x86_64' && (matrix.build-libsndfile != true || matrix.build-readline != true || matrix.build-fftw != true)
        with:
          path: ${{ env.BREW_UNIVERSAL_WORKDIR }}
          key: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.deployment-target }}-brew_universal-${{ steps.current-date.outputs.week }}
          restore-keys: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.deployment-target }}-brew_universal-

      - name: cache vcpkg
        if: matrix.vcpkg-triplet
        uses: actions/cache@v4
        with:
          path: ~/.cache/vcpkg/archives
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.deployment-target }}-${{ matrix.vcpkg-triplet }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.deployment-target }}-${{ matrix.vcpkg-triplet }}-

      - name: install dependencies
        run: |
          brew install ccache
          # add ccamke to PATH - see https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-commands-for-github-actions
          echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
          if [[ "${{ matrix.system-portaudio }}" != "false" ]]; then brew install portaudio; fi
          if [[ "${{ matrix.build-fftw }}" != "true" ]]; then brew install fftw; fi

          # install universal versions of homebrew libraries
          if [[ "${{ matrix.cmake-architectures }}" != "x86_64" ]]; then
              echo "Downloading script for creating universal binaries from homebrew packages"
              curl -O -J -L https://gist.githubusercontent.com/dyfer/6c83905d4593750105897e51e87ec345/raw/1f89f2fe767a2e637387e74f0c8dcc86a0963f60/brew-install-universal.sh
              chmod +x brew-install-universal.sh
              if [[ "${{ matrix.build-libsndfile }}" != "true" ]]; then ./brew-install-universal.sh libsndfile; fi
              if [[ "${{ matrix.build-readline }}" != "true" ]]; then ./brew-install-universal.sh readline; fi
              if [[ "${{ matrix.build-fftw }}" != "true" ]]; then ./brew-install-universal.sh fftw; fi
              if [[ "${{ matrix.system-portaudio }}" != "false" ]]; then ./brew-install-universal.sh portaudio; fi
          fi

      - name: install libsndfile # to make it compatible with older OSes (lower deployment target)
        if: matrix.build-libsndfile == true && matrix.vcpkg-triplet
        run: |
          brew uninstall --ignore-dependencies libsndfile libvorbis libogg flac opus
          vcpkg install libsndfile --triplet="${{ matrix.vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"

      - name: install readline # to allow cross-compiling
        if: matrix.build-readline == true && matrix.vcpkg-triplet
        run: |
          brew uninstall --ignore-dependencies readline
          vcpkg install readline --triplet="${{ matrix.vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"
          # vcpkg readline currently fails on arm64 (ncurses dependency)
          # see https://github.com/microsoft/vcpkg/issues/22654

      - name: install fftw # to allow cross-compiling
        if: matrix.build-fftw == true && matrix.vcpkg-triplet
        run: |
          vcpkg install fftw3 --triplet="${{ matrix.vcpkg-triplet }}" --overlay-triplets="$GITHUB_WORKSPACE/vcpkg/triplets"

      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: brew install yaml-cpp boost@1.76

      - name: install qt from homebrew
        if: matrix.cmake-architectures == 'x86_64' && !matrix.qt-version
        run: brew install qt@5

      - name: install qt universal binary from homebrew
        if: matrix.cmake-architectures != 'x86_64' && !matrix.qt-version
        run: ./brew-install-universal.sh qt@5

      - name: install qt using aqtinstall
        uses: jurplel/install-qt-action@v3
        if: matrix.qt-version
        env:
          DEVELOPER_DIR: "" # remove developer dir which causes installation to fail
        with:
          modules: "qtwebengine"
          version: ${{ matrix.qt-version }}
          cache: true
          cache-key-prefix: ${{ runner.os }}-v1-${{ matrix.os-version }}-${{ matrix.xcode-version }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-qt${{ matrix.qt-version }}

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON -DBoost_INCLUDE_DIR=/usr/local/opt/boost@1.76/include $EXTRA_CMAKE_FLAGS"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          if [[ -z "${{ matrix.qt-version }}" ]]; then EXTRA_CMAKE_FLAGS="-DCMAKE_PREFIX_PATH=`brew --prefix qt@5` $EXTRA_CMAKE_FLAGS"; fi

          if [[ "${{ matrix.verify-app }}" == "true" ]]; then EXTRA_CMAKE_FLAGS="-DSC_VERIFY_APP=ON $EXTRA_CMAKE_FLAGS"; fi

          if [[ "${{ matrix.system-portaudio }}" == "false" ]]; then EXTRA_CMAKE_FLAGS="-DSYSTEM_PORTAUDIO=OFF $EXTRA_CMAKE_FLAGS"; fi

          if [[ -n "${{ matrix.vcpkg-triplet }}" ]]; then
            export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
            EXTRA_CMAKE_FLAGS="-DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg-triplet }} -DCMAKE_BUILD_TYPE=Release $EXTRA_CMAKE_FLAGS"
          fi

          echo "EXTRA_CMAKE_FLAGS:" $EXTRA_CMAKE_FLAGS

          cmake -G"Xcode" -DRULE_LAUNCH_COMPILE=ccache -DSUPERNOVA=ON $EXTRA_CMAKE_FLAGS ..

      - name: build
        run: cmake --build $BUILD_PATH --config Release --target install

      - name: create archive
        if: matrix.artifact-suffix
        run: |
          cd $INSTALL_PATH
          ln -s /Applications SuperCollider/Applications
          mkdir -p SuperCollider/.background
          cp ../../package/background_2_arrow.png SuperCollider/.background/background_2_arrow.png
          cp ../../package/ds_store SuperCollider/.DS_Store
          # the following assumes that we end up with the build in the folder SuperCollider
          # hdiutil sometimes fails with "create failed - Resource busy"
          # when that happens, we run it again
          hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE || hdiutil create -srcfolder SuperCollider -format UDZO -fs HFS+ $ARTIFACT_FILE

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}
