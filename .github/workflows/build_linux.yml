name: Build Linux
on:
  workflow_call:
    inputs:
      sc-version:
        required: true
        type: string

jobs:
  build-linux:
    runs-on: ubuntu-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        include:

          - job-name: ""
            os-version: "22.04"
            c-compiler: "gcc-9"
            cxx-compiler: "g++-9"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "22.04"
            c-compiler: "gcc-11"
            cxx-compiler: "g++-11"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "22.04"
            c-compiler: "gcc-12"
            cxx-compiler: "g++-12"
            use-syslibs: false
            shared-libscsynth: false
            artifact-suffix: "ubuntu-22.04-gcc12" # will trigger artifact upload; after changing this update the test-linux artifact-file in actions.yml

          - job-name: "use system libraries"
            os-version: "24.04"
            c-compiler: "gcc-13"
            cxx-compiler: "g++-13"
            use-syslibs: true
            shared-libscsynth: false

          - job-name: "shared libscsynth"
            os-version: "24.04"
            c-compiler: "gcc-14"
            cxx-compiler: "g++-14"
            use-syslibs: false
            shared-libscsynth: true
            
          - job-name: ""
            os-version: "22.04"
            c-compiler: "clang-11"
            cxx-compiler: "clang++-11"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "24.04"
            c-compiler: "clang-15"
            cxx-compiler: "clang++-15"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "24.04"
            c-compiler: "clang-16"
            cxx-compiler: "clang++-16"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "24.04"
            c-compiler: "clang-17"
            cxx-compiler: "clang++-17"
            use-syslibs: false
            shared-libscsynth: false

          - job-name: ""
            os-version: "24.04"
            c-compiler: "clang-18"
            cxx-compiler: "clang++-18"
            use-syslibs: false
            shared-libscsynth: false

    name: Ubuntu ${{ matrix.os-version }} ${{ matrix.c-compiler }} ${{ matrix.job-name }}
    env:
      BUILD_PATH: ${{ github.workspace }}/build
      INSTALL_PATH: ${{ github.workspace }}/build/Install
      USE_SYSLIBS: ${{ matrix.use-syslibs }}
      SHARED_LIBSCSYNTH: ${{ matrix.shared-libscsynth }}
      CC: ${{ matrix.c-compiler }}
      CXX: ${{ matrix.cxx-compiler }}
      ARTIFACT_FILE: "SuperCollider-${{ inputs.sc-version }}-${{ matrix.artifact-suffix }}"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: prepare daily timestamp for cache
        id: current-date
        run: echo "stamp=$(date '+%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.ccache
            ~/.cache/ccache
          key: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-${{ steps.current-date.outputs.stamp }}
          restore-keys: ${{ runner.os }}-${{ matrix.os-version }}-${{ matrix.c-compiler }}-${{ matrix.use-syslibs }}-${{ matrix.shared-libscsynth }}-

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes build-essential cmake pkg-config libjack-jackd2-dev libsndfile1-dev libasound2-dev libavahi-client-dev libreadline6-dev libfftw3-dev libicu-dev libxt-dev libudev-dev emacs ccache
          # install appropriate clang/gcc compilers
          if [[ "$CC" =~ clang-[1-9] ]]; then
            sudo apt-get install -y $CC # package names are clang-X
            sudo apt-get install -y libc++-${CC##clang-}-dev libc++abi-${CC##clang-}-dev # install additional libraries; package names are libc++-X-dev and libc++abi-X-dev
          elif [[ "$CC" =~ gcc-[1-9] ]]; then
            sudo apt-get install -y $CXX # package names are g++-X
          fi

      - name: install system libraries
        if: env.USE_SYSLIBS == 'true'
        run: sudo apt-get install --yes libboost-thread-dev libboost-system-dev libboost-filesystem-dev libboost-regex-dev libboost-test-dev libboost-program-options-dev libyaml-cpp-dev

      - name: install qt from apt
        run: sudo apt-get install --yes qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-tools-dev-tools qt6-declarative-dev libqt6gui6 libqt6printsupport6 libqt6svgwidgets6 libqt6websockets6-dev libqt6webenginecore6 qt6-webengine-dev qt6-webengine-dev-tools libqt6webchannel6-dev libqt6opengl6-dev libqt6svg6-dev linguist-qt6 qt6-l10n-tools  libglx-dev libgl1-mesa-dev libvulkan-dev libxkbcommon-dev libxcb-xkb-dev

      - name: configure
        run: |
          mkdir $BUILD_PATH && cd $BUILD_PATH

          EXTRA_CMAKE_FLAGS=

          if $USE_SYSLIBS; then EXTRA_CMAKE_FLAGS="-DSYSTEM_BOOST=ON -DSYSTEM_YAMLCPP=ON"; fi

          if $SHARED_LIBSCSYNTH; then EXTRA_CMAKE_FLAGS="-DLIBSCSYNTH=ON $EXTRA_CMAKE_FLAGS"; fi

          cmake $EXTRA_CMAKE_FLAGS -DSC_EL=ON -DSC_VIM=ON -DSC_QT=ON -DSC_IDE=ON  -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PATH -DCMAKE_BUILD_TYPE=Release .. # --debug-output

      - name: build
        run: |
          cd $BUILD_PATH
          make install -j2

      - name: create archive
        if: matrix.artifact-suffix
        run: cd $INSTALL_PATH && zip --symlinks -r $ARTIFACT_FILE.zip .

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        if: matrix.artifact-suffix
        with:
          name: ${{ env.ARTIFACT_FILE }}
          path: ${{ env.INSTALL_PATH }}/${{ env.ARTIFACT_FILE }}.zip
