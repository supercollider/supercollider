#line 1 "lex.scdoc.cpp"

#line 3 "lex.scdoc.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scdoc_create_buffer
#define yy_delete_buffer scdoc_delete_buffer
#define yy_scan_buffer scdoc_scan_buffer
#define yy_scan_string scdoc_scan_string
#define yy_scan_bytes scdoc_scan_bytes
#define yy_init_buffer scdoc_init_buffer
#define yy_flush_buffer scdoc_flush_buffer
#define yy_load_buffer_state scdoc_load_buffer_state
#define yy_switch_to_buffer scdoc_switch_to_buffer
#define yypush_buffer_state scdocpush_buffer_state
#define yypop_buffer_state scdocpop_buffer_state
#define yyensure_buffer_stack scdocensure_buffer_stack
#define yy_flex_debug scdoc_flex_debug
#define yyin scdocin
#define yyleng scdocleng
#define yylex scdoclex
#define yylineno scdoclineno
#define yyout scdocout
#define yyrestart scdocrestart
#define yytext scdoctext
#define yywrap scdocwrap
#define yyalloc scdocalloc
#define yyrealloc scdocrealloc
#define yyfree scdocfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define scdoc_create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer scdoc_create_buffer
#endif

#ifdef yy_delete_buffer
#define scdoc_delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer scdoc_delete_buffer
#endif

#ifdef yy_scan_buffer
#define scdoc_scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer scdoc_scan_buffer
#endif

#ifdef yy_scan_string
#define scdoc_scan_string_ALREADY_DEFINED
#else
#define yy_scan_string scdoc_scan_string
#endif

#ifdef yy_scan_bytes
#define scdoc_scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes scdoc_scan_bytes
#endif

#ifdef yy_init_buffer
#define scdoc_init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer scdoc_init_buffer
#endif

#ifdef yy_flush_buffer
#define scdoc_flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer scdoc_flush_buffer
#endif

#ifdef yy_load_buffer_state
#define scdoc_load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state scdoc_load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define scdoc_switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer scdoc_switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define scdocpush_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state scdocpush_buffer_state
#endif

#ifdef yypop_buffer_state
#define scdocpop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state scdocpop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define scdocensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack scdocensure_buffer_stack
#endif

#ifdef yylex
#define scdoclex_ALREADY_DEFINED
#else
#define yylex scdoclex
#endif

#ifdef yyrestart
#define scdocrestart_ALREADY_DEFINED
#else
#define yyrestart scdocrestart
#endif

#ifdef yylex_init
#define scdoclex_init_ALREADY_DEFINED
#else
#define yylex_init scdoclex_init
#endif

#ifdef yylex_init_extra
#define scdoclex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra scdoclex_init_extra
#endif

#ifdef yylex_destroy
#define scdoclex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy scdoclex_destroy
#endif

#ifdef yyget_debug
#define scdocget_debug_ALREADY_DEFINED
#else
#define yyget_debug scdocget_debug
#endif

#ifdef yyset_debug
#define scdocset_debug_ALREADY_DEFINED
#else
#define yyset_debug scdocset_debug
#endif

#ifdef yyget_extra
#define scdocget_extra_ALREADY_DEFINED
#else
#define yyget_extra scdocget_extra
#endif

#ifdef yyset_extra
#define scdocset_extra_ALREADY_DEFINED
#else
#define yyset_extra scdocset_extra
#endif

#ifdef yyget_in
#define scdocget_in_ALREADY_DEFINED
#else
#define yyget_in scdocget_in
#endif

#ifdef yyset_in
#define scdocset_in_ALREADY_DEFINED
#else
#define yyset_in scdocset_in
#endif

#ifdef yyget_out
#define scdocget_out_ALREADY_DEFINED
#else
#define yyget_out scdocget_out
#endif

#ifdef yyset_out
#define scdocset_out_ALREADY_DEFINED
#else
#define yyset_out scdocset_out
#endif

#ifdef yyget_leng
#define scdocget_leng_ALREADY_DEFINED
#else
#define yyget_leng scdocget_leng
#endif

#ifdef yyget_text
#define scdocget_text_ALREADY_DEFINED
#else
#define yyget_text scdocget_text
#endif

#ifdef yyget_lineno
#define scdocget_lineno_ALREADY_DEFINED
#else
#define yyget_lineno scdocget_lineno
#endif

#ifdef yyset_lineno
#define scdocset_lineno_ALREADY_DEFINED
#else
#define yyset_lineno scdocset_lineno
#endif

#ifdef yywrap
#define scdocwrap_ALREADY_DEFINED
#else
#define yywrap scdocwrap
#endif

#ifdef yyalloc
#define scdocalloc_ALREADY_DEFINED
#else
#define yyalloc scdocalloc
#endif

#ifdef yyrealloc
#define scdocrealloc_ALREADY_DEFINED
#else
#define yyrealloc scdocrealloc
#endif

#ifdef yyfree
#define scdocfree_ALREADY_DEFINED
#else
#define yyfree scdocfree
#endif

#ifdef yytext
#define scdoctext_ALREADY_DEFINED
#else
#define yytext scdoctext
#endif

#ifdef yyleng
#define scdocleng_ALREADY_DEFINED
#else
#define yyleng scdocleng
#endif

#ifdef yyin
#define scdocin_ALREADY_DEFINED
#else
#define yyin scdocin
#endif

#ifdef yyout
#define scdocout_ALREADY_DEFINED
#else
#define yyout scdocout
#endif

#ifdef yy_flex_debug
#define scdoc_flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug scdoc_flex_debug
#endif

#ifdef yylineno
#define scdoclineno_ALREADY_DEFINED
#else
#define yylineno scdoclineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scdocwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1261] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  108,   66,   55,   48,
       56,   64,   66,   50,   67,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   67,   66,   65,   54,   47,   67,   64,   67,   54,
       46,   56,   67,   89,   89,   85,   56,   86,   88,   90,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   90,  106,  106,   56,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  106,  106,  106,  106,   56,  106,
      106,   62,   60,   61,   56,   58,   62,   50,   58,   55,

        0,    0,   50,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   49,   64,   45,   50,   41,    0,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,    0,    0,    0,
       44,   65,   47,   64,    0,    0,    0,    0,   89,   89,
       86,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   86,   88,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  104,    0,    0,   60,   60,   58,    0,   58,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   45,    0,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   52,   53,   51,   44,   42,    0,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  105,   59,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       43,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   57,   63,   63,
       63,   63,    0,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,    0,    0,    0,   63,    0,   63,   63,
       63,   63,   63,   63,    0,   63,   63,   63,   63,   63,
       63,    0,   63,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
       63,   63,    0,   63,   63,   35,   63,   63,   63,   63,
       63,   63,   63,    0,   63,   63,   29,   21,   37,   63,
       28,   63,   63,   63,   63,   63,   63,   32,   63,   63,
       63,    0,   63,    0,   22,   63,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   87,    0,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   87,    0,    0,    0,
        0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
        0,    0,    0,   92,  100,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   63,   63,    1,   63,   63,   35,
       38,   63,   63,   63,   63,   63,   63,   63,   31,   63,
       63,   29,   21,   37,   40,    0,   28,   63,   63,   63,
       63,   63,   63,   32,    0,   63,   63,   25,   63,    2,

       22,   63,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   87,   68,   87,
       87,   87,   87,   87,   87,   87,    0,   87,   87,   87,
       87,   87,   87,   69,    0,    0,    0,    0,    0,    0,
        0,   98,  101,    0,    0,    0,    0,   94,    0,    0,
       92,  100,  103,    0,    0,    0,    0,   95,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,   63,   63,
        1,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       31,   63,    0,   13,   63,    0,   63,    0,    0,    0,
       33,   63,    0,   25,   63,    2,    0,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   87,   68,   87,   87,   87,   87,   87,   87,    0,
       80,    0,   87,    0,    0,   87,    0,   69,    0,    0,
        0,   93,    0,    0,    0,    0,    0,    0,    0,   94,
        0,    0,   96,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   30,    0,   63,
       63,   63,   63,   63,   63,   63,    0,    0,    0,   63,

        8,   13,   63,    9,    0,    4,   19,   10,   33,   63,
        3,    0,   27,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   87,   87,   87,   87,   87,    0,   87,   75,
       80,   76,    0,   71,   77,   87,   70,    0,   93,    0,
        0,    0,    0,    0,    0,    0,   96,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   14,   63,   63,    0,   63,   63,
       63,   63,   34,   18,   26,   63,    8,   63,    9,    6,
        4,   19,   10,   63,    3,   36,   27,   89,   89,   89,
       89,   89,   89,   89,   87,   87,    0,   87,   87,   84,

       87,   75,   76,   73,   71,   77,   87,   70,    0,    0,
        0,    0,    0,   97,    0,    0,   99,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   14,    0,
       63,    7,    0,   63,   63,    0,   34,   18,   26,   63,
       63,    6,    0,   36,   39,   89,   89,   89,   89,   89,
       89,    0,   87,   74,    0,   87,   84,   87,   73,    0,
        0,    0,    0,   97,    0,   99,  102,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    5,   63,    7,
       12,   63,    0,   20,   63,   63,   11,   89,   89,   89,
       72,   87,   74,   79,    0,   87,   78,    0,    0,    0,

        0,    0,    0,    0,    0,    5,    0,   12,   63,   15,
       20,   63,    0,   11,   89,   89,   72,    0,   79,   81,
       87,   78,    0,    0,    0,    0,    0,   16,   63,   15,
       63,   23,   89,   82,   81,   87,    0,    0,    0,   16,
        0,   63,   23,   89,   82,   87,    0,    0,    0,   24,
        0,   89,    0,    0,   24,   17,   83,   17,   83,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,    9,    7,   10,
       11,    9,    9,   12,    9,    7,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    9,
        9,    9,    6,    9,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        7,   40,    7,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   51,    7,   66,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    4,
        4,    5,    1,    6,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static const flex_int16_t yy_base[1269] =
    {   0,
        0,    0,   65,  104,  143,  182,  222,    0,  288,    0,
      353,    0,   79,   83,  413,    0, 3961, 3962,  478,   87,
      118,   89, 3952,   72, 3944,   97, 3943,  109,  117,  102,
       86,  144,   58,  119,  159,  146,  145,  175,  519,  346,
      348,  476, 3891,    0,  514,  543,  557,  202, 3941, 3962,
      566, 3962, 3962,    0,  605, 3962, 3962,  126, 3941, 3962,
      665,  731,  536,  558,  605,  574,  661,  666,  667,  782,
      727, 3939, 3962,  842, 3962,  109,  164,  158,  337,  354,
      347,  350,  557,  344,  467,  665,  563,  638,  760, 3938,
      786, 3962,  593, 3962,  166,  639,    0,  209,    0,    0,

      790, 3944,  213, 3936,  456,  674,  728,  457,  470,  472,
      530,  543,  739,  654,  554,  582,  776,  783,  602, 3884,
      816,  848,  871,  852,  487, 3962, 3936, 3933,  735,  734,
      789,  798,  827,  850,  653,  703,  864,  874,  875,  878,
      761,  883,  880,  888,  890,  892,  895,  917,  903,  908,
      911,  924,  791,  900,  920,  913,  934, 3939, 3931, 3879,
      969,    0,  979,  950,  983,  997, 3929, 3928,    0,    0,
      538,  963,  634,  664,  781,  888,  943,  933,  975,  976,
      979,  765, 3928,  988,  990,  998, 1018, 1026, 1031, 1036,
     1061, 1056, 1077, 1078, 1095, 1136, 1094, 3926,    0, 1102,

      987,  971,  981,  993, 1060,  999, 1018, 1035, 1121, 1117,
     1108, 1127, 1141, 1116, 1125, 1141, 1143, 1129, 1126, 1141,
     1139, 1140, 1152, 1168, 1159, 1159, 1149, 1176, 1157, 1160,
     1212, 3925, 3962, 1220, 3922, 1224, 1207, 1225, 3924,    0,
     1196, 1198, 1217, 1218, 1218, 1207, 1225, 1212, 1210, 1206,
     1213, 1213, 1214, 1216, 1224, 1229, 1261, 1237, 1265, 1240,
     1233, 1227, 1244, 1238, 1295, 3920, 1269, 1270, 1274, 1289,
     1287, 1286, 1288, 1295, 1308, 1294, 1296, 1300, 1313, 1312,
     1317, 1314, 1315, 1321, 1322, 1327, 1338, 1326, 1341, 1342,
     1344, 1348, 1349, 1359, 1352, 1362, 1371, 1372, 1379, 1380,

     1378, 3962, 3962, 3962, 1399, 3962, 3917, 1362, 1381, 1368,
     1377, 1396, 1380, 1375, 1383, 1395, 1401, 1403, 1413, 1393,
     1428, 1433, 1434, 1441, 1475, 1466, 1479, 1488, 1497, 1522,
     1518, 1524, 1540, 1560, 1565, 3962, 1560, 1417, 1425, 1439,
     1452, 1477, 1523, 1518, 1545, 1545, 1557, 1564, 1563, 1561,
     1574, 1578, 1580, 1568, 1582, 1592, 1575, 1576, 1585, 1586,
     1592, 1602, 1598, 3962, 3962, 1593, 1611, 1600, 1617, 1599,
     1615, 1622, 1624, 1615, 1610, 1613, 1612, 1616, 1629, 1630,
     1635, 1639, 1622, 1636, 1645, 1627, 1633, 1638, 1644, 1647,
     1657, 1653, 1663, 1656,    0, 1674, 1677, 1679, 1675, 3914,

     1684, 1681, 1687, 1680, 1698, 1676, 1703, 1701, 1707, 1705,
     3907, 3902, 3900, 1709, 3898, 1722, 1710, 1714, 1728, 1735,
     1729, 3894, 1740, 1736, 1744, 1751, 1739, 1755, 3892, 1733,
     3962, 1743, 1731, 1735, 1758, 1749, 1744, 1743, 1758, 1748,
     1761, 1771, 1757, 1759, 1766, 1769, 1799, 1798, 1807, 1800,
     1843, 1848, 1849, 1850, 1856, 1881, 1891, 1900, 1899, 1901,
     1942, 1778, 1789, 1799, 1806, 1821, 1834, 3890, 1840, 1852,
     1872, 1889, 1902, 1919, 1908, 3886, 3882, 1910, 1933, 1927,
     1926, 1939, 3881, 1936, 1947, 1952, 1936, 1951, 1945, 1952,
     1943, 3855, 1949, 1949, 1947, 1945, 1950, 1953, 1967, 1957,

     3854, 3852, 1960, 3851, 1972, 1985, 1978, 1977, 1980, 1990,
     1995, 2001, 1999, 1986, 2001, 3840, 1998,    0, 2010, 2008,
     2009, 2016,  542, 2014, 2011, 2034, 2018, 2038, 2037, 2042,
     3833, 2040, 2041,  753,  817,  854, 2044, 1052, 2047, 2051,
     2060, 2063, 2052, 2071, 1125, 2072, 2073, 2078, 3832, 2077,
     3829, 1241, 2067, 2052, 2069, 2075, 2072, 2077, 2096, 2083,
     2084, 2099, 2086, 2085, 2097, 2103, 2108, 2105, 2116, 2158,
     2137, 2154, 2138, 2179, 2171, 2201, 2203, 2220, 2222, 2228,
     2253, 2258, 2271, 3826, 3807, 2092, 2101, 2105, 2274, 3804,
     2117, 2132, 2138, 2149, 3801, 2160, 2167, 3779, 3776, 2203,

     2205, 2221, 2231, 2223, 3769, 2269, 2274, 2261, 2255, 3701,
     2276, 2269, 2295, 3700, 2284, 2281, 2283, 2279, 2288, 2291,
     2297, 2300, 3654, 3622, 2316, 3606, 2304, 2303, 2319, 2320,
     2313, 2313, 2326, 2313, 3601, 2307, 3554, 3486, 2319, 3485,
     2335, 2341, 1363, 2339, 2345, 1432, 2342, 2352, 2360, 2363,
     2364, 2367, 2366, 1416, 2365, 2374,  843, 2402, 2392, 3470,
     2425, 2395, 2396, 2403, 2405, 2410, 2408, 2429, 3464, 2420,
     2421, 1499, 2424, 1510, 2454, 2423, 2410, 2433, 2424, 2422,
     2422, 2422, 2420, 2434, 2428, 2444, 2445, 2438, 2455, 2442,
     3405, 2476, 3359, 2482, 2489, 2480, 2521, 2523, 2528, 2541,

     2572, 2573, 2574, 2579, 2604, 2620, 2622, 3322, 3315, 3306,
     2446, 3295, 2457, 2477, 2469, 2559, 2470, 2510, 2525, 2534,
     3290, 2538, 2540, 1203, 2605, 3251, 2571, 2578, 2592, 2584,
     2638, 3241, 2610, 2606, 2617, 2622, 2621, 3211, 2635, 2624,
     2663, 2624, 2629, 2636, 2636, 2652, 2649, 2667, 2667, 2689,
     3168, 2668, 2670, 2678, 2678, 2666, 2671, 2667, 2663, 3133,
     2672, 3129, 2682, 1831, 2690, 2691, 1560, 2698, 2716, 2705,
     3110, 2719, 2720, 2703, 2723, 2706, 2718, 2725, 1803, 2728,
     3080, 2221, 2750, 2754, 3091, 1835, 2776, 2745, 3067, 2751,
     3046, 3028, 3024, 2784, 1874, 2752, 2948, 2789, 2780, 2396,

     2794, 2932, 2688, 2729, 2750, 2749, 2753, 2781, 2785, 2785,
     2927, 2785, 2788, 2788, 2783, 2779, 2775, 2818, 2515, 2819,
     2827, 2828, 2860, 2862, 2866, 2884, 2902, 2908, 2909, 2914,
     2918, 2952, 2957, 2767, 2813, 2817, 2793, 2895, 2812, 2803,
     2821, 2904, 2900, 2836, 2831, 2868, 2872, 2823, 2908, 2883,
     2944, 2950, 2894, 2873, 2898, 2841, 2837, 2986, 2802, 2933,
     2746, 2939, 2932, 2951, 2943, 2958, 2993, 2957, 2957, 2952,
     2969, 2964, 2980, 2989, 2608, 3012, 2597, 2992, 2590, 2982,
     2558, 2551, 2511, 2994, 2510, 3000, 2498, 3019, 2480, 3007,
     3023, 3015, 3014, 3017, 3018, 3016, 3021, 2468, 2461, 2393,

     3047, 3026, 2017, 3053, 3030, 2147, 2377, 2162, 2338, 2469,
     3065, 3035, 2704, 3082, 2369, 3054, 2808, 3038, 3029, 3051,
     3049, 3041, 3043, 3058, 2288, 2267, 3045, 2257, 2246, 3057,
     2245, 3076, 3088, 3093, 3094, 3101, 3103, 3136, 3142, 2201,
     3106, 2190, 3146, 2151, 2140, 3144, 2133, 3110, 3136, 3162,
     3079, 3132, 3080, 3132, 3148, 3145, 3153, 2116, 1921, 3177,
     3152, 1917, 3205, 3155, 1880, 1867, 3167, 3167, 3171, 3163,
     3174, 3181, 3182, 1866, 1856, 3186, 1824, 3188, 1818, 1794,
     1713, 1702, 1546, 3188, 1540, 1532, 1505, 3218, 2851, 3206,
     3207, 1492, 3209, 3214, 3212, 3217, 3220, 3221, 3232, 3233,

     3247, 3253, 3235, 3255, 3249, 3265, 3271, 3275, 3279, 3263,
     3284, 3275, 3291, 3205, 3238, 3251, 3261, 3274, 1486, 3271,
     1465, 3270, 3286, 3285, 3293, 3313, 3306, 1464, 3334, 3301,
     3302, 3309, 1454, 3329, 3342, 3341, 3351, 1450, 3358, 3318,
     3322, 1427, 3346, 3337, 1354, 3352, 3397, 3350, 1353, 1301,
     3348, 3352, 1247, 3365, 3356, 3356, 3359, 1186, 1182, 3369,
     3368, 1131, 3366, 1100, 3401, 1084, 3394, 3360, 1047, 3389,
     3402, 1012, 3420, 3424, 3430, 3404, 3435, 3415, 3439, 3441,
     3445, 3449, 3453, 1011, 3454, 3458, 3463, 3403, 3415,  993,
     3430, 3439, 3450, 3443, 3461, 3462,  982, 3467, 3457, 3522,

     3503, 3488, 3500, 3506, 3526, 3527, 3519, 3534,  961,  960,
     3461,  953, 3487, 3548, 3487,  943, 3538,  916, 3503,  910,
      898, 3511, 3515,  849, 3520, 3522,  844, 3555, 3560, 3553,
     3552, 3569, 3563, 3558,  824, 3564, 3584, 3588, 3592, 3583,
     3568, 3598, 3586, 3602,  824,  801, 3565,  771, 3580, 3578,
      756,  731, 3597, 3612,  720, 3604, 3638, 3606, 3613,  714,
     3642, 3590,  677, 3661, 3602, 3665,  666,  641, 3593,  631,
     3630,  611,  604, 3635, 3627,  600, 3669, 3671,  593, 3673,
     3677, 3662, 3668, 3686, 3670,  576, 3691, 3653,  569, 3669,
     3692, 3683, 3699, 3700,  549, 3687, 3704, 3717,  536, 3677,

      493, 3675,  488, 3681,  470, 3722, 3715, 3730, 3708, 3742,
     3746, 3737, 3740, 3736,  379, 3701, 3756,  374, 3757, 3761,
     3751, 3767, 3735,  345, 3726, 3752,  344, 3771,  204, 3785,
     3762, 3796, 3760, 3806, 3810, 3790, 3759,  195, 3769, 3822,
     3770,  185, 3831, 3770, 3835, 3815,  167,  120,  112, 3848,
     3841,   98,   82,   78, 3856, 3860, 3870, 3874, 3878, 3962,
     3883, 3886, 3894, 3902, 3910, 3918, 3922, 3930
    } ;

static const flex_int16_t yy_def[1269] =
    {   0,
     1260,    1, 1261, 1261, 1261, 1261, 1260,    7, 1260,    9,
        9,   11,   11,   11, 1260,   15, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1260, 1260, 1263, 1260, 1260, 1260, 1263, 1260, 1260,
     1260, 1260, 1260, 1264, 1264, 1260, 1260, 1260, 1264, 1260,
     1265, 1265,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1266, 1260, 1267,   19,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1260, 1260, 1260,
     1260, 1263, 1260, 1263, 1260, 1260, 1260, 1260, 1264,   55,
     1260, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1260, 1264,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62, 1260,   74, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1266, 1267,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1262, 1260, 1260, 1260, 1260, 1260, 1260, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1268, 1262, 1262, 1262, 1262, 1262,

     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1260, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1268, 1262, 1262,
     1262, 1262, 1260, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1260, 1260, 1260, 1262, 1260, 1262, 1262,
     1262, 1262, 1262, 1262, 1260, 1262, 1262, 1262, 1262, 1262,
     1262, 1260, 1262, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
     1262, 1262, 1260, 1262, 1262, 1260, 1262, 1262, 1262, 1262,
     1262, 1262, 1262, 1260, 1262, 1262, 1260, 1260, 1260, 1262,
     1260, 1262, 1262, 1262, 1262, 1262, 1262, 1260, 1262, 1262,
     1262, 1260, 1262, 1260, 1260, 1262, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264,   62, 1260,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1262, 1262, 1260, 1262, 1262, 1260,
     1260, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1260, 1262,
     1262, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262, 1262,
     1262, 1262, 1262, 1260, 1260, 1262, 1262, 1260, 1262, 1260,

     1260, 1262, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264,   62, 1260,   62,
       62,   62,   62,   62,   62,   62, 1260,   62,   62,   62,
       62,   62,   62, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1262,
     1260, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,

     1260, 1262, 1260, 1260, 1262, 1260, 1262, 1260, 1260, 1260,
     1260, 1262, 1260, 1260, 1262, 1260, 1260, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264,   62, 1260,   62,   62,   62,   62,   62,   62, 1260,
     1260, 1260,   62, 1260, 1260,   62, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
     1262, 1262, 1262, 1262, 1262, 1262, 1260, 1260, 1260, 1262,

     1260, 1260, 1262, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
     1260, 1260, 1260, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264,   62,   62,   62,   62,   62, 1260,   62, 1260,
     1260, 1260, 1260, 1260, 1260,   62, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1262, 1262, 1260, 1262, 1262,
     1262, 1262, 1260, 1260, 1260, 1262, 1260, 1262, 1260, 1260,
     1260, 1260, 1260, 1262, 1260, 1260, 1260, 1264, 1264, 1264,
     1264, 1264, 1264, 1264,   62,   62, 1260,   62,   62, 1260,

       62, 1260, 1260, 1260, 1260, 1260,   62, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1262, 1260, 1260, 1262, 1262, 1260, 1260, 1260, 1260, 1262,
     1262, 1260, 1260, 1260, 1260, 1264, 1264, 1264, 1264, 1264,
     1264, 1260,   62, 1260, 1260,   62, 1260,   62, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1260,
     1260, 1262, 1260, 1260, 1262, 1262, 1260, 1264, 1264, 1264,
     1260,   62, 1260, 1260, 1260,   62, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1260,
     1260, 1262, 1260, 1260, 1264, 1264, 1260, 1260, 1260, 1260,
       62, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262, 1260,
     1262, 1260, 1264, 1260, 1260,   62, 1260, 1260, 1260, 1260,
     1260, 1262, 1260, 1264, 1260,   62, 1260, 1260, 1260, 1260,
     1260, 1264, 1260, 1260, 1260, 1260, 1260, 1260, 1260,    0,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260
    } ;

static const flex_int16_t yy_nxt[4029] =
    {   0,
       18,   19,   20,   21,   19,   22,   22,   23,   18,   22,
       22,   24,   18,   22,   25,   26,   27,   28,   29,   30,
       31,   27,   27,   32,   27,   33,   34,   35,   36,   27,
       37,   38,   39,   40,   27,   27,   41,   27,   27,   42,
       18,   26,   27,   28,   29,   30,   31,   27,   27,   32,
       27,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       27,   27,   41,   27,   27,   43,   45,   46,   21,   47,
       48,   48,  127,  125,   48,   48,  125,  141,   48,   25,
       73,   91,   75,   73,   73,   91,   75,   73,  121,  122,
      121,  121, 1256,   73,  123,  123, 1257,   73,  123,  123,

      127,  104,  123,  141,   49,   45,   46,   21,   47,   48,
       48,  127, 1253,   48,   48,  138,  127,   48,   25,  101,
      101,  101,  101,  127,  131,  129, 1254,  182,  130,  136,
      182,  127,  104,  127, 1250,  132,  134,  210,  133,  137,
      135,  138,  142,   49,   50,   51,   52,   53,   48,   48,
      131,  129,   48,   48,  130,  136,   48,   53,  127,  127,
      127,  132,  134,  210,  133,  137,  135,  237,  142,  237,
      237,  139,  140,  127,  143,  145,  147,  214,  144,  211,
      146, 1253,   53,   50,   51,   52,   53,   48,   48,  127,
      212,   48,   48,  213,  148,   48,   53,  139,  140, 1251,

      143,  145,  147,  214,  144,  211,  146,  164,  164, 1248,
      125,  164,  164,  125,  125,  164,  212,  125, 1241,  213,
      148,   53,   54,   55,   56,   57,   55,   54,   54,   54,
       54,   54,   54,   58,   54,   59,   60,   61,   61,   62,
       63,   64,   61,   61,   61,   65,   61,   66,   61,   67,
       61,   61,   68,   69,   70,   71,   61,   61,   61,   61,
       61,   72,   54,   61,   61,   62,   63,   64,   61,   61,
       61,   65,   61,   66,   61,   67,   61,   61,   68,   69,
       70,   71,   61,   61,   61,   61,   61,   54,   73,   74,
       73,   75,   74,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   76,   73,   77,   78,   79,   73,   73,
       73,   80,   73,   81,   82,   83,   73,   73,   84,   85,
       86,   87,   73,   73,   73,   73,   73,   73,   73,   76,
       73,   77,   78,   79,   73,   73,   73,   80,   73,   81,
       82,   83,   73,   73,   84,   85,   86,   87,   73,   73,
       73,   73,   73,   73,   88,   88,   89,   88, 1232, 1228,
      127,  153,  127,  157,  215,  154,  219,   90,   73,  155,
       73,   73,   73,  220,  216,  223,   73,  156,   73,   73,
       73,  217,  218,   73,   73,   73,   73,  153, 1234,  157,
      215,  154,  219, 1218,   73,  155,   73,   73,   73,  220,

      216,  223,   73,  156,   73,   73,   73,  217,  218,   73,
       73,   73,   73,   92,   93,   94,   95,   93,   96,   92,
       92,   96,   97,   92,   98,   96,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   96,  100,
      101,  101,  100,  158, 1227,  102,  224,  241,  125,  103,
      159,  125,  104,  105,  247,  106,  107,  108,  109,  248,

      249,  110, 1210,  111,  112,  113,  114, 1224,  115,  116,
      117,  118,  224,  241,  119,  101,  101,  101,  101,  105,
      247,  106,  107,  108,  109,  248,  249,  110,  104,  111,
      112,  113,  114,  127,  115,  116,  117,  118,  149,  182,
      119,  160,  182,  120,  101,  163,  101,  101,  150,  250,
     1218,  184,  151,  152,  266,  188,  646,  104,  101,  101,
      101,  101,  184, 1220,  149,  184,  251,  165,  166,  166,
      165,  104,  221,  184,  150,  250,  222,  184,  151,  152,
      167,  188,  229, 1195,  184,  256,  230,  184,  184,  184,
     1213,  184,  251,  191,  236,  189,  237,  236,  221,  184,

      184,  257,  222,  184,  103,  168,  170, 1207,  229,  170,
      184,  256,  230,  184, 1187,  184,  171,  264, 1184,  191,
      184,  189,  172,  173,  174, 1203,  184,  257,  175,  184,
      176,  184,  177,  190,  184,  178,  179,  180,  181,  231,
      231,  231,  231,  264,  238, 1181,  184,  238,  172,  173,
      174,  238,  232,  311,  175, 1178,  176,  184,  177,  190,
      184,  178,  179,  180,  181,  169,  169,  127, 1167,  169,
      169,  169,  169,  169,  169,  169,  184,  169,  169,  311,
      192,  184,  184,  254,  225,  275,  194,  184,  255,  242,
      184, 1195,  184,  184,  226,  184,  184,  193,  227,  228,

      243,  312,  184,  244,  238,  169,  192,  184,  184,  254,
      225,  275,  194,  184,  255,  242,  184,  127,  184,  184,
      226,  184,  184,  193,  227,  228,  243,  312, 1197,  244,
      169,  169,  169,  276, 1194,  169,  169,  169,  169,  169,
      169,  169,  184,  169,  169, 1191,  185,  245,  127,  127,
      197,  246,  267,  184,  252,  268,  184,  186,  253,  276,
      187,  231,  231,  231,  231,  266,  182,  657,  184,  182,
     1160,  169,  185,  245,  232,  127,  197,  246,  267,  184,
      252,  268,  184,  186,  253, 1155,  187,  234,  234,  234,
      234,  101,  101,  101,  101,  258,  169,  184,  260,  281,

      235,  195,  261,  127,  104,  127,  262,  297,  184,  313,
      259,  184,  127,  270,  263, 1152,  196,  121,  122,  121,
      121,  258,  269,  184,  260,  281, 1145,  195,  261,  266,
      104,  658,  262,  297,  184,  313,  259,  184, 1183,  270,
      263,  127,  196,  199,  782,  271,  199,  782,  269,  121,
      122,  121,  121,  265,  265,  265,  265,  272, 1176,  200,
      201,  202,  104, 1173,  127,  203,  266,  204,  659,  205,
      273,  271,  206,  207,  208,  209,  123,  123,  127,  277,
      123,  123,  274,  272,  123,  200,  201,  202,  127,  127,
      279,  203,  127,  204,  127,  205,  273,  127,  206,  207,

      208,  209,  127,  278,  127,  277,  127,  314,  274,  127,
      280,  282, 1170,  284,  127,  283,  279,  127,  288,  287,
      292,  285,  127,  286, 1132,  127,  298,  127,  293,  278,
     1168,  127,  300,  314,  127,  289,  280,  282,  127,  284,
      295,  283,  294,  290,  288,  287,  292,  285,  127,  286,
      291,  296,  298,  299,  293,  164,  164, 1160,  300,  164,
      164,  289,  315,  164,  316,  301,  295, 1155,  294,  290,
      305,  305,  305,  305, 1152, 1161,  291,  296,  308,  299,
      101,  163,  101,  101,  165,  166,  166,  165,  315,  309,
      316,  301,  310,  104,  317,  318, 1154,  167,  166,  166,

      166,  166,  320,  184,  308,  184,  214, 1097,  216,  218,
      319,  167,  219,  322,  184,  309,  184,  184,  310,  184,
      317,  318,  168,  321,  184, 1143, 1136,  184,  320,  184,
      223,  184,  214,  184,  216,  218,  319,  224,  219,  322,
      184,  184,  184,  184,  184,  184,  325,  184,  323,  321,
      184,  184,  184,  184,  225,  184,  223,  184,  324,  184,
      184, 1133,  184,  224,  266,  184,  661,  184,  326,  228,
      184,  184,  325,  184,  323,  338,  184,  184,  184,  222,
      225,  184,  184,  184,  324,  184,  184,  184,  184,  328,
      184,  184,  184,  184,  326,  228,  330,  184, 1130,  327,

      329,  338,  184,  184,  331,  222,  184,  184,  184,  184,
      184,  184,  332,  184, 1128,  328,  184,  211,  184,  184,
      184,  184,  330,  184,  184,  327,  329,  335,  212,  184,
      331,  337,  184,  184,  340,  184,  184,  266,  332,  668,
      339,  341,  342,  211,  230, 1080,  184,  184,  345,  184,
      184,  184,  333,  335,  212,  346,  347,  337,  348,  343,
      340,  349,  184,  334,  350,  184,  339,  341,  342,  351,
      230,  344,  352,  353,  345,  354,  357,  184,  333,  358,
      359,  346,  347,  362,  348,  343,  355,  349,  184,  334,
      350,  184,  360,  363,  356,  351, 1075,  344,  352,  353,

     1074,  354,  357,  361,  851,  358,  359,  851,  237,  362,
      237,  237,  355,  231,  231,  231,  231,  366,  360,  363,
      356,  234,  234,  234,  234,  236,  232,  237,  236,  361,
      238,  367,  368,  238,  235,  103,  369,  238,  371,  373,
      374,  375,  376,  366,  377,  378,  379,  380,  370,  381,
      372,  382,  383,  266,  387,  675,  390,  367,  368,  391,
      392, 1120,  369,  393,  371,  373,  374,  375,  376,  394,
      377,  378,  379,  380,  370,  381,  372,  382,  383,  384,
      387,  388,  390,  127,  127,  391,  392,  385,  127,  393,
      238,  396,  389,  398,  386,  394,  265,  265,  265,  265,

      127,  127,  127,  127,  397,  384,  400,  388,  127,  127,
      127,  402,  403,  385,  127, 1065,  405,  396,  389,  398,
      386,  399,  127,  406,  401,  404,  127,  127,  127,  127,
      397,  127,  400,  407,  408,  127,  127,  402,  403,  411,
      127,  127,  405,  413,  414,  409,  415,  399,  412,  406,
      401,  404,  127,  410,  416,  127,  127,  419,  127,  407,
      408,  417,  127,  127,  418,  411,  127, 1117, 1114,  413,
      414,  409,  415,  127,  412,  266,  127,  767,  420,  410,
      416,  421,  422,  419,  424,  127,  127,  417,  423,  425,
      418,  427,  127,  127,  127,  432,  433,  426,  434,  429,

      305,  305,  305,  305,  420,  428,  430,  421,  422,  435,
      424,  436,  437,  438,  423,  425,  439,  427,  440,  441,
      443,  432,  433,  426,  434,  429,  446,  442,  266,  444,
      779,  428,  430,  770,  771,  435,  770,  436,  437,  438,
      445, 1097,  439,  184,  440,  441,  443,  447,  184,  184,
      463,  464,  446,  442,  184,  444,  184,  184,  450,  184,
      184,  465,  184,  184, 1109,  448,  445,  184, 1104,  184,
      184,  466,  449,  447,  184,  184,  463,  464, 1100, 1033,
      184,  184,  184,  184,  450,  184,  184,  465,  184,  184,
      184,  448,  184,  184,  184,  184,  184,  466,  449,  452,

     1028,  184,  451,  184,  184,  184, 1068,  184,  184,  467,
      454,  266,  184,  798,  184,  453,  184,  184,  184, 1013,
      184,  184,  266,  184,  800,  452,  184,  184,  451,  184,
      184,  184,  455,  457,  184,  467,  454,  184,  184,  184,
      184,  453,  468,  184,  184,  456, 1064,  184,  184,  184,
      184,  184,  184,  184, 1011,  184,  469,  458,  455,  457,
     1008,  891,  470,  184,  891,  184,  184,  471,  468,  184,
      184,  456,  459,  184,  184,  184,  184,  184,  462,  184,
      184,  184,  469,  458,  472,  473,  184,  460,  470,  184,
      344,  461,  184,  471,  184,  184,  474,  475,  459,  476,

      477,  184,  478,  479,  462,  480,  184,  481,  482,  483,
      472,  473,  184,  460,  484,  184,  344,  461,  485,  486,
      184,  487,  474,  475,  488,  476,  477,  489,  478,  479,
      490,  480,  491,  481,  482,  483,  492,  493,  494,  495,
      484,  496,  497,  498,  485,  486,  499,  487,  500,  501,
      488,  502,  503,  489,  504,  505,  490,  506,  491,  507,
      508,  509,  492,  493,  494,  495,  510,  496,  497,  498,
      511,  512,  499,  513,  500,  501,  514,  502,  503,  515,
      504,  505,  516,  506,  517,  507,  508,  509,  127,  127,
      127,  127,  510,  127,  127,  127,  511,  512,  127,  513,

      521,  127,  514,  519,  520,  515,  529,  522,  516,  525,
      517,  524,  127,  528,  527,  127, 1007,  127,  526,  127,
      531,  127,  532,  127,  127,  540,  521, 1006,  127,  519,
      520,  530,  529,  522,  533,  525,  127,  524,  537,  528,
      527,  539,  127,  127,  526,  541,  531,  127,  532,  127,
      127,  540,  544,  127,  127,  547,  553,  530,  127,  548,
      533,  542,  554,  555,  537,  127,  543,  539,  546,  127,
      549,  541,  550,  556,  551,  557,  558,  559,  544,  560,
      561,  547,  553,  562,  563,  548,  564,  542,  554,  555,
      565,  566,  543,  567,  546,  568,  549,  584,  550,  556,

      551,  557,  558,  559,  901,  560,  561,  901, 1062,  562,
      563,  585,  564,  184,  184,  184,  565,  566,  586,  567,
      569,  568,  184,  584,  184,  184,  184,  184,  184,  184,
      570,  572, 1004,  184,  571,  587,  184,  585, 1001,  184,
      184,  184,  588,  266,  586,  888,  569,  266,  184,  904,
      184,  184,  184,  184,  184,  184,  570,  572,  184,  184,
      571,  587,  184,  574,  184,  184,  589,  591,  588,  184,
     1059,  577,  184,  573,  184,  184,  184,  184,  575,  576,
     1058, 1050,  184,  592,  184,  184,  266,  593,  911,  574,
      184,  184,  589,  591, 1049,  184,  184,  577,  184,  573,

      184,  184,  184,  184,  575,  576,  184,  184,  184,  592,
      184,  184,  578,  593,  184,  184,  582,  184,  581,  594,
      184,  595,  184,  580,  579,  184,  184,  184,  184,  184,
      184, 1033,  184,  184,  596, 1028,  184,  597,  578,  600,
      184,  184,  582,  184,  581,  594,  184,  595,  601,  580,
      579,  184,  184,  184,  184,  184,  184,  184,  602,  603,
      596,  583,  604,  597,  606,  600,  607,  608,  184,  609,
      610,  184,  611,  612,  601,  613,  615,  616,  617,  618,
      619,  620,  621,  184,  602,  603,  622,  583,  604,  625,
      606,  627,  607,  608,  184,  609,  610,  184,  611,  612,

      628,  613,  615,  616,  617,  618,  619,  620,  621,  629,
      630,  631,  622,  632,  633,  625,  634,  627,  635,  636,
      637,  639,  127,  127,  127,  127,  628,  641,  127,  266,
      643, 1001,  127,  647,  648,  629,  630,  631,  642,  632,
      633,  640,  634,  644,  635,  636,  637,  639,  127,  645,
      650,  127,  127,  641,  127,  127,  127,  649,  127,  647,
      648,  127,  660,  652,  642,  127,  127,  640,  655,  644,
      651,  653,  656,  677,  127,  645,  650,  127,  662,  664,
      666,  127,  665,  649,  663,  127,  127,  127,  660,  652,
      670,  127,  127,  669,  655,  676,  651,  653,  656,  677,

      667,  678,  679,  680,  662,  664,  666,  681,  665,  671,
      663,  682,  683,  684,  685,  673,  670,  686,  687,  669,
      688,  676,  689,  690,  691,  711,  667,  678,  679,  680,
     1045,  184,  712,  681,  713,  671,  717,  682,  683,  684,
      685,  673,  184,  686,  687,  692,  688, 1037,  689,  690,
      691,  711,  184,  184, 1035,  718,  696,  184,  712,  266,
      713, 1004,  717,  184,  698, 1034,  184,  184,  184,  184,
      719,  692,  693,  184,  266,  720, 1006,  697,  184,  184,
      184,  718,  696,  184,  184,  694,  184,  184,  722,  184,
      698,  695,  184,  184,  184,  184,  719,  184,  723,  184,

      184,  720,  700,  697, 1032,  184,  184,  699,  184,  184,
      184,  694,  184,  184,  722, 1030,  184,  695,  184,  701,
      184,  726,  782,  184,  723,  782,  184,  184,  700,  184,
      184,  184,  184,  699,  184,  184,  702,  184,  727,  703,
      728,  704,  184,  184,  184,  701,  184,  726,  184,  184,
      729,  184,  730,  184,  184,  184,  184,  705,  184,  947,
      945,  184,  702,  184,  727,  703,  728,  704,  184,  184,
      706,  944,  184,  184,  184,  184,  729,  184,  730,  184,
      184,  942,  184,  705,  184,  708,  184,  184,  693,  707,
      732,  733,  734,  735,  184,  736,  706,  184,  737,  184,

      184,  714,  940,  742,  743,  184,  744,  715,  184,  738,
      184,  745,  184,  184,  746,  707,  732,  733,  734,  735,
      747,  736,  739,  184,  737,  748,  184,  714,  740,  742,
      743,  749,  744,  715,  751,  752,  753,  745,  754,  755,
      746,  756,  757,  758,  759,  761,  747,  763,  739,  127,
      266,  748, 1007,  127,  740,  127,  127,  749,  768,  127,
      751,  752,  753,  765,  754,  755,  127,  756,  757,  758,
      759,  761,  766,  763,  127,  772,  769,  127,  127,  127,
      127,  127,  780, 1012,  768,  773,  777,  776,  127,  765,
      774, 1005,  781,  784,  785,  775,  784,  916,  766,  778,

      916,  772,  769,  783,  783,  783,  783,  999,  780,  127,
      127,  773,  777,  776,  788,  789,  774,  127,  781,  127,
      790,  775,  127,  791,  127,  778,  787,  787,  787,  787,
      794,  794,  794,  794,  127,  127,  793,  127,  127,  803,
      788,  789,  792,  806,  802,  807,  790,  693,  808,  791,
      809,  810,  811,  796,  799,  801,  801,  801,  801,  797,
      804,  812,  793,  813,  814,  803,  805,  815,  792,  806,
      802,  807,  816,  817,  808,  998,  809,  810,  811,  796,
      799,  266,  997, 1008,  837,  797,  804,  812,  839,  813,
      814,  184,  805,  815,  989,  184,  840,  184,  816,  817,

      841,  820,  184,  844,  184,  184,  184,  818,  184,  184,
      837,  184,  987,  822,  839,  184,  933,  184,  184,  933,
      821,  184,  840,  184,  985,  983,  841,  820,  184,  844,
      184,  184,  184,  818,  184,  184,  184,  184,  184,  822,
      845,  184,  824,  184,  184,  825,  821,  184,  846,  184,
      184,  823,  184,  847,  184,  849,  184,  184,  850,  826,
      842,  843,  184,  842,  184,  982,  845,  184,  824,  184,
      184,  825,  981,  184,  846,  184,  184,  823,  184,  847,
      184,  849,  184,  184,  850,  826,  827,  184,  184,  184,
      854,  829,  828,  184,  184,  855,  184,  830,  184,  184,

      184,  184,  184,  184,  979,  184,  852,  853,  184,  852,
      856,  904,  857,  184,  184,  184,  854,  829,  828,  184,
      184,  855,  977,  830,  184,  184,  184,  184,  184,  184,
      184,  184,  831,  184,  184,  184,  856,  184,  857,  858,
      858,  858,  858,  860,  861,  184,  184,  862,  184,  184,
      863,  184,  864,  832,  865,  866,  184,  868,  831,  184,
      833,  184,  869,  184,  867,  771,  870,  867,  871,  860,
      861,  872,  184,  862,  184,  184,  863,  184,  864,  832,
      865,  866,  873,  868,  874,  875,  833,  878,  869,  879,
      876,  785,  870,  876,  871,  880,  881,  872,  882,  883,

      884,  885,  886,  887,  127,  127,  770,  771,  873,  770,
      874,  875,  127,  878,  890,  879,  266,  127, 1011,  918,
      127,  880,  881,  889,  882,  883,  884,  885,  886,  887,
      127,  892,  127,  127,  127,  893,  896,  127,  898,  127,
      890,  894,  127,  895,  900,  918,  897,  902,  919,  889,
      899,  783,  783,  783,  783,  784,  785,  892,  784,  127,
      947,  893,  896,  905,  898,  127,  127,  894,  948,  895,
      900,  948,  897,  902,  919,  912,  899,  787,  787,  787,
      787,  920,  921,  922,  907,  794,  794,  794,  794,  905,
      914,  914,  914,  914,  127,  801,  801,  801,  801,  915,

      923,  912,  924,  925,  926,  927,  928,  920,  921,  922,
      907,  929,  930,  931,  949,  843,  963,  949,  950,  853,
      266,  950, 1013,  951,  960,  915,  923,  960,  924,  925,
      926,  927,  928,  184,  184,  953,  954,  929,  930,  931,
      955,  932,  184,  184,  184,  184,  935,  184,  184,  951,
      936,  945,  934,  184,  184,  944,  184,  184,  956,  184,
      184,  953,  954,  266,  957, 1065,  955,  932,  184,  184,
      184,  184,  935,  184,  184,  184,  936,  184,  934,  184,
      184,  184,  184,  184,  956,  939,  184,  942,  184,  184,
      957,  184,  184,  937,  938,  184,  853,  940,  940,  184,

      958,  184,  843,  184,  959,  842,  843,  184,  842,  952,
      184,  939,  184,  184,  184,  184,  941,  184,  184,  937,
      938,  184,  942,  184,  184,  184,  958,  961,  944,  184,
      959,  962,  945,  184,  184,  184,  184,  184,  184,  184,
      184,  827,  943,  184,  184,  851,  917,  184,  851,  184,
      184,  852,  853,  961,  852,  184,  964,  962,  965,  184,
      184,  184,  913,  184,  184,  966,  184,  184,  943,  184,
      184,  947,  184,  184,  967,  946,  968,  969,  184,  970,
      971,  184,  964,  184,  965,  972,  184,  858,  858,  858,
      858,  966,  973,  184,  867,  771,  974,  867,  184,  975,

      967,  946,  968,  969,  184,  970,  971,  184,  976,  184,
      978,  972,  184,  876,  785,  980,  876,  984,  973,  986,
      988,  127,  974,  988,  891,  975,  990,  891,  127,  127,
      127,  127,  127,  992,  976,  127,  978,  991,  910,  995,
      127,  980,  909,  984,  127,  986,  993,  994,  901,  127,
      996,  901,  990, 1000, 1002,  916, 1003, 1002,  916,  992,
      908, 1014, 1015,  991, 1010,  995, 1009, 1009, 1009, 1009,
     1016, 1017,  993,  994, 1018, 1019,  996, 1020, 1021, 1000,
     1022,  906, 1003,  914,  914,  914,  914, 1014, 1015,  933,
     1010,  184,  933,  785,  903, 1023, 1016, 1017, 1038, 1040,

     1018, 1019,  184, 1020, 1021,  184, 1022, 1031,  184,  184,
     1031,  948,  771, 1025,  948, 1024,  184,  184,  184,  184,
      184, 1023,  184,  184, 1038, 1040, 1027,  184,  184,  184,
     1026,  184,  184, 1039,  184,  184, 1039,  949,  843, 1025,
      949, 1024,  184,  800,  184,  184,  184,  798,  184,  184,
     1028,  184, 1027,  184, 1041,  184, 1026,  184,  184,  184,
     1033,  184,  184,  950,  853,  184,  950, 1042,  184, 1029,
      184,  184,  184, 1036, 1043,  184, 1044,  184,  960, 1046,
     1041,  960,  877,  184, 1048,  184, 1051,  184,  184, 1052,
     1053,  184, 1054, 1042,  184, 1029,  184,  184,  184, 1036,

     1043,  184, 1044, 1055, 1056, 1046, 1047, 1047, 1047, 1047,
     1048, 1057, 1051, 1060, 1061, 1052, 1053, 1063, 1054,  988,
      127,  127,  988,  127, 1088,  767,  127, 1069,  127, 1055,
     1056,  127,  266,  266, 1073, 1074, 1067, 1057, 1066, 1060,
     1061, 1071, 1070, 1063,  266, 1072, 1075,  127, 1077,  127,
     1088, 1077, 1076, 1069, 1002,  859, 1079, 1002, 1078, 1079,
     1089,  266, 1067, 1080, 1066,  827, 1081, 1071, 1070, 1081,
     1090, 1072, 1082, 1082, 1082, 1082, 1083,  127, 1076, 1083,
     1009, 1009, 1009, 1009, 1078, 1085, 1089,  266, 1085, 1086,
     1091, 1084, 1087, 1087, 1087, 1087, 1090, 1092, 1093, 1094,

      184,  184, 1102, 1031,  848, 1102, 1031, 1097,  184,  838,
     1103,  184,  184, 1103, 1096,  184, 1091, 1084, 1095,  184,
      836,  184,  184, 1092, 1093, 1094,  184,  184,  184,  835,
     1105, 1098,  184, 1105,  184, 1099,  834,  184,  184,  184,
     1096,  184,  184, 1106, 1095,  184, 1106,  184,  184,  184,
     1110, 1111, 1108, 1101,  184, 1108,  184, 1098,  184, 1039,
      184, 1099, 1039,  184, 1112,  184, 1113,  184,  184, 1107,
      184, 1115,  266,  819, 1132,  184, 1110, 1111, 1116, 1101,
     1118, 1119,  184, 1121, 1122, 1123,  184, 1124, 1125,  184,
     1112, 1126, 1113,  184, 1127, 1107,  184, 1115, 1047, 1047,

     1047, 1047, 1129,  127, 1116, 1129, 1118, 1119,  127, 1121,
     1122, 1123, 1131, 1124, 1125, 1134,  127, 1126,  127,  708,
     1127, 1137, 1137, 1137, 1137, 1138, 1138, 1138, 1138,  127,
     1135, 1139, 1139, 1139, 1139, 1146, 1077, 1140, 1131, 1077,
     1079, 1134, 1142, 1079, 1147, 1142, 1081, 1141, 1148, 1081,
     1082, 1082, 1082, 1082, 1083, 1085, 1135, 1083, 1085, 1144,
     1145, 1146, 1144, 1140, 1087, 1087, 1087, 1087, 1149, 1150,
     1147, 1151,  184, 1141, 1148, 1152,  184,  184,  795, 1162,
     1153, 1155,  184,  184,  786, 1156,  184,  184,  184, 1102,
      184,  184, 1102,  184, 1149, 1150,  184, 1151,  184,  764,

      675, 1103,  184,  184, 1103, 1162, 1153, 1159,  184,  184,
     1159, 1156,  184,  184,  184, 1163,  184,  184,  184,  184,
     1165, 1169,  184, 1157, 1157, 1157, 1157, 1105, 1106,  184,
     1105, 1106,  184, 1160,  184, 1108, 1158, 1171, 1108, 1166,
     1167, 1163, 1166, 1172,  184,  184, 1165, 1169,  184, 1164,
     1164, 1164, 1164, 1174, 1175,  184, 1177, 1145,  184, 1177,
      184, 1129, 1158, 1171, 1129,  266,  127, 1178,  762, 1172,
     1180,  184,  127, 1180,  184,  266,  266, 1181, 1184, 1174,
     1175, 1182,  127, 1188, 1179, 1137, 1137, 1137, 1137, 1138,
     1138, 1138, 1138, 1139, 1139, 1139, 1139,  127,  266, 1142,

     1187, 1186, 1142, 1144, 1145, 1185, 1144, 1182, 1189, 1188,
     1179, 1190,  184, 1193, 1159,  760, 1193, 1159, 1195,  184,
      661,  184, 1199,  184, 1200, 1201,  184, 1186, 1196, 1192,
      184, 1185,  184,  184, 1189,  184,  750, 1190,  184, 1157,
     1157, 1157, 1157, 1198, 1167,  184, 1198,  184, 1199,  184,
     1200, 1201,  184, 1202, 1196, 1192,  184, 1204,  184,  184,
     1205,  184, 1164, 1164, 1164, 1164, 1166, 1167,  658, 1166,
     1177, 1145, 1206, 1177, 1180, 1206,  127, 1180, 1208, 1202,
      266, 1208, 1210, 1204,  127, 1215, 1205, 1211, 1211, 1211,
     1211, 1216, 1214, 1217, 1209, 1214, 1217, 1218,  184, 1212,

     1193, 1219,  184, 1193, 1219, 1222, 1223, 1225, 1222,  184,
     1226, 1215,  184,  184,  741,  708, 1221, 1216, 1198, 1167,
     1209, 1198,  127, 1206,  184, 1212, 1206,  266,  184, 1228,
     1233, 1208, 1223, 1225, 1208,  184, 1226, 1214,  184,  184,
     1214, 1229, 1221, 1230, 1230, 1230, 1230, 1211, 1211, 1211,
     1211,  127,  266, 1237, 1232, 1231, 1233, 1217, 1219, 1238,
     1217, 1219, 1235, 1235, 1235, 1235,  184, 1229, 1222, 1236,
     1239, 1222, 1240, 1240, 1240, 1240,  127,  184, 1244, 1237,
      184, 1231,  266,  731, 1250, 1238, 1230, 1230, 1230, 1230,
      725, 1247,  184,  724, 1242, 1236, 1239, 1243, 1243, 1243,

     1243, 1249, 1252,  184, 1244,  184,  184, 1245, 1245, 1245,
     1245, 1235, 1235, 1235, 1235,  721,  184, 1247,  716,  184,
     1242,  710, 1246, 1240, 1240, 1240, 1240, 1249, 1252, 1253,
      184,  184, 1243, 1243, 1243, 1243, 1245, 1245, 1245, 1245,
      709,  184,  184,  674,  184,  184,  672,  654, 1246, 1255,
     1255, 1255, 1255,  266,  638, 1256,  184, 1255, 1255, 1255,
     1255, 1258, 1258, 1258, 1258,  626,  624,  184,  623,  614,
      184, 1259, 1259, 1259, 1259, 1258, 1258, 1258, 1258, 1259,
     1259, 1259, 1259,   44,   44,   44,   44,   44,   44,   44,
       44,   44,  128,  128,  162,  605,  599,  162,  162,  162,

      598,  162,  169,  169,  590,  169,  552,  169,  545,  169,
      184,  184,  538,  184,  536,  184,  535,  184,  239,  239,
      239,  534,  239,  239,  239,  239,  239,  240,  523,  240,
      518,  431,  395,  518,  365,  518,  364,  518,  518,  233,
      336,  183,  307,  306,  304,  303,  302,  127,  266,  161,
      126,  124,  233,  198,  183,  159,  161,  127,  126,  124,
     1260,   17, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260
    } ;

static const flex_int16_t yy_chk[4029] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,   33,   24,    3,    3,   24,   33,    3,    3,
       13,   13,   13,   13,   14,   14,   14,   14,   20,   20,
       20,   20, 1254,   13,   22,   22, 1253,   14,   22,   22,

       31,   20,   22,   33,    3,    4,    4,    4,    4,    4,
        4,   26, 1252,    4,    4,   31,   30,    4,    4,   21,
       21,   21,   21,   28,   28,   26, 1249,   58,   26,   30,
       58,   29,   21,   34, 1248,   28,   29,   76,   28,   30,
       29,   31,   34,    4,    5,    5,    5,    5,    5,    5,
       28,   26,    5,    5,   26,   30,    5,    5,   32,   37,
       36,   28,   29,   76,   28,   30,   29,   95,   34,   95,
       95,   32,   32,   35,   35,   36,   37,   78,   35,   77,
       36, 1247,    5,    6,    6,    6,    6,    6,    6,   38,
       77,    6,    6,   77,   38,    6,    6,   32,   32, 1242,

       35,   36,   37,   78,   35,   77,   36,   48,   48, 1238,
       98,   48,   48,   98,  103,   48,   77,  103, 1229,   77,
       38,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11, 1227, 1224,
       40,   40,   41,   41,   79,   40,   81,   11,   11,   40,
       11,   11,   11,   82,   79,   84,   11,   40,   11,   11,
       11,   80,   80,   11,   11,   11,   11,   40, 1218,   41,
       79,   40,   81, 1215,   11,   40,   11,   11,   11,   82,

       79,   84,   11,   40,   11,   11,   11,   80,   80,   11,
       11,   11,   11,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       19,   19,   19,   42, 1205,   19,   85,  105,  125,   19,
       42,  125,   19,   19,  108,   19,   19,   19,   19,  109,

      110,   19, 1203,   19,   19,   19,   19, 1201,   19,   19,
       19,   19,   85,  105,   19,   45,   45,   45,   45,   19,
      108,   19,   19,   19,   19,  109,  110,   19,   45,   19,
       19,   19,   19,   39,   19,   19,   19,   19,   39,  171,
       19,   42,  171,   19,   46,   46,   46,   46,   39,  111,
     1199,   63,   39,   39,  523,   63,  523,   46,   47,   47,
       47,   47,   63, 1195,   39,   63,  112,   51,   51,   51,
       51,   47,   83,   64,   39,  111,   83,   63,   39,   39,
       51,   63,   87, 1189,   64,  115,   87,   64,   63,   66,
     1186,   63,  112,   66,   93,   64,   93,   93,   83,   64,

       66,  116,   83,   66,   93,   51,   55, 1179,   87,   55,
       64,  115,   87,   64, 1176,   66,   55,  119, 1173,   66,
       65,   64,   55,   55,   55, 1172,   66,  116,   55,   66,
       55,   65,   55,   65,   65,   55,   55,   55,   55,   88,
       88,   88,   88,  119,   96, 1170,   65,   96,   55,   55,
       55,   96,   88,  173,   55, 1168,   55,   65,   55,   65,
       65,   55,   55,   55,   55,   61,   61,  135, 1167,   61,
       61,   61,   61,   61,   61,   61,   67,   61,   61,  173,
       67,   68,   69,  114,   86,  135,   69,   67,  114,  106,
       67, 1163,   68,   69,   86,   68,   69,   68,   86,   86,

      106,  174,   67,  106,   96,   61,   67,   68,   69,  114,
       86,  135,   69,   67,  114,  106,   67,  136,   68,   69,
       86,   68,   69,   68,   86,   86,  106,  174, 1160,  106,
       61,   62,   62,  136, 1155,   62,   62,   62,   62,   62,
       62,   62,   71,   62,   62, 1152,   62,  107,  130,  129,
       71,  107,  129,   71,  113,  130,   71,   62,  113,  136,
       62,   89,   89,   89,   89,  534,  182,  534,   71,  182,
     1151,   62,   62,  107,   89,  141,   71,  107,  129,   71,
      113,  130,   71,   62,  113, 1148,   62,   91,   91,   91,
       91,  101,  101,  101,  101,  117,   62,   70,  118,  141,

       91,   70,  118,  131,  101,  153,  118,  153,   70,  175,
      117,   70,  132,  132,  118, 1146,   70,  121,  121,  121,
      121,  117,  131,   70,  118,  141, 1145,   70,  118,  535,
      121,  535,  118,  153,   70,  175,  117,   70, 1135,  132,
      118,  133,   70,   74,  657,  133,   74,  657,  131,  122,
      122,  122,  122,  124,  124,  124,  124,  133, 1127,   74,
       74,   74,  122, 1124,  134,   74,  536,   74,  536,   74,
      134,  133,   74,   74,   74,   74,  123,  123,  137,  137,
      123,  123,  134,  133,  123,   74,   74,   74,  138,  139,
      139,   74,  140,   74,  143,   74,  134,  142,   74,   74,

       74,   74,  144,  138,  145,  137,  146,  176,  134,  147,
      140,  142, 1121,  143,  154,  142,  139,  149,  147,  146,
      149,  144,  150,  145, 1120,  151,  154,  156,  150,  138,
     1118,  148,  156,  176,  155,  148,  140,  142,  152,  143,
      152,  142,  151,  148,  147,  146,  149,  144,  157,  145,
      148,  152,  154,  155,  150,  164,  164, 1116,  156,  164,
      164,  148,  177,  164,  178,  157,  152, 1112,  151,  148,
      161,  161,  161,  161, 1110, 1109,  148,  152,  172,  155,
      163,  163,  163,  163,  165,  165,  165,  165,  177,  172,
      178,  157,  172,  163,  179,  180, 1097,  165,  166,  166,

      166,  166,  181,  184,  172,  185,  201, 1090,  202,  203,
      180,  166,  204,  186,  184,  172,  185,  184,  172,  185,
      179,  180,  165,  185,  186, 1084, 1072,  186,  181,  184,
      206,  185,  201,  187,  202,  203,  180,  207,  204,  186,
      184,  188,  185,  184,  187,  185,  189,  187,  187,  185,
      186,  190,  188,  186,  208,  188,  206,  189,  188,  187,
      189, 1069,  190,  207,  538,  190,  538,  188,  190,  208,
      187,  192,  189,  187,  187,  205,  191,  190,  188,  205,
      208,  188,  192,  189,  188,  192,  189,  191,  190,  192,
      191,  190,  193,  194,  190,  208,  194,  192, 1066,  191,

      193,  205,  191,  193,  194,  205,  193,  194,  192,  197,
      195,  192,  195,  191, 1064,  192,  191,  200,  193,  194,
      197,  195,  194,  197,  195,  191,  193,  197,  200,  193,
      194,  200,  193,  194,  210,  197,  195,  545,  195,  545,
      209,  211,  212,  200,  209, 1062,  197,  195,  214,  197,
      195,  196,  196,  197,  200,  215,  216,  200,  217,  213,
      210,  218,  196,  196,  219,  196,  209,  211,  212,  220,
      209,  213,  221,  222,  214,  223,  225,  196,  196,  226,
      227,  215,  216,  229,  217,  213,  224,  218,  196,  196,
      219,  196,  228,  230,  224,  220, 1059,  213,  221,  222,

     1058,  223,  225,  228,  724,  226,  227,  724,  237,  229,
      237,  237,  224,  231,  231,  231,  231,  241,  228,  230,
      224,  234,  234,  234,  234,  236,  231,  236,  236,  228,
      238,  242,  243,  238,  234,  236,  244,  238,  245,  246,
      247,  248,  249,  241,  250,  251,  252,  253,  244,  254,
      245,  255,  256,  552,  258,  552,  260,  242,  243,  261,
      262, 1053,  244,  263,  245,  246,  247,  248,  249,  264,
      250,  251,  252,  253,  244,  254,  245,  255,  256,  257,
      258,  259,  260,  267,  268,  261,  262,  257,  269,  263,
      238,  267,  259,  269,  257,  264,  265,  265,  265,  265,

      272,  271,  273,  270,  268,  257,  271,  259,  276,  274,
      277,  273,  274,  257,  278, 1050,  276,  267,  259,  269,
      257,  270,  275,  277,  272,  275,  280,  279,  282,  283,
      268,  281,  271,  278,  279,  284,  285,  273,  274,  282,
      288,  286,  276,  284,  285,  280,  286,  270,  283,  277,
      272,  275,  287,  281,  287,  289,  290,  290,  291,  278,
      279,  288,  292,  293,  289,  282,  295, 1049, 1045,  284,
      285,  280,  286,  294,  283,  643,  296,  643,  291,  281,
      287,  292,  293,  290,  295,  297,  298,  288,  294,  296,
      289,  298,  301,  299,  300,  308,  309,  297,  310,  300,

      305,  305,  305,  305,  291,  299,  301,  292,  293,  311,
      295,  312,  313,  314,  294,  296,  315,  298,  316,  317,
      318,  308,  309,  297,  310,  300,  320,  317,  654,  319,
      654,  299,  301,  646,  646,  311,  646,  312,  313,  314,
      319, 1042,  315,  321,  316,  317,  318,  321,  322,  323,
      338,  339,  320,  317,  321,  319,  324,  321,  324,  322,
      323,  340,  322,  323, 1038,  322,  319,  324, 1033,  321,
      324,  341,  323,  321,  322,  323,  338,  339, 1028, 1021,
      321,  326,  324,  321,  324,  322,  323,  340,  322,  323,
      325,  322,  326,  324,  327,  326,  324,  341,  323,  326,

     1019,  325,  325,  328,  325,  327,  992,  326,  327,  342,
      328,  672,  329,  672,  328,  327,  325,  328,  326,  987,
      327,  326,  674,  329,  674,  326,  329,  325,  325,  328,
      325,  327,  329,  331,  327,  342,  328,  330,  329,  332,
      328,  327,  343,  328,  331,  330,  986,  331,  330,  329,
      332,  330,  329,  332,  985,  333,  344,  332,  329,  331,
      983,  767,  345,  330,  767,  332,  333,  346,  343,  333,
      331,  330,  333,  331,  330,  334,  332,  330,  337,  332,
      335,  333,  344,  332,  347,  348,  334,  334,  345,  334,
      337,  335,  333,  346,  335,  333,  349,  350,  333,  351,

      352,  334,  353,  354,  337,  355,  335,  356,  357,  358,
      347,  348,  334,  334,  359,  334,  337,  335,  360,  361,
      335,  362,  349,  350,  363,  351,  352,  366,  353,  354,
      367,  355,  368,  356,  357,  358,  369,  370,  371,  372,
      359,  373,  374,  375,  360,  361,  376,  362,  377,  378,
      363,  379,  380,  366,  381,  382,  367,  383,  368,  384,
      385,  386,  369,  370,  371,  372,  387,  373,  374,  375,
      388,  389,  376,  390,  377,  378,  391,  379,  380,  392,
      381,  382,  393,  383,  394,  384,  385,  386,  396,  399,
      406,  397,  387,  398,  404,  402,  388,  389,  401,  390,

      398,  403,  391,  396,  397,  392,  406,  399,  393,  402,
      394,  401,  405,  405,  404,  408,  982,  407,  403,  410,
      408,  409,  409,  414,  417,  417,  398,  981,  418,  396,
      397,  407,  406,  399,  410,  402,  416,  401,  414,  405,
      404,  416,  419,  421,  403,  418,  408,  430,  409,  420,
      424,  417,  421,  427,  423,  424,  430,  407,  425,  425,
      410,  419,  432,  433,  414,  426,  420,  416,  423,  428,
      426,  418,  427,  434,  428,  435,  436,  437,  421,  438,
      439,  424,  430,  440,  441,  425,  442,  419,  432,  433,
      443,  444,  420,  445,  423,  446,  426,  462,  427,  434,

      428,  435,  436,  437,  779,  438,  439,  779,  980,  440,
      441,  463,  442,  448,  447,  450,  443,  444,  464,  445,
      447,  446,  449,  462,  448,  447,  450,  448,  447,  450,
      448,  450,  979,  449,  449,  465,  449,  463,  977,  448,
      447,  450,  466,  764,  464,  764,  447,  786,  449,  786,
      448,  447,  450,  448,  447,  450,  448,  450,  451,  449,
      449,  465,  449,  452,  453,  454,  467,  469,  466,  451,
      975,  455,  451,  451,  452,  453,  454,  452,  453,  454,
      974,  966,  455,  470,  451,  455,  795,  471,  795,  452,
      453,  454,  467,  469,  965,  451,  456,  455,  451,  451,

      452,  453,  454,  452,  453,  454,  457,  456,  455,  470,
      456,  455,  456,  471,  459,  458,  460,  457,  459,  472,
      457,  473,  456,  458,  457,  459,  458,  460,  459,  458,
      460,  962,  457,  456,  474,  959,  456,  475,  456,  478,
      459,  458,  460,  457,  459,  472,  457,  473,  479,  458,
      457,  459,  458,  460,  459,  458,  460,  461,  480,  481,
      474,  461,  482,  475,  484,  478,  485,  486,  461,  487,
      488,  461,  489,  490,  479,  491,  493,  494,  495,  496,
      497,  498,  499,  461,  480,  481,  500,  461,  482,  503,
      484,  505,  485,  486,  461,  487,  488,  461,  489,  490,

      506,  491,  493,  494,  495,  496,  497,  498,  499,  507,
      508,  509,  500,  510,  511,  503,  512,  505,  513,  514,
      515,  517,  520,  521,  519,  525,  506,  520,  524,  903,
      522,  903,  527,  524,  525,  507,  508,  509,  521,  510,
      511,  519,  512,  522,  513,  514,  515,  517,  526,  522,
      527,  529,  528,  520,  532,  533,  530,  526,  537,  524,
      525,  539,  537,  529,  521,  540,  543,  519,  532,  522,
      528,  530,  533,  554,  541,  522,  527,  542,  539,  541,
      543,  553,  542,  526,  540,  544,  546,  547,  537,  529,
      547,  550,  548,  546,  532,  553,  528,  530,  533,  554,

      544,  555,  556,  557,  539,  541,  543,  558,  542,  548,
      540,  559,  560,  561,  562,  550,  547,  563,  564,  546,
      565,  553,  566,  567,  568,  586,  544,  555,  556,  557,
      958,  569,  587,  558,  588,  548,  591,  559,  560,  561,
      562,  550,  569,  563,  564,  569,  565,  947,  566,  567,
      568,  586,  571,  573,  945,  592,  571,  569,  587,  906,
      588,  906,  591,  571,  573,  944,  571,  573,  569,  572,
      593,  569,  570,  570,  908,  594,  908,  572,  571,  573,
      572,  592,  571,  572,  570,  570,  575,  570,  596,  571,
      573,  570,  571,  573,  574,  572,  593,  575,  597,  570,

      575,  594,  575,  572,  942,  574,  572,  574,  574,  572,
      570,  570,  575,  570,  596,  940,  576,  570,  577,  576,
      574,  600,  782,  575,  597,  782,  575,  576,  575,  577,
      576,  574,  577,  574,  574,  578,  577,  579,  601,  578,
      602,  579,  576,  580,  577,  576,  578,  600,  579,  578,
      603,  579,  604,  576,  580,  577,  576,  580,  577,  931,
      929,  578,  577,  579,  601,  578,  602,  579,  581,  580,
      581,  928,  578,  582,  579,  578,  603,  579,  604,  581,
      580,  926,  581,  580,  582,  583,  583,  582,  589,  582,
      606,  607,  608,  609,  581,  611,  581,  583,  612,  582,

      583,  589,  925,  615,  616,  581,  617,  589,  581,  613,
      582,  618,  583,  582,  619,  582,  606,  607,  608,  609,
      620,  611,  613,  583,  612,  621,  583,  589,  613,  615,
      616,  622,  617,  589,  625,  627,  628,  618,  629,  630,
      619,  631,  632,  633,  634,  636,  620,  639,  613,  641,
      909,  621,  909,  644,  613,  642,  647,  622,  644,  645,
      625,  627,  628,  641,  629,  630,  648,  631,  632,  633,
      634,  636,  642,  639,  649,  647,  645,  650,  651,  655,
      653,  652,  655,  915,  644,  648,  652,  651,  656,  641,
      649,  907,  656,  659,  659,  650,  659,  800,  642,  653,

      800,  647,  645,  658,  658,  658,  658,  900,  655,  662,
      663,  648,  652,  651,  662,  663,  649,  664,  656,  665,
      664,  650,  667,  665,  666,  653,  661,  661,  661,  661,
      668,  668,  668,  668,  670,  671,  667,  676,  673,  677,
      662,  663,  666,  679,  676,  680,  664,  678,  681,  665,
      682,  683,  684,  670,  673,  675,  675,  675,  675,  671,
      678,  685,  667,  686,  687,  677,  678,  688,  666,  679,
      676,  680,  689,  690,  681,  899,  682,  683,  684,  670,
      673,  910,  898,  910,  711,  671,  678,  685,  713,  686,
      687,  692,  678,  688,  889,  696,  714,  694,  689,  690,

      715,  694,  692,  717,  695,  692,  696,  692,  694,  696,
      711,  694,  887,  696,  713,  695,  819,  692,  695,  819,
      695,  696,  714,  694,  885,  883,  715,  694,  692,  717,
      695,  692,  696,  692,  694,  696,  697,  694,  698,  696,
      718,  695,  698,  699,  695,  699,  695,  697,  719,  698,
      697,  697,  698,  720,  699,  722,  700,  699,  723,  700,
      716,  716,  697,  716,  698,  882,  718,  700,  698,  699,
      700,  699,  881,  697,  719,  698,  697,  697,  698,  720,
      699,  722,  700,  699,  723,  700,  701,  701,  702,  703,
      727,  703,  702,  700,  704,  728,  700,  704,  701,  702,

      703,  701,  702,  703,  879,  704,  725,  725,  704,  725,
      729,  877,  730,  701,  702,  703,  727,  703,  702,  705,
      704,  728,  875,  704,  701,  702,  703,  701,  702,  703,
      705,  704,  705,  705,  704,  706,  729,  707,  730,  731,
      731,  731,  731,  733,  734,  705,  706,  735,  707,  706,
      736,  707,  737,  706,  739,  740,  705,  742,  705,  705,
      707,  706,  743,  707,  741,  741,  744,  741,  745,  733,
      734,  746,  706,  735,  707,  706,  736,  707,  737,  706,
      739,  740,  747,  742,  748,  749,  707,  752,  743,  753,
      750,  750,  744,  750,  745,  754,  755,  746,  756,  757,

      758,  759,  761,  763,  765,  766,  770,  770,  747,  770,
      748,  749,  768,  752,  766,  753,  913,  774,  913,  803,
      776,  754,  755,  765,  756,  757,  758,  759,  761,  763,
      769,  768,  777,  772,  773,  769,  774,  775,  776,  778,
      766,  772,  780,  773,  778,  803,  775,  780,  804,  765,
      777,  783,  783,  783,  783,  784,  784,  768,  784,  788,
      861,  769,  774,  788,  776,  790,  796,  772,  834,  773,
      778,  834,  775,  780,  804,  796,  777,  787,  787,  787,
      787,  805,  806,  807,  790,  794,  794,  794,  794,  788,
      798,  798,  798,  798,  799,  801,  801,  801,  801,  799,

      808,  796,  809,  810,  812,  813,  814,  805,  806,  807,
      790,  815,  816,  817,  835,  835,  859,  835,  836,  836,
      917,  836,  917,  837,  848,  799,  808,  848,  809,  810,
      812,  813,  814,  818,  820,  839,  840,  815,  816,  817,
      841,  818,  821,  822,  818,  820,  821,  818,  820,  837,
      822,  857,  820,  821,  822,  856,  821,  822,  844,  818,
      820,  839,  840,  989,  845,  989,  841,  818,  821,  822,
      818,  820,  821,  818,  820,  823,  822,  824,  820,  821,
      822,  825,  821,  822,  844,  825,  823,  854,  824,  823,
      845,  824,  825,  823,  824,  825,  853,  850,  826,  826,

      846,  823,  843,  824,  847,  842,  842,  825,  842,  838,
      826,  825,  823,  826,  824,  823,  827,  824,  825,  823,
      824,  825,  828,  828,  829,  826,  846,  849,  830,  830,
      847,  855,  831,  831,  828,  829,  826,  828,  829,  826,
      830,  811,  829,  830,  831,  851,  802,  831,  851,  828,
      829,  852,  852,  849,  852,  830,  860,  855,  862,  831,
      828,  829,  797,  828,  829,  863,  830,  832,  829,  830,
      831,  833,  833,  831,  864,  832,  865,  866,  832,  868,
      869,  832,  860,  833,  862,  870,  833,  858,  858,  858,
      858,  863,  871,  832,  867,  867,  872,  867,  833,  873,

      864,  832,  865,  866,  832,  868,  869,  832,  874,  833,
      878,  870,  833,  876,  876,  880,  876,  884,  871,  886,
      888,  890,  872,  888,  891,  873,  890,  891,  893,  892,
      896,  894,  895,  893,  874,  897,  878,  892,  793,  896,
      902,  880,  792,  884,  905,  886,  894,  895,  901,  912,
      897,  901,  890,  902,  904,  916,  905,  904,  916,  893,
      791,  918,  919,  892,  912,  896,  911,  911,  911,  911,
      920,  921,  894,  895,  922,  923,  897,  924,  927,  902,
      930,  789,  905,  914,  914,  914,  914,  918,  919,  933,
      912,  932,  933,  785,  781,  932,  920,  921,  951,  953,

      922,  923,  932,  924,  927,  932,  930,  941,  934,  935,
      941,  948,  771,  935,  948,  934,  936,  932,  937,  934,
      935,  932,  934,  935,  951,  953,  937,  936,  932,  937,
      936,  932,  937,  952,  934,  935,  952,  949,  949,  935,
      949,  934,  936,  762,  937,  934,  935,  760,  934,  935,
      938,  938,  937,  936,  954,  937,  936,  939,  937,  946,
      943,  943,  938,  950,  950,  938,  950,  955,  939,  939,
      946,  939,  943,  946,  956,  943,  957,  938,  960,  961,
      954,  960,  751,  939,  964,  946,  967,  943,  938,  968,
      969,  938,  970,  955,  939,  939,  946,  939,  943,  946,

      956,  943,  957,  971,  972,  961,  963,  963,  963,  963,
      964,  973,  967,  976,  978,  968,  969,  984,  970,  988,
      990,  991,  988,  993, 1014,  738,  995,  993,  994,  971,
      972,  996,  997,  998,  997,  998,  991,  973,  990,  976,
      978,  995,  994,  984,  999,  996,  999, 1000, 1001, 1003,
     1014, 1001, 1000,  993, 1002,  732, 1004, 1002, 1003, 1004,
     1015, 1005,  991, 1005,  990,  726, 1006,  995,  994, 1006,
     1016,  996, 1007, 1007, 1007, 1007, 1008, 1010, 1000, 1008,
     1009, 1009, 1009, 1009, 1003, 1011, 1015, 1012, 1011, 1012,
     1017, 1010, 1013, 1013, 1013, 1013, 1016, 1018, 1020, 1022,

     1024, 1023, 1030, 1031,  721, 1030, 1031, 1025, 1025,  712,
     1032, 1024, 1023, 1032, 1024, 1023, 1017, 1010, 1023, 1025,
      710, 1027, 1025, 1018, 1020, 1022, 1024, 1023, 1026,  709,
     1034, 1026, 1027, 1034, 1025, 1027,  708, 1024, 1023, 1026,
     1024, 1023, 1026, 1035, 1023, 1025, 1035, 1027, 1025, 1029,
     1040, 1041, 1037, 1029, 1026, 1037, 1036, 1026, 1027, 1039,
     1029, 1027, 1039, 1029, 1043, 1026, 1044, 1036, 1026, 1036,
     1036, 1046, 1068,  693, 1068, 1029, 1040, 1041, 1048, 1029,
     1051, 1052, 1036, 1054, 1055, 1056, 1029, 1057, 1060, 1029,
     1043, 1061, 1044, 1036, 1063, 1036, 1036, 1046, 1047, 1047,

     1047, 1047, 1065, 1070, 1048, 1065, 1051, 1052, 1067, 1054,
     1055, 1056, 1067, 1057, 1060, 1070, 1071, 1061, 1076,  691,
     1063, 1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1078,
     1071, 1075, 1075, 1075, 1075, 1088, 1077, 1076, 1067, 1077,
     1079, 1070, 1080, 1079, 1089, 1080, 1081, 1078, 1091, 1081,
     1082, 1082, 1082, 1082, 1083, 1085, 1071, 1083, 1085, 1086,
     1086, 1088, 1086, 1076, 1087, 1087, 1087, 1087, 1092, 1093,
     1089, 1094, 1099, 1078, 1091, 1095, 1095, 1096,  669, 1111,
     1096, 1098, 1098, 1099,  660, 1099, 1099, 1095, 1096, 1102,
     1095, 1096, 1102, 1098, 1092, 1093, 1098, 1094, 1099,  640,

      638, 1103, 1095, 1096, 1103, 1111, 1096, 1104, 1098, 1099,
     1104, 1099, 1099, 1095, 1096, 1113, 1095, 1096, 1101, 1098,
     1115, 1119, 1098, 1100, 1100, 1100, 1100, 1105, 1106, 1101,
     1105, 1106, 1101, 1107, 1107, 1108, 1101, 1122, 1108, 1117,
     1117, 1113, 1117, 1123, 1101, 1107, 1115, 1119, 1107, 1114,
     1114, 1114, 1114, 1125, 1126, 1101, 1128, 1128, 1101, 1128,
     1107, 1129, 1101, 1122, 1129, 1130, 1131, 1130,  637, 1123,
     1132, 1107, 1134, 1132, 1107, 1133, 1136, 1133, 1136, 1125,
     1126, 1134, 1141, 1147, 1131, 1137, 1137, 1137, 1137, 1138,
     1138, 1138, 1138, 1139, 1139, 1139, 1139, 1140, 1143, 1142,

     1143, 1141, 1142, 1144, 1144, 1140, 1144, 1134, 1149, 1147,
     1131, 1150, 1153, 1154, 1159,  635, 1154, 1159, 1156, 1156,
      626, 1158, 1162, 1153, 1165, 1169, 1153, 1141, 1158, 1153,
     1156, 1140, 1158, 1156, 1149, 1158,  624, 1150, 1153, 1157,
     1157, 1157, 1157, 1161, 1161, 1156, 1161, 1158, 1162, 1153,
     1165, 1169, 1153, 1171, 1158, 1153, 1156, 1174, 1158, 1156,
     1175, 1158, 1164, 1164, 1164, 1164, 1166, 1166,  623, 1166,
     1177, 1177, 1178, 1177, 1180, 1178, 1182, 1180, 1181, 1171,
     1183, 1181, 1183, 1174, 1185, 1188, 1175, 1184, 1184, 1184,
     1184, 1190, 1187, 1191, 1182, 1187, 1191, 1192, 1192, 1185,

     1193, 1194, 1196, 1193, 1194, 1197, 1200, 1202, 1197, 1192,
     1204, 1188, 1192, 1196,  614,  610, 1196, 1190, 1198, 1198,
     1182, 1198, 1209, 1206, 1192, 1185, 1206, 1207, 1196, 1207,
     1216, 1208, 1200, 1202, 1208, 1192, 1204, 1214, 1192, 1196,
     1214, 1209, 1196, 1210, 1210, 1210, 1210, 1211, 1211, 1211,
     1211, 1212, 1213, 1223, 1213, 1212, 1216, 1217, 1219, 1225,
     1217, 1219, 1220, 1220, 1220, 1220, 1221, 1209, 1222, 1221,
     1226, 1222, 1228, 1228, 1228, 1228, 1231, 1221, 1233, 1223,
     1221, 1212, 1241,  605, 1241, 1225, 1230, 1230, 1230, 1230,
      599, 1237, 1221,  598, 1231, 1221, 1226, 1232, 1232, 1232,

     1232, 1239, 1244, 1221, 1233, 1236, 1221, 1234, 1234, 1234,
     1234, 1235, 1235, 1235, 1235,  595, 1236, 1237,  590, 1236,
     1231,  585, 1236, 1240, 1240, 1240, 1240, 1239, 1244, 1246,
     1246, 1236, 1243, 1243, 1243, 1243, 1245, 1245, 1245, 1245,
      584, 1246, 1236,  551, 1246, 1236,  549,  531, 1236, 1250,
     1250, 1250, 1250, 1251,  516, 1251, 1246, 1255, 1255, 1255,
     1255, 1256, 1256, 1256, 1256,  504,  502, 1246,  501,  492,
     1246, 1257, 1257, 1257, 1257, 1258, 1258, 1258, 1258, 1259,
     1259, 1259, 1259, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1261, 1262, 1262, 1263,  483,  477, 1263, 1263, 1263,

      476, 1263, 1264, 1264,  468, 1264,  429, 1264,  422, 1264,
     1265, 1265,  415, 1265,  413, 1265,  412, 1265, 1266, 1266,
     1266,  411, 1266, 1266, 1266, 1266, 1266, 1267,  400, 1267,
     1268,  307,  266, 1268,  239, 1268,  235, 1268, 1268,  232,
      198,  183,  168,  167,  160,  159,  158,  128,  127,  120,
      104,  102,   90,   72,   59,   49,   43,   27,   25,   23,
       17, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[108] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 
    0, 1, 1, 1, 1, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "SCDoc.l"
#line 2 "SCDoc.l"
/************************************************************************
*
* Copyright 2012 Jonatan Liljedahl <lijon@kymatica.com>
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
************************************************************************/

#include <string.h>
#include "SCDoc.h"
#include "SCDoc.tab.hpp"

int scdoc_start_token = 0;
//int colnum;
//#define YY_USER_ACTION { scdoclloc.first_column = colnum; colnum=colnum+yyleng; scdoclloc.last_column=colnum; if(scdoclloc.first_line!=yylineno) colnum=1; scdoclloc.first_line = scdoclloc.last_line = yylineno;}

static int method_caller;

#line 2066 "lex.scdoc.cpp"
#define YY_NO_UNISTD_H 1

#line 2069 "lex.scdoc.cpp"

#define INITIAL 0
#define verbatim 1
#define verbatim2 2
#define metadata 3
#define eat 4
#define eat2 5
#define eat3 6
#define method 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 45 "SCDoc.l"




#line 50 "SCDoc.l"
if (scdoc_start_token) {
    int t = scdoc_start_token;
    scdoc_start_token = 0;
//    colnum = 1;
    if(t==START_METADATA) BEGIN(eat);
    return t;
}



#line 2309 "lex.scdoc.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1261 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1260 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 60 "SCDoc.l"
return CLASS;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 61 "SCDoc.l"
return TITLE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 62 "SCDoc.l"
return SUMMARY;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 63 "SCDoc.l"
return RELATED;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "SCDoc.l"
return CATEGORIES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "SCDoc.l"
return REDIRECT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "SCDoc.l"
return CLASSTREE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "SCDoc.l"
return KEYWORD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 70 "SCDoc.l"
return PRIVATE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 71 "SCDoc.l"
return SECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 72 "SCDoc.l"
return SUBSECTION;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "SCDoc.l"
return COPYMETHOD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 75 "SCDoc.l"
return ARGUMENT;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 77 "SCDoc.l"
return DESCRIPTION;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 78 "SCDoc.l"
return CLASSMETHODS;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 79 "SCDoc.l"
return INSTANCEMETHODS;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 80 "SCDoc.l"
return EXAMPLES;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 82 "SCDoc.l"
return RETURNS;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 83 "SCDoc.l"
return DISCUSSION;
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 85 "SCDoc.l"
return LIST;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 86 "SCDoc.l"
return TREE;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 87 "SCDoc.l"
return NUMBEREDLIST;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 88 "SCDoc.l"
return DEFINITIONLIST;
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 89 "SCDoc.l"
return TABLE;
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 90 "SCDoc.l"
return FOOTNOTE;
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 91 "SCDoc.l"
return WARNING;
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 92 "SCDoc.l"
return NOTE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "SCDoc.l"
BEGIN(verbatim); return LINK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "SCDoc.l"
BEGIN(verbatim); return ANCHOR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "SCDoc.l"
BEGIN(verbatim); return IMAGE;
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 97 "SCDoc.l"
BEGIN(verbatim); return SOFT;
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 98 "SCDoc.l"
BEGIN(verbatim); return STRONG;
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 99 "SCDoc.l"
BEGIN(verbatim); return EMPHASIS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 100 "SCDoc.l"
BEGIN(verbatim); return CODE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 101 "SCDoc.l"
BEGIN(verbatim); return TELETYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 102 "SCDoc.l"
BEGIN(verbatim); return MATH;
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 104 "SCDoc.l"
BEGIN(verbatim2); return CODEBLOCK;
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 105 "SCDoc.l"
BEGIN(verbatim2); return TELETYPEBLOCK;
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 106 "SCDoc.l"
BEGIN(verbatim2); return MATHBLOCK;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 108 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 109 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 110 "SCDoc.l"
scdoclval.str = strdup("\n::"); return TEXT;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 111 "SCDoc.l"
return BARS;
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 112 "SCDoc.l"
return HASHES;
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 114 "SCDoc.l"
scdoclval.str = strdup("\n"); return TEXT;
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 115 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 116 "SCDoc.l"
return NEWLINE;
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 117 "SCDoc.l"
return EMPTYLINES;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 121 "SCDoc.l"
scdoclval.str = strdup("||"); return TEXT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 122 "SCDoc.l"
scdoclval.str = strdup("##"); return TEXT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "SCDoc.l"
scdoclval.str = strdup("    "); return TEXT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "SCDoc.l"
/* eat this */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 129 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return URL;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODNAME;
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 131 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODARGS;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "SCDoc.l"
/* eat this */
	YY_BREAK
case 61:
/* rule 61 can match eol */
YY_RULE_SETUP
#line 133 "SCDoc.l"
BEGIN(method_caller); return NEWLINE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 134 "SCDoc.l"
return BAD_METHODNAME;
	YY_BREAK
case 63:
#line 137 "SCDoc.l"
case 64:
#line 138 "SCDoc.l"
case 65:
#line 139 "SCDoc.l"
case 66:
#line 140 "SCDoc.l"
case 67:
YY_RULE_SETUP
#line 140 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 142 "SCDoc.l"
BEGIN(metadata); return CLASS;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 143 "SCDoc.l"
BEGIN(metadata); return TITLE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 144 "SCDoc.l"
BEGIN(metadata); return SUMMARY;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 145 "SCDoc.l"
BEGIN(metadata); return RELATED;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 146 "SCDoc.l"
BEGIN(metadata); return CATEGORIES;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 147 "SCDoc.l"
BEGIN(metadata); return REDIRECT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 148 "SCDoc.l"
BEGIN(metadata); return CLASSTREE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 149 "SCDoc.l"
BEGIN(metadata); return KEYWORD;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 150 "SCDoc.l"
BEGIN(metadata); return PRIVATE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 151 "SCDoc.l"
BEGIN(metadata); return SECTION;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 152 "SCDoc.l"
BEGIN(metadata); return SUBSECTION;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 153 "SCDoc.l"
BEGIN(metadata); return COPYMETHOD;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 154 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 155 "SCDoc.l"
BEGIN(eat); return DESCRIPTION;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 156 "SCDoc.l"
BEGIN(eat); return CLASSMETHODS;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 157 "SCDoc.l"
BEGIN(eat); return INSTANCEMETHODS;
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 158 "SCDoc.l"
BEGIN(eat); return EXAMPLES;
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
#line 159 "SCDoc.l"
BEGIN(eat); return NEWLINE;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 160 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 87:
#line 162 "SCDoc.l"
case 88:
#line 163 "SCDoc.l"
case 89:
#line 164 "SCDoc.l"
case 90:
YY_RULE_SETUP
#line 164 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 165 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 166 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 167 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 168 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 169 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 170 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 171 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 172 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 173 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 174 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 175 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 176 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 177 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 178 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 179 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 180 "SCDoc.l"
/* empty */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 181 "SCDoc.l"
ECHO;
	YY_BREAK
#line 2931 "lex.scdoc.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(verbatim):
case YY_STATE_EOF(verbatim2):
case YY_STATE_EOF(metadata):
case YY_STATE_EOF(eat):
case YY_STATE_EOF(eat2):
case YY_STATE_EOF(eat3):
case YY_STATE_EOF(method):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1261 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1261 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1260);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 181 "SCDoc.l"

