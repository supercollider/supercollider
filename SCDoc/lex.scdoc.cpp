#line 2 "lex.scdoc.cpp"

#line 4 "lex.scdoc.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scdoc_create_buffer
#define yy_delete_buffer scdoc_delete_buffer
#define yy_flex_debug scdoc_flex_debug
#define yy_init_buffer scdoc_init_buffer
#define yy_flush_buffer scdoc_flush_buffer
#define yy_load_buffer_state scdoc_load_buffer_state
#define yy_switch_to_buffer scdoc_switch_to_buffer
#define yyin scdocin
#define yyleng scdocleng
#define yylex scdoclex
#define yylineno scdoclineno
#define yyout scdocout
#define yyrestart scdocrestart
#define yytext scdoctext
#define yywrap scdocwrap
#define yyalloc scdocalloc
#define yyrealloc scdocrealloc
#define yyfree scdocfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scdocrestart(scdocin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t scdocleng;

extern FILE *scdocin, *scdocout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE scdoclex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-scdoclineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < scdocleng; ++yyl )\
                    if ( scdoctext[yyl] == '\n' )\
                        --scdoclineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scdoctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scdocrestart()), so that the user can continue scanning by
	 * just pointing scdocin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scdoctext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t scdocleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scdocwrap()'s to do buffer switches
 * instead of setting up a fresh scdocin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scdocrestart (FILE *input_file  );
void scdoc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scdoc_create_buffer (FILE *file,int size  );
void scdoc_delete_buffer (YY_BUFFER_STATE b  );
void scdoc_flush_buffer (YY_BUFFER_STATE b  );
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scdocpop_buffer_state (void );

static void scdocensure_buffer_stack (void );
static void scdoc_load_buffer_state (void );
static void scdoc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scdoc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scdoc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scdoc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scdoc_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *scdocalloc (yy_size_t  );
void *scdocrealloc (void *,yy_size_t  );
void scdocfree (void *  );

#define yy_new_buffer scdoc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scdocwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scdocin = (FILE *) 0, *scdocout = (FILE *) 0;

typedef int yy_state_type;

extern int scdoclineno;

int scdoclineno = 1;

extern char *scdoctext;
#define yytext_ptr scdoctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scdoctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scdocleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1235] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  104,   64,   53,   46,
       54,   62,   64,   48,   65,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   65,   64,   63,   52,   45,   65,   62,   65,   52,
       44,   54,   65,   87,   87,   83,   54,   84,   86,   88,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   88,  102,  102,   54,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,   54,  102,
      102,   60,   58,   59,   54,   56,   60,   48,   56,   53,

        0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   47,   62,   43,   48,   39,    0,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,    0,    0,    0,   42,
       63,   45,   62,    0,    0,    0,    0,   87,   87,   84,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       84,   86,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      100,    0,    0,   58,   58,   56,    0,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   43,    0,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   50,   51,   49,

       42,   40,    0,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   89,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  101,   57,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   41,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,   55,   61,   61,   61,
       61,    0,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,    0,    0,   61,    0,   61,   61,   61,   61,
       61,   61,    0,   61,   61,   61,   61,   61,   61,    0,
       61,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   61,   61,   61,    0,   61,   61,
       35,   61,   61,   61,   61,   61,   61,   61,    0,   61,
       61,   29,   21,   61,   28,   61,   61,   61,   61,   61,
       61,   32,   61,   61,   61,    0,   61,    0,   22,   61,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   85,    0,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,    0,    0,    0,    0,    0,    0,    0,   96,    0,

        0,    0,    0,    0,    0,    0,   90,    0,    0,    0,
        0,    0,   93,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   61,   61,    1,   61,   61,
       35,   37,   61,   61,   61,   61,   61,   61,   61,   31,
       61,   61,   29,   21,    0,   28,   61,   61,   61,   61,
       61,   61,   32,    0,   61,   61,   25,   61,    2,   22,
       61,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   85,   66,   85,   85,

       85,   85,   85,   85,   85,    0,   85,   85,   85,   85,
       85,   85,   67,    0,    0,    0,    0,    0,    0,   96,
       98,    0,    0,    0,    0,   92,    0,    0,   90,    0,
        0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   30,   61,   61,    1,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   31,   61,    0,   13,   61,
        0,   61,    0,    0,    0,   33,   61,    0,   25,   61,
        2,    0,   87,   87,   87,   87,   87,   87,   87,   87,

       87,   87,   87,   87,   87,   87,   85,   66,   85,   85,
       85,   85,   85,   85,    0,   78,    0,   85,    0,    0,
       85,    0,   67,    0,    0,   91,    0,    0,    0,    0,
        0,    0,    0,   92,    0,    0,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   30,    0,   61,   61,   61,   61,   61,   61,   61,
        0,    0,    0,   61,    8,   13,   61,    9,    0,    4,
       19,   10,   33,   61,    3,    0,   27,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   85,   85,   85,   85,

       85,    0,   85,   73,   78,   74,    0,   69,   75,   85,
       68,    0,   91,    0,    0,    0,    0,    0,    0,    0,
       94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   14,   61,
       61,    0,   61,   61,   61,   61,   34,   18,   26,   61,
        8,   61,    9,    6,    4,   19,   10,   61,    3,   36,
       27,   87,   87,   87,   87,   87,   87,   87,   85,   85,
        0,   85,   85,   82,   85,   73,   74,   71,   69,   75,
       85,   68,    0,    0,    0,    0,    0,   95,    0,    0,
       97,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   14,    0,   61,    7,    0,   61,   61,    0,
       34,   18,   26,   61,   61,    6,    0,   36,   38,   87,
       87,   87,   87,   87,   87,    0,   85,   72,    0,   85,
       82,   85,   71,    0,    0,    0,    0,   95,    0,   97,
       99,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,   61,    7,   12,   61,    0,   20,   61,   61,
       11,   87,   87,   87,   70,   85,   72,   77,    0,   85,
       76,    0,    0,    0,    0,    0,    0,    0,    0,    5,
        0,   12,   61,   15,   20,   61,    0,   11,   87,   87,
       70,    0,   77,   79,   85,   76,    0,    0,    0,    0,

        0,   16,   61,   15,   61,   23,   87,   80,   79,   85,
        0,    0,    0,   16,    0,   61,   23,   87,   80,   85,
        0,    0,    0,   24,    0,   87,    0,    0,   24,   17,
       81,   17,   81,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,    9,    7,   10,
       11,    9,    9,   12,    9,    7,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    9,
        9,    9,    6,    9,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        7,   40,    7,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   51,    7,   66,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    4,
        4,    5,    1,    6,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static yyconst flex_int16_t yy_base[1243] =
    {   0,
        0,    0,   65,  104,  143,  182,  222,    0,  288,    0,
      353,    0,   79,   83,  413,    0, 3900, 3901,  478,   87,
      118,   89, 3891,   72, 3883,   97, 3882,  109,  117,  102,
       86,  144,   58,  119,  155,  146,  145,  159,  519,  346,
      175,  476, 3830,    0,  206,  514,  543,  353, 3880, 3901,
      557, 3901, 3901,    0,  596, 3901, 3901,  126, 3880, 3901,
      656,  722,  536,  557,  596,  652,  657,  658,  723,  773,
      659, 3878, 3901,  833, 3901,  109,  665,  148,  337,  354,
      158,  156,  354,  344,  467,  721,  531,  602,  629, 3877,
      742, 3901,  581, 3901,  210,  630,    0,  211,    0,    0,

      756, 3883,  388, 3875,  456,  756,  544,  457,  470,  472,
      523,  526,  550,  738,  542,  589,  656,  781,  595, 3823,
      839,  843,  800,  866,  487, 3901, 3875, 3872,  722,  656,
      770,  603,  805,  769,  759,  739,  840,  765,  857,  848,
      810,  865,  861,  869,  665,  873,  881,  886,  890,  874,
      897,  901,  895,  894,  916,  887, 3878, 3870, 3818,  953,
        0,  961,  932,  965,  969, 3868, 3867,    0,    0,  586,
      959,  771,  822,  898,  913,  915,  920,  957,  961,  958,
      835, 3867,  967,  972,  994, 1000, 1010, 1018, 1028, 1038,
     1048, 1069, 1070, 1091, 1132, 1086, 3865,    0, 1111,  965,

      949,  962,  972,  973, 1001, 1021, 1094, 1086, 1028, 1028,
     1063, 1112, 1065, 1099, 1121, 1129, 1117, 1112, 1123, 1120,
     1134, 1146, 1143, 1145, 1136, 1153, 1145, 1145, 1198, 3864,
     3901, 1206, 3863, 1210,  945, 1184, 3866,    0, 1182, 1172,
     1200, 1198, 1198, 1185, 1204, 1193, 1192, 1187, 1194, 1194,
     1199, 1206, 1211, 1229, 1218, 1230, 1221, 1212, 1206, 1221,
     1236, 1267, 3863, 1260, 1261, 1265, 1262, 1266, 1263, 1264,
     1272, 1282, 1276, 1277, 1283, 1286, 1289, 1278, 1292, 1295,
     1304, 1315, 1321, 1288, 1318, 1324, 1317, 1322, 1331, 1330,
     1336, 1339, 1332, 1342, 1343, 1356, 1348, 3901, 3901, 3901,

     1370, 3901, 3860, 1345, 1364, 1350, 1350, 1368, 1354, 1350,
     1356, 1368, 1381, 1376, 1384, 1363, 1401, 1403, 1419, 1421,
     1425, 1453, 1455, 1473, 1474, 1475, 1505, 1507, 1523, 1524,
     1532, 3901, 1467, 1371, 1376, 1394, 1409, 1424, 1411, 1470,
     1470, 1466, 1485, 1504, 1505, 1517, 1521, 1509, 1522, 1539,
     1523, 1539, 1545, 1551, 1558, 1567, 1562, 3901, 3901, 1555,
     1571, 1559, 1573, 1555, 1571, 1578, 1579, 1570, 1566, 1568,
     1566, 1570, 1582, 1586, 1590, 1572, 1585, 1595, 1579, 1591,
     1594, 1608, 1611, 1619, 1614, 1622, 1614,    0, 1629, 1630,
     1632, 1633, 3859, 1635, 1631, 1640, 1641, 1655, 1642, 1646,

     1659, 1662, 1666, 3858, 3857, 1673, 3854, 1667, 1675, 1668,
     1678, 1679, 1691, 3852, 1680, 1699, 1692, 1701, 1705, 1703,
     3850, 1709, 3901, 1690, 1692, 1688, 1710, 1702, 1697, 1695,
     1717, 1706, 1719, 1728, 1712, 1715, 1722, 1725, 1755, 1757,
     1764, 1777, 1796, 1798, 1815, 1816, 1820, 1847, 1848, 1864,
     1865, 1882, 1899, 1735, 1740, 1732, 1741, 1742, 3849, 1751,
     1763, 1780, 1767, 1795, 1813, 1804, 3846, 1809, 1828, 1829,
     1833, 1860, 3839, 1867, 1877, 1883, 1868, 1893, 1888, 1905,
     1897, 3834, 1903, 1903, 1901, 1899, 1905, 1908, 1924, 1913,
     3832, 1914, 3830, 1926, 1931, 1916, 1915, 1918, 1927, 1934,

     1945, 1944, 1931, 1947, 3826, 1944,    0, 1956, 1963, 1966,
     1964,  205, 1969, 1971, 1982, 1967, 1970, 1984, 1986, 3824,
     1990, 1993,  985, 1036, 1998, 1451, 1995, 1989, 1987, 2015,
     2005, 2016, 1787, 2025, 2021, 2023, 3822, 2013, 3818, 2035,
     2029, 2019, 2021, 2028, 2025, 2028, 2046, 2033, 2034, 2050,
     2036, 2035, 2046, 2051, 2058, 2055, 2075, 2117, 2083, 2096,
     2100, 2134, 2142, 2138, 2151, 2172, 2185, 2190, 2192, 2210,
     2234, 3814, 2059, 2066, 2078, 2239, 3813, 2089, 2087, 2081,
     2088, 3787, 2093, 2128, 3786, 2178, 2169, 2189, 2193, 2191,
     3784, 2208, 2215, 2212, 2212, 3783, 2233, 2225, 2250, 3777,

     2237, 2236, 2238, 2236, 2244, 2242, 2245, 2243, 3776, 2261,
     3773, 2250, 2251, 2269, 2271, 2263, 2264, 2278, 2270, 3757,
     2264, 3751, 3750, 2276, 3718, 2292, 2294, 2064, 2299, 2298,
     2322, 2301, 2308, 2317, 2318, 2319, 2321, 2323, 2091, 2322,
     2331, 1033, 2360, 3717, 2368, 2329, 2338, 2363, 2340, 2364,
     2365, 2384, 3713, 2367, 2375, 2378, 2377, 2383, 2400, 2384,
     2365, 2385, 2389, 2386, 2384, 2383, 2383, 2397, 2383, 2398,
     2402, 2394, 2407, 2394, 3706, 2430, 3705, 2438, 2437, 2443,
     2471, 2462, 2489, 2490, 2495, 2514, 2496, 2520, 2539, 2545,
     2547, 3648, 3577, 2390, 3531, 2398, 2429, 2439, 2580, 2440,

     2523, 2534, 2544, 3478, 2553, 2559, 1071, 3421, 2568, 2573,
     2574, 2567, 2604, 3415, 2565, 2563, 2579, 2582, 2581, 3404,
     2595, 2584, 2618, 2584, 2590, 2595, 2594, 2609, 2596, 2613,
     2613, 3359, 2613, 2614, 2617, 2619, 2607, 2614, 2611, 2607,
     3351, 2616, 3350, 2626, 2418, 2634, 2639, 1090, 2636, 2647,
     2673, 3330, 2662, 2664, 2650, 2666, 2665, 2667, 2671, 1427,
     2672, 3312, 1647, 2699, 2448, 2703, 2680, 3291, 2694, 3290,
     3187, 3156, 2717, 2544, 2708, 3065, 2731, 2722, 1759, 2736,
     3060, 2695, 2709, 2698, 2697, 2712, 2724, 2727, 2727, 3059,
     2727, 2730, 2730, 2721, 2717, 2713, 2763, 1854, 2764, 2765,

     2773, 2798, 2811, 2815, 2832, 3052, 2850, 2856, 2866, 2884,
     2891, 2908, 1881, 2710, 2729, 3047, 2738, 2748, 2763, 2761,
     3048, 2761, 2763, 2771, 2801, 2116, 2817, 3029, 2177, 3022,
     2809, 3018, 2972, 2925, 2968, 2825, 2962, 2830, 2818, 2855,
     2850, 2867, 2892, 2868, 2896, 2891, 2907, 2899, 2914, 2916,
     2887, 2874, 2920, 2858, 2908, 2841, 2840, 2831, 2919, 2824,
     2925, 2797, 2797, 2786, 2933, 2831, 2940, 2934, 2937, 2944,
     2951, 2955, 2682, 2668, 2538, 2899, 2958, 2746, 2976, 2957,
     2752, 2514, 2975, 2979, 2982, 3000, 2961, 2983, 3004, 2506,
     3011, 3005, 2932, 2965, 2994, 2992, 2985, 2988, 3002, 2466,

     2461, 2989, 2451, 2432, 3000, 2413, 3012, 3024, 3030, 3036,
     3043, 3060, 3078, 3079, 2345, 3025, 2339, 3085, 2324, 2297,
     3061, 2243, 3029, 3033, 3023, 3059, 3035, 3048, 3078, 3074,
     3087, 2209, 2201, 3117, 3090, 2181, 3143, 3093, 2160, 2151,
     3105, 3103, 3108, 3099, 3106, 3115, 3110, 2147, 2140, 3114,
     2128, 3116, 2092, 2072, 2071, 2061, 1997, 3120, 1851, 1833,
     1822, 3151, 3144, 3145, 3143, 1768, 3148, 3146, 3149, 3155,
     3159, 3167, 3168, 3170, 3184, 3186, 3172, 3190, 3185, 3192,
     3204, 3209, 3215, 3197, 3219, 3200, 3225, 3157, 3200, 3205,
     3201, 3208, 1752, 3205, 1458, 3204, 3220, 3238, 3240, 3245,

     3247, 1445, 3265, 3233, 3235, 3237, 1407, 3239, 3241, 3283,
     3243, 1396, 3264, 3238, 3248, 1389, 3264, 3258, 1333, 3282,
     3327, 3279, 1305, 1298, 3282, 3286, 1291, 3298, 3290, 3290,
     3293, 1222, 1209, 3303, 3300, 1180, 3297, 1174, 3335, 1168,
     3332, 3271, 1167, 3329, 3338, 1119, 3355, 3359, 3366, 3320,
     3370, 3340, 3374, 3376, 3381, 3385, 3389, 1102, 3390, 3395,
     3399, 3351, 3355, 1068, 3377, 3375, 3386, 3378, 3393, 3397,
     1024, 3399, 3418, 3454, 3435, 3416, 3423, 3435, 3459, 3461,
     3452, 3470, 1014,  989, 3393,  980, 3388, 3481, 3410,  975,
     3487,  964, 3435,  945,  902, 3449, 3449,  898, 3447, 3454,

      859, 3494, 3496, 3496, 3485, 3501, 3497, 3499,  818, 3502,
     3517, 3522, 3526, 3517, 3501, 3531, 3524, 3540,  829,  807,
     3515,  772, 3509, 3507,  747,  733, 3532, 3545,  727, 3541,
     3549, 3554, 3553,  719, 3570, 3530,  711, 3596, 3546, 3577,
      722,  705, 3543,  691, 3554,  645,  644, 3563, 3553,  632,
     3603, 3588,  588, 3609, 3613, 3594, 3604, 3618, 3601,  587,
     3623, 3591,  556, 3603, 3627, 3618, 3633, 3634,  552, 3614,
     3635, 3644,  542, 3612,  525, 3610,  493, 3621,  488, 3653,
     3646, 3660, 3639, 3676, 3680, 3657, 3651, 3684,  470, 3645,
     3685,  379, 3686, 3690, 3681, 3701, 3677,  374, 3664, 3685,

      204, 3710,  185, 3714, 3692, 3736, 3686, 3740, 3744, 3734,
     3676,  180, 3677, 3750, 3714,  167, 3754, 3727, 3766, 3747,
      156,  120,  112, 3776, 3760,   98,   82,   78, 3780, 3792,
     3802, 3806, 3810, 3901, 3815, 3818, 3826, 3834, 3842, 3850,
     3854, 3862
    } ;

static yyconst flex_int16_t yy_def[1243] =
    {   0,
     1234,    1, 1235, 1235, 1235, 1235, 1234,    7, 1234,    9,
        9,   11,   11,   11, 1234,   15, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1234, 1234, 1237, 1234, 1234, 1234, 1237, 1234, 1234,
     1234, 1234, 1234, 1238, 1238, 1234, 1234, 1234, 1238, 1234,
     1239, 1239,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1240, 1234, 1241,   19,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1234, 1234, 1234, 1234,
     1237, 1234, 1237, 1234, 1234, 1234, 1234, 1238,   55, 1234,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1234, 1238,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1234,   74, 1234, 1234,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1240, 1241, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1234, 1234, 1234,

     1234, 1234, 1234, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1242, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,

     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1234, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1234, 1234, 1242, 1236, 1236, 1236,
     1236, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1236, 1236, 1234, 1234, 1236, 1234, 1236, 1236, 1236, 1236,
     1236, 1236, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1234,
     1236, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1236, 1236, 1236, 1234, 1236, 1236,
     1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1234, 1236,
     1236, 1234, 1234, 1236, 1234, 1236, 1236, 1236, 1236, 1236,
     1236, 1234, 1236, 1236, 1236, 1234, 1236, 1234, 1234, 1236,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238,   62, 1234,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1236, 1236, 1234, 1236, 1236,
     1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236, 1234,
     1236, 1236, 1234, 1234, 1234, 1234, 1236, 1236, 1236, 1236,
     1236, 1236, 1234, 1234, 1236, 1236, 1234, 1236, 1234, 1234,
     1236, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238,   62, 1234,   62,   62,

       62,   62,   62,   62,   62, 1234,   62,   62,   62,   62,
       62,   62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1236, 1236, 1234, 1236, 1236, 1236, 1236,
     1236, 1236, 1236, 1236, 1236, 1234, 1236, 1234, 1234, 1236,
     1234, 1236, 1234, 1234, 1234, 1234, 1236, 1234, 1234, 1236,
     1234, 1234, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,

     1238, 1238, 1238, 1238, 1238, 1238,   62, 1234,   62,   62,
       62,   62,   62,   62, 1234, 1234, 1234,   62, 1234, 1234,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
     1234, 1234, 1234, 1236, 1234, 1234, 1236, 1234, 1234, 1234,
     1234, 1234, 1234, 1236, 1234, 1234, 1234, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238,   62,   62,   62,   62,

       62, 1234,   62, 1234, 1234, 1234, 1234, 1234, 1234,   62,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1236,
     1236, 1234, 1236, 1236, 1236, 1236, 1234, 1234, 1234, 1236,
     1234, 1236, 1234, 1234, 1234, 1234, 1234, 1236, 1234, 1234,
     1234, 1238, 1238, 1238, 1238, 1238, 1238, 1238,   62,   62,
     1234,   62,   62, 1234,   62, 1234, 1234, 1234, 1234, 1234,
       62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1234, 1234, 1236, 1234, 1234, 1236, 1236, 1234,
     1234, 1234, 1234, 1236, 1236, 1234, 1234, 1234, 1234, 1238,
     1238, 1238, 1238, 1238, 1238, 1234,   62, 1234, 1234,   62,
     1234,   62, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1236, 1234, 1234, 1236, 1234, 1234, 1236, 1236,
     1234, 1238, 1238, 1238, 1234,   62, 1234, 1234, 1234,   62,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1236, 1234, 1234, 1236, 1234, 1234, 1238, 1238,
     1234, 1234, 1234, 1234,   62, 1234, 1234, 1234, 1234, 1234,

     1234, 1234, 1236, 1234, 1236, 1234, 1238, 1234, 1234,   62,
     1234, 1234, 1234, 1234, 1234, 1236, 1234, 1238, 1234,   62,
     1234, 1234, 1234, 1234, 1234, 1238, 1234, 1234, 1234, 1234,
     1234, 1234, 1234,    0, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234
    } ;

static yyconst flex_int16_t yy_nxt[3968] =
    {   0,
       18,   19,   20,   21,   19,   22,   22,   23,   18,   22,
       22,   24,   18,   22,   25,   26,   27,   28,   29,   30,
       31,   27,   27,   32,   27,   33,   34,   35,   36,   27,
       37,   38,   39,   40,   27,   27,   41,   27,   27,   42,
       18,   26,   27,   28,   29,   30,   31,   27,   27,   32,
       27,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       27,   27,   41,   27,   27,   43,   45,   46,   21,   47,
       48,   48,  127,  125,   48,   48,  125,  141,   48,   25,
       73,   91,   75,   73,   73,   91,   75,   73,  121,  122,
      121,  121, 1230,   73,  123,  123, 1231,   73,  123,  123,

      127,  104,  123,  141,   49,   45,   46,   21,   47,   48,
       48,  127, 1227,   48,   48,  138,  127,   48,   25,  101,
      101,  101,  101,  127,  131,  129, 1228,  181,  130,  136,
      181,  127,  104,  127, 1224,  132,  134,  209,  133,  137,
      135,  138,  142,   49,   50,   51,   52,   53,   48,   48,
      131,  129,   48,   48,  130,  136,   48,   53,  127,  127,
      127,  132,  134,  209,  133,  137,  135,  213,  142,  127,
     1227,  139,  140,  127,  143,  144,  146,  218,  147,  219,
      145, 1225,   53,   50,   51,   52,   53,   48,   48,  127,
      156,   48,   48,  213, 1222,   48,   53,  139,  140, 1215,

      143,  144,  146,  218,  147,  219,  145,  101,  101,  101,
      101,  235,  125,  235,  235,  125,  156,  263, 1206,  631,
      104,   53,   54,   55,   56,   57,   55,   54,   54,   54,
       54,   54,   54,   58,   54,   59,   60,   61,   61,   62,
       63,   64,   61,   61,   61,   65,   61,   66,   61,   67,
       61,   61,   68,   69,   70,   71,   61,   61,   61,   61,
       61,   72,   54,   61,   61,   62,   63,   64,   61,   61,
       61,   65,   61,   66,   61,   67,   61,   61,   68,   69,
       70,   71,   61,   61,   61,   61,   61,   54,   73,   74,
       73,   75,   74,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   76,   73,   77,   78,   79,   73,   73,
       73,   80,   73,   81,   82,   83,   73,   73,   84,   85,
       86,   87,   73,   73,   73,   73,   73,   73,   73,   76,
       73,   77,   78,   79,   73,   73,   73,   80,   73,   81,
       82,   83,   73,   73,   84,   85,   86,   87,   73,   73,
       73,   73,   73,   73,   88,   88,   89,   88,  163,  163,
      127,  152,  163,  163,  214,  153,  163,   90,   73,  154,
       73,   73,   73,  220,  215,  221,   73,  155,   73,   73,
       73,  216,  217,   73,   73,   73,   73,  152, 1202,  125,
      214,  153,  125, 1208,   73,  154,   73,   73,   73,  220,

      215,  221,   73,  155,   73,   73,   73,  216,  217,   73,
       73,   73,   73,   92,   93,   94,   95,   93,   96,   92,
       92,   96,   97,   92,   98,   96,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   96,  100,
      101,  101,  100,  157, 1192,  102,  222,  239,  125,  103,
      158,  125,  104,  105,  245,  106,  107,  108,  109,  246,

      247,  110, 1201,  111,  112,  113,  114, 1184,  115,  116,
      117,  118,  222,  239,  119,  101,  162,  101,  101,  105,
      245,  106,  107,  108,  109,  246,  247,  110,  104,  111,
      112,  113,  114,  127,  115,  116,  117,  118,  148, 1198,
      119,  159,  248,  120,  101,  101,  101,  101,  149,  249,
      227,  183,  150,  151,  228,  187, 1192,  104,  164,  165,
      165,  164,  183,  243,  148,  183, 1194,  244,  248,  250,
     1169,  166,  183,  253,  149,  249,  227,  183,  150,  151,
      228,  187,  234,  183,  235,  234,  183,  181,  183,  243,
      181,  183,  103,  244,  188,  250,  167,  169,  183,  253,

      169, 1187, 1181,  229,  229,  229,  229,  170,  254,  183,
      261,  183,  183,  171,  172,  173,  230,  127,  267,  174,
      188,  175,  183,  176,  189,  183,  177,  178,  179,  180,
      229,  229,  229,  229,  254,  236,  261,  183,  236,  171,
      172,  173,  236,  230,  267,  174, 1161,  175,  183,  176,
      189,  183,  177,  178,  179,  180,  168,  168, 1158, 1177,
      168,  168,  168,  168,  168,  168,  168,  183,  168,  168,
      127,  190,  183,  183,  183,  255,  191,  265,  183,  127,
      210,  183,  196,  183,  183,  183,  183,  183,  183,  192,
      256,  211,  283,  183,  212,  236,  168,  190,  183,  183,

      183,  255,  191,  265,  183, 1155,  210,  183,  196,  183,
      183,  183,  183,  183,  183,  192,  256,  211,  283, 1152,
      212,  168,  168,  168, 1141, 1169,  168,  168,  168,  168,
      168,  168,  168, 1171,  168,  168,  127,  184,  183,  264,
      223, 1168,  193,  232,  232,  232,  232, 1165,  185,  183,
      224,  186,  183,  127,  225,  226,  233,  101,  101,  101,
      101, 1134,  168,  184,  183,  264,  223,  251,  193,  273,
      104,  240,  252,  127,  185,  183,  224,  186,  183,  127,
      225,  226,  241,  127,  127,  242, 1129,  168,  183,  270,
      307,  272,  194,  251,  275,  273,  257,  240,  252,  183,

      258,  271,  183,  266,  259,  123,  123,  195,  241,  123,
      123,  242,  260,  123,  183,  270,  307,  272,  194,  127,
      275, 1126,  257,  268,  127,  183,  258,  271,  183,  266,
      259, 1119, 1157,  195,  198,  269,  181,  198,  260,  181,
      121,  122,  121,  121,  121,  122,  121,  121,  278,  268,
      199,  200,  201,  104,  127,  274,  202,  104,  203,  308,
      204,  269,  127,  205,  206,  207,  208,  262,  262,  262,
      262,  127,  276, 1150,  278,  127,  199,  200,  201,  127,
      277,  274,  202,  127,  203,  308,  204,  127,  127,  205,
      206,  207,  208,  279,  281,  127,  284,  280,  276,  285,

      127,  127,  282,  288,  127,  290,  277,  286,  127,  127,
      289,  127, 1147,  291,  287,  127, 1144,  293,  297,  279,
      281,  294,  284,  280,  292,  285,  309,  295,  282,  288,
      127,  290,  310,  286,  311,  296,  289,  163,  163,  291,
      287,  163,  163,  293,  297,  163,  235,  294,  235,  235,
      292,  312,  309,  295,  301,  301,  301,  301,  310, 1106,
      311,  296,  101,  162,  101,  101,  164,  165,  165,  164,
      165,  165,  165,  165,  304,  104,  313,  312, 1142,  166,
      314,  316,  183,  166,  213,  305,  215,  183,  306, 1134,
      217,  218,  220,  183, 1129,  315,  183,  263,  183,  642,

      304,  183,  313, 1126,  167,  317,  314,  316,  183,  318,
      213,  305,  215,  183,  306,  183,  217,  218,  220,  183,
      183,  315,  183,  183,  183,  183,  183,  183, 1135,  183,
      319,  317,  221,  321,  763,  318,  183,  763, 1128,  183,
      222,  183,  320,  183,  183,  335,  183,  183,  263,  183,
      643,  183,  183,  183,  183,  183,  319,  183,  221,  321,
      322,  336,  183,  183,  183,  183,  222,  183,  320,  183,
      183,  335,  829,  183,  183,  829,  323,  183,  337,  183,
      183,  324, 1071,  183,  183,  183,  322,  336,  326,  183,
      183,  866,  325,  183,  866,  183,  327,  340,  183,  183,

      183,  183,  323,  183,  337,  334,  183,  324,  328,  228,
      183,  183,  183,  223,  326,  183, 1117,  183,  325,  331,
      183,  183,  327,  340,  183,  183,  210,  183,  226,  341,
      338,  334,  183, 1110,  328,  228,  342,  211,  183,  223,
      333,  183,  339,  183,  343,  331,  183,  183,  329,  344,
      345,  346,  210,  347,  226,  341,  338,  348,  183,  330,
      351,  183,  342,  211,  349,  352,  333,  353,  339,  354,
      343,  356,  350,  183,  329,  344,  345,  346,  357,  347,
      355, 1107, 1104,  348,  183,  330,  351,  183, 1102,  236,
      349,  352,  236,  353, 1054,  354,  236,  356,  350,  229,

      229,  229,  229,  360,  357,  361,  355,  232,  232,  232,
      232,  234,  230,  235,  234,  362,  363,  367,  365,  368,
      233,  103,  369, 1049,  370,  371,  372,  373,  364,  360,
      366,  361,  374,  375,  376,  380, 1048,  383,  384,  385,
      386,  362,  363,  367,  365,  368,  381,  377,  369,  236,
      370,  371,  372,  373,  364,  378,  366,  382,  374,  375,
      376,  380,  379,  383,  384,  385,  386,  387,  262,  262,
      262,  262,  381,  377,  127,  127,  127,  127,  127,  127,
      127,  378,  389,  382,  391,  393,  127,  395,  379,  396,
      127,  127,  127,  387,  392,  390,  127,  127,  398,  397,

      127,  394,  127,  127,  399, 1094,  127,  401,  389,  127,
      391,  393, 1039,  395,  403,  396,  400,  404,  127, 1091,
      392,  390,  402,  409,  398,  397,  406,  394,  405,  127,
      399,  127,  127,  401,  407,  127,  127,  408,  127,  411,
      403,  410,  400,  404,  127,  127,  127, 1088,  402,  409,
      127,  412,  406,  127,  405,  413,  127,  127,  418,  415,
      407,  419,  127,  408,  414,  411,  417,  410,  416,  420,
      127,  301,  301,  301,  301,  421,  422,  412,  424,  425,
      426,  413,  427,  428,  418,  415,  429,  419,  430,  431,
      414,  432,  417,  435,  416,  420,  438,  455,  456,  433,

      436,  421,  422, 1071,  424,  425,  426,  434,  427,  428,
     1083,  437,  429,  457,  430,  431,  183,  432,  183,  435,
      439, 1078,  438,  455,  456,  433,  436,  183,  876,  183,
      183,  876,  183,  434,  183,  440,  183,  437,  442,  457,
      183,  458,  183,  459,  183,  183,  439,  183,  183,  460,
      183,  183,  443,  183,  183,  183,  183,  441,  183, 1074,
      183,  440,  183,  263,  442,  645,  183,  458,  183,  459,
      183,  183, 1007,  183,  183,  460,  183,  183,  443,  183,
      183,  183,  183,  441,  183,  454,  444,  461,  183,  183,
      183,  445,  462,  463,  183,  446,  183,  339,  448,  183,

      183,  183,  183,  183,  183,  183,  464,  183,  183,  447,
      183,  454,  444,  461,  183,  183,  183,  445,  462,  463,
      449,  446,  183,  339,  448,  183,  183,  183,  183,  183,
      183,  183,  464,  183,  183,  447,  183,  465,  183,  183,
      450,  466,  467,  468,  469,  470,  449,  183,  183,  183,
      183,  452,  183,  183,  471,  451,  472,  183,  453,  183,
      183,  183,  183,  465,  183,  183,  450,  466,  467,  468,
      469,  470,  473,  183,  474,  183,  183,  452,  183,  183,
      471,  451,  472,  475,  453,  476,  477,  183,  478,  479,
      480,  481,  482,  483,  484,  485,  486,  487,  473,  488,

      474,  489,  490,  491,  492,  493,  494,  495,  496,  475,
      497,  476,  477,  498,  478,  479,  480,  481,  482,  483,
      484,  485,  486,  487,  499,  488,  500,  489,  490,  491,
      492,  493,  494,  495,  496,  501,  497,  502,  503,  498,
      504,  505,  506,  127,  127,  127,  127,  127,  763,  127,
      499,  763,  500,  510,  127,  127,  127,  509,  508,  514,
      127,  501,  513,  502,  503,  511,  504,  505,  506,  127,
      517,  515,  518,  127,  519,  516,  127,  521,  520,  510,
      127,  127,  127,  509,  508,  514,  527,  127,  513,  127,
      528,  511,  127,  127,  127,  522,  517,  515,  518,  529,

      519,  516,  525,  521,  520,  127,  127,  536,  534,  542,
      531,  530,  527,  127,  532,  127,  528,  127,  535,  127,
      537,  522,  539,  127,  543,  529,  544,  545,  525,  546,
      547,  548,  541,  536,  534,  542,  531,  530,  538,  549,
      532,  550,  551,  552,  535,  553,  537,  554,  539,  555,
      543,  556,  544,  545,  572,  546,  547,  548,  541,  573,
      891,  574,  575,  891,  538,  549, 1002,  550,  551,  552,
      183,  553,  183,  554,  576,  555,  557,  556,  578,  183,
      572,  183, 1042,  183,  183,  573,  183,  574,  575,  558,
      183,  559,  183,  183,  579,  580,  183,  581,  183,  263,

      576,  652,  557,  183,  578,  183,  183,  183,  560,  183,
      183,  183,  183,  562,  582,  558,  183,  559,  183,  183,
      579,  580,  183,  581,  183,  183,  561,  183,  583,  183,
      183,  183,  183,  584,  560,  565,  987,  183,  586,  562,
      582,  183,  183,  587,  563,  564,  183, 1038,  183,  183,
      183,  183,  561,  183,  583,  908,  183,  183,  908,  584,
      588,  565,  183,  183,  586,  985,  589,  183,  183,  587,
      563,  564,  183,  183,  183,  183,  183,  183,  566,  183,
      183,  567,  923,  590,  569,  923,  588,  568,  183,  183,
      183,  183,  589,  183,  183,  592,  593,  570,  594,  183,

      183,  595,  183,  183,  566,  183,  183,  567,  183,  590,
      569,  183,  596,  568,  183,  597,  183,  183,  571,  183,
      183,  592,  593,  570,  594,  183,  598,  595,  183,  599,
      601,  602,  603,  604,  183,  605,  606,  183,  596,  607,
      183,  597,  608,  610,  571,  612,  613,  614,  615,  616,
      617,  183,  598,  618,  183,  599,  601,  602,  603,  604,
      619,  605,  606,  620,  621,  607,  622,  624,  608,  610,
      127,  612,  613,  614,  615,  616,  617,  127,  628,  618,
      127,  127,  626,  127,  127,  127,  619,  625,  632,  620,
      621,  629,  622,  624,  633,  627,  127,  630,  127,  635,

      127,  127,  636,  127,  127,  634,  648,  127,  626,  127,
      637,  982,  127,  625,  632,  638,  644,  629,  640,  127,
      633,  627,  647,  630,  641,  635,  646,  127,  636,  127,
      127,  634,  648,  650,  649,  127,  637,  127,  654,  127,
      661,  638,  644,  127,  640,  651,  653,  263,  647,  659,
      641,  657,  646,  662,  655,  663,  664,  660,  665,  650,
      649,  666,  667,  668,  654,  669,  661,  670,  671,  672,
      673,  651,  653,  674,  675,  981,  263,  657,  748,  662,
      655,  663,  664,  660,  665,  980, 1036,  666,  667,  668,
      183,  669,  694,  670,  671,  672,  673,  695,  183,  674,

      675,  183,  680,  263,  676,  760,  978,  696,  700,  183,
      701,  183,  183,  702,  703,  183,  183,  934,  694,  681,
      934,  705,  183,  695,  183,  183,  682,  183,  680,  183,
      676,  677,  183,  696,  700,  183,  701,  183,  183,  702,
      703,  183,  975,  183,  678,  681,  183,  705,  183,  183,
      679,  183,  682,  183, 1033,  183,  685,  183,  183,  706,
      183, 1032,  683,  183,  183, 1024,  183,  183,  183,  183,
      678,  183,  183,  684, 1023,  183,  679,  183,  829,  183,
      183,  829,  685,  183,  686,  706,  183,  183,  683,  183,
      183,  687,  183,  183,  183, 1007,  708,  183,  183,  684,

      183,  183,  709,  183,  688,  183,  183,  183,  710,  690,
      686,  183,  711,  183,  183, 1002,  183,  687,  183,  689,
      712,  183,  708, 1019,  183,  183,  183,  183,  709,  714,
      688,  183,  715,  183,  710,  690,  183,  183,  711,  183,
      183,  691,  183,  716,  183,  689,  712,  183,  692,  183,
      717,  183,  718,  677,  719,  714,  724, 1011,  715,  725,
      183,  726,  183,  183,  720,  183,  697,  691,  727,  716,
      728,  729,  698,  730,  731,  183,  717,  721,  718,  732,
      719,  733,  724,  722,  734,  725,  183,  726,  735,  183,
      736,  737,  697,  738,  727,  739,  728,  729,  698,  730,

      731,  740,  742,  721,  744,  732,  127,  733,  127,  722,
      734, 1009,  127,  127,  735,  127,  736,  737,  749,  738,
      746,  739,  127,  751,  752,  747,  751,  740,  742,  750,
      744,  127,  127,  127,  753,  127,  127,  127, 1008,  761,
      758,  754,  757,  127,  749,  127,  746,  755,  767,  762,
      756,  747,  127, 1006,  127,  750,  759,  768,  770, 1004,
      753,  764,  764,  764,  764,  761,  758,  754,  757,  766,
      766,  766,  766,  755,  767,  762,  756,  127,  127,  127,
      769,  127,  759,  768,  770,  773,  773,  773,  773,  127,
      263,  127,  777,  772,  782,  263,  771,  779,  127,  677,

      775,  780,  780,  780,  780,  781,  769,  778,  785,  786,
      787,  788,  783,  776,  789,  790,  791,  792,  784,  772,
      782,  793,  771,  794,  795,  796,  775,  922,  815,  817,
      263,  781,  863,  778,  785,  786,  787,  788,  783,  776,
      789,  790,  791,  792,  784,  183,  920,  793,  818,  794,
      795,  796,  183,  183,  815,  817,  183,  799,  183,  183,
      263,  797,  879,  183,  183,  919,  183,  183,  800,  183,
      819,  183,  183,  822,  818,  917,  801,  183,  183,  183,
      915,  803,  183,  799,  183,  183,  183,  797,  183,  183,
      183,  183,  183,  183,  800,  183,  819,  183,  183,  822,

      183,  802,  801,  183,  183,  183,  804,  803,  805,  806,
      183,  183,  183,  808,  183,  183,  183,  183,  183,  183,
      986,  183,  183,  183,  183,  183,  183,  802,  979,  183,
      183,  183,  804,  807,  805,  183,  183,  183,  809,  808,
      183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  973,  823,  183,  183,  263,  824,  886,  807,
      183,  183,  183,  825,  809,  183,  183,  810,  183,  183,
      827,  183,  183,  183,  183,  183,  183,  828,  811,  823,
      183,  820,  821,  824,  820,  812,  183,  830,  183,  825,
      831,  183,  832,  810,  183,  833,  827,  183,  836,  183,

      183,  837,  183,  828,  811,  834,  834,  834,  834,  838,
      839,  812,  840,  830,  841,  842,  831,  844,  832,  843,
      752,  833,  843,  845,  836,  846,  847,  837,  848,  849,
      850,  851,  853,  854,  855,  838,  839,  856,  840,  857,
      841,  842,  858,  844,  859,  860,  861,  862,  127,  845,
      127,  846,  847,  127,  848,  849,  850,  851,  853,  854,
      855,  127,  865,  856,  127,  857,  868,  864,  858,  867,
      859,  860,  861,  862,  751,  752,  127,  751,  127,  127,
      127,  127,  972,  871,  869,  127,  127,  870,  865,  872,
      875,  877,  868,  864,  127,  867,  971,  873,  880,  874,

      764,  764,  764,  764,  766,  766,  766,  766,  127,  871,
      869,  924,  821,  870,  924,  872,  875,  877,  773,  773,
      773,  773,  127,  873,  880,  874,  893,  882,  894,  895,
      896,  887,  889,  889,  889,  889,  127,  780,  780,  780,
      780,  890,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  893,  882,  894,  895,  896,  887,  263,  925,
      975,  927,  820,  821,  263,  820,  978,  890,  897,  898,
      899,  900,  901,  902,  903,  904,  905,  906,  183,  183,
      183,  928,  929,  930,  910,  925,  907,  927,  183,  183,
      183,  183,  183,  183,  183,  911,  931,  909,  962,  183,

      963,  962,  183,  932,  183,  183,  183,  928,  929,  930,
      910,  961,  907,  183,  183,  183,  183,  183,  183,  183,
      183,  911,  931,  909,  183,  183,  183,  183,  183,  932,
      183,  912,  866,  933,  914,  866,  935,  183,  959,  183,
      183,  183,  936,  913,  183,  957,  915,  183,  938,  939,
      183,  940,  183,  183,  956,  955,  183,  912,  183,  933,
      914,  183,  935,  183,  917,  183,  183,  183,  936,  913,
      183,  183,  953,  183,  938,  939,  183,  940,  941,  183,
      919,  183,  183,  942,  183,  183,  943,  183,  879,  918,
      944,  183,  183,  843,  752,  183,  843,  183,  920,  183,

      876,  951,  183,  876,  941,  183,  183,  183,  183,  942,
      183,  183,  943,  183,  921,  918,  944,  183,  183,  945,
      183,  183,  922,  183,  946,  183,  834,  834,  834,  834,
      947,  948,  183,  949,  183,  950,  183,  183,  952,  183,
      921,  954,  958,  183,  960,  945,  183,  127,  127,  183,
      946,  127,  964,  966,  127,  988,  947,  948,  127,  949,
      183,  950,  965,  183,  952,  127,  967,  954,  958,  127,
      960,  127,  127,  968,  969,  127,  922,  976,  964,  966,
      976,  988,  937,  977,  970,  974,  920,  263,  965,  980,
      984,  263,  967,  981,  263,  263,  982,  985,  989,  968,

      969,  983,  983,  983,  983,  889,  889,  889,  889,  977,
      970,  974,  891,  990,  991,  891,  984,  263,  992,  987,
      993,  994,  995,  996,  989,  908, 1005,  183,  908, 1005,
      923,  997,  919,  923,  924,  821,  917,  924,  183,  990,
      991,  183, 1012,  915,  992,  183,  993,  994,  995,  996,
      821,  183,  998,  183, 1014,  999,  183,  997,  183,  183,
     1013,  926,  183, 1013,  183,  183,  916,  183, 1012,  183,
     1015,  183, 1000,  806,  892,  183,  183,  183,  998,  888,
     1014,  999,  183, 1001,  183,  183,  183,  183,  183,  183,
     1010,  183, 1002,  183,  183,  183, 1015, 1016, 1000, 1007,

      183,  183,  183, 1017,  183,  183, 1003,  183,  183, 1001,
     1018,  183,  183,  183,  183,  183, 1010, 1020,  934,  183,
      183,  934, 1022, 1016, 1025, 1026,  183, 1027, 1028, 1017,
      183,  183, 1003,  183,  183, 1029, 1018,  183, 1030, 1031,
      183, 1034, 1035, 1020, 1021, 1021, 1021, 1021, 1022, 1037,
     1025, 1026,  962, 1027, 1028,  962,  263,  127, 1039,  127,
      127, 1029,  127,  127, 1030, 1031, 1043, 1034, 1035,  127,
      885,  263, 1041, 1047, 1044, 1037, 1062, 1040, 1045,  263,
      263, 1048, 1049, 1046,  127, 1051,  127,  976, 1051, 1050,
      976, 1053, 1043, 1055, 1053, 1052, 1055,  263, 1041, 1054,

     1044,  884, 1062, 1040, 1045, 1056, 1056, 1056, 1056, 1046,
     1057,  127,  263, 1057, 1060, 1050,  983,  983,  983,  983,
     1059, 1052, 1063, 1059, 1064, 1058, 1061, 1061, 1061, 1061,
     1065, 1066, 1067, 1068, 1076,  183, 1005, 1076, 1077, 1005,
     1079, 1077, 1080, 1079, 1082, 1080,  183, 1082, 1063,  183,
     1064, 1058, 1069,  183, 1071,  183, 1065, 1066, 1067, 1068,
      183,  183,  183, 1072,  183, 1013,  183, 1070, 1013,  183,
     1084,  183,  183,  183,  183,  183, 1073, 1085, 1069,  183,
      183,  183, 1086,  263, 1075, 1106,  183, 1087,  183, 1072,
      183,  183,  183, 1070,  183,  183, 1084,  183,  183,  183,

      183, 1089, 1073, 1085,  883,  881,  183, 1090, 1086,  183,
     1075, 1081,  183, 1087, 1092, 1093, 1095,  183, 1096, 1097,
      183, 1098, 1099, 1100,  183, 1101,  878, 1089, 1021, 1021,
     1021, 1021,  752, 1090,  127,  183, 1103, 1081,  183, 1103,
     1092, 1093, 1095,  127, 1096, 1097,  127, 1098, 1099, 1100,
     1105, 1101,  127, 1114,  127, 1108, 1111, 1111, 1111, 1111,
     1112, 1112, 1112, 1112,  779,  777, 1109, 1113, 1113, 1113,
     1113, 1051, 1115,  852, 1051, 1053, 1105, 1116, 1053, 1114,
     1116, 1108, 1055, 1120, 1121, 1055, 1056, 1056, 1056, 1056,
     1057, 1059, 1109, 1057, 1059, 1122, 1118, 1119, 1115, 1118,

     1061, 1061, 1061, 1061, 1123, 1124, 1125, 1126,  183, 1120,
     1121, 1136,  183, 1129,  183, 1127, 1137, 1076,  748,  183,
     1076, 1122,  183,  183, 1077,  183,  183, 1077,  183,  835,
     1123, 1124, 1125,  183,  183,  806, 1133, 1136,  183, 1133,
      183, 1127, 1137, 1139,  183,  183, 1130,  183,  183,  183,
      183,  183,  183, 1143,  183, 1131, 1131, 1131, 1131,  183,
     1079,  183, 1080, 1079,  183, 1080, 1134,  183, 1132, 1139,
      183, 1082, 1130,  183, 1082, 1145,  183, 1146,  183, 1143,
     1148,  183, 1138, 1138, 1138, 1138, 1149,  183, 1140, 1141,
      183, 1140,  826,  183, 1132, 1151, 1119, 1103, 1151,  127,

     1103, 1145, 1154, 1146,  183, 1154, 1148,  183,  263,  263,
     1152, 1155, 1149,  127,  263,  127, 1158, 1153, 1111, 1111,
     1111, 1111, 1156, 1112, 1112, 1112, 1112, 1113, 1113, 1113,
     1113,  127, 1116, 1162, 1160, 1116,  263, 1163, 1161, 1159,
     1164, 1118, 1119, 1153, 1118,  816, 1167,  183, 1156, 1167,
     1131, 1131, 1131, 1131, 1133, 1169,  183, 1133,  183, 1162,
     1160,  183, 1173, 1163, 1166, 1159, 1164,  183, 1174,  183,
      183, 1172, 1141,  183, 1172, 1175, 1170, 1176, 1140, 1141,
      183, 1140,  183,  183,  183, 1178, 1179,  183, 1173, 1180,
     1166,  814, 1180,  183, 1174,  183,  183, 1138, 1138, 1138,

     1138, 1175, 1170, 1176, 1151, 1119,  183, 1151,  127,  183,
     1154, 1178, 1179, 1154, 1182,  127,  263, 1182, 1184, 1185,
     1185, 1185, 1185, 1189, 1188, 1190, 1183, 1188, 1191,  183,
     1186, 1191, 1192,  183, 1167, 1193, 1196, 1167, 1193, 1196,
      183, 1197, 1199, 1195,  183, 1172, 1141,  183, 1172, 1189,
     1200, 1190, 1183,  127, 1180,  183, 1186, 1180,  263,  183,
     1202, 1182,  813,  263, 1182, 1206,  183, 1197, 1199, 1195,
      183,  127, 1203,  183, 1207, 1205, 1200, 1204, 1204, 1204,
     1204, 1185, 1185, 1185, 1185, 1188, 1191, 1193, 1188, 1191,
     1193, 1209, 1209, 1209, 1209, 1211,  183, 1212, 1203, 1210,

     1207, 1205, 1196, 1213, 1218, 1196,  127,  183, 1221, 1223,
      183, 1214, 1214, 1214, 1214, 1204, 1204, 1204, 1204,  798,
      692, 1211,  183, 1212, 1216, 1210,  263,  774, 1224, 1213,
     1218,  765,  745,  183, 1221, 1223,  183, 1217, 1217, 1217,
     1217, 1219, 1219, 1219, 1219, 1209, 1209, 1209, 1209,  183,
     1216, 1214, 1214, 1214, 1214, 1217, 1217, 1217, 1217, 1226,
      183, 1227,  183,  183,  659,  743, 1220, 1219, 1219, 1219,
     1219,  741,  263,  183, 1230,  183,  183, 1229, 1229, 1229,
     1229, 1229, 1229, 1229, 1229, 1226,  183,  645,  183,  183,
      643,  723, 1220, 1232, 1232, 1232, 1232,  692,  713,  183,

      707,  704,  183, 1233, 1233, 1233, 1233, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233,   44,   44,   44,   44,   44,
       44,   44,   44,   44,  128,  128,  161,  699,  693,  161,
      161,  161,  658,  161,  168,  168,  656,  168,  639,  168,
      623,  168,  183,  183,  611,  183,  609,  183,  600,  183,
      237,  237,  237,  591,  237,  237,  237,  237,  237,  238,
      585,  238,  507,  577,  540,  507,  533,  507,  526,  507,
      507,  524,  523,  512,  423,  388,  359,  358,  231,  332,
      182,  303,  302,  300,  299,  298,  127,  263,  160,  126,
      124,  231,  197,  182,  158,  160,  127,  126,  124, 1234,

       17, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234
    } ;

static yyconst flex_int16_t yy_chk[3968] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,   33,   24,    3,    3,   24,   33,    3,    3,
       13,   13,   13,   13,   14,   14,   14,   14,   20,   20,
       20,   20, 1228,   13,   22,   22, 1227,   14,   22,   22,

       31,   20,   22,   33,    3,    4,    4,    4,    4,    4,
        4,   26, 1226,    4,    4,   31,   30,    4,    4,   21,
       21,   21,   21,   28,   28,   26, 1223,   58,   26,   30,
       58,   29,   21,   34, 1222,   28,   29,   76,   28,   30,
       29,   31,   34,    4,    5,    5,    5,    5,    5,    5,
       28,   26,    5,    5,   26,   30,    5,    5,   32,   37,
       36,   28,   29,   76,   28,   30,   29,   78,   34,   35,
     1221,   32,   32,   38,   35,   36,   37,   81,   38,   82,
       36, 1216,    5,    6,    6,    6,    6,    6,    6,   41,
       41,    6,    6,   78, 1212,    6,    6,   32,   32, 1203,

       35,   36,   37,   81,   38,   82,   36,   45,   45,   45,
       45,   95,   98,   95,   95,   98,   41,  512, 1201,  512,
       45,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11,   48,   48,
       40,   40,   48,   48,   79,   40,   48,   11,   11,   40,
       11,   11,   11,   83,   79,   84,   11,   40,   11,   11,
       11,   80,   80,   11,   11,   11,   11,   40, 1198,  103,
       79,   40,  103, 1192,   11,   40,   11,   11,   11,   83,

       79,   84,   11,   40,   11,   11,   11,   80,   80,   11,
       11,   11,   11,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       19,   19,   19,   42, 1189,   19,   85,  105,  125,   19,
       42,  125,   19,   19,  108,   19,   19,   19,   19,  109,

      110,   19, 1179,   19,   19,   19,   19, 1177,   19,   19,
       19,   19,   85,  105,   19,   46,   46,   46,   46,   19,
      108,   19,   19,   19,   19,  109,  110,   19,   46,   19,
       19,   19,   19,   39,   19,   19,   19,   19,   39, 1175,
       19,   42,  111,   19,   47,   47,   47,   47,   39,  112,
       87,   63,   39,   39,   87,   63, 1173,   47,   51,   51,
       51,   51,   63,  107,   39,   63, 1169,  107,  111,  113,
     1163,   51,   64,  115,   39,  112,   87,   63,   39,   39,
       87,   63,   93,   64,   93,   93,   64,  170,   63,  107,
      170,   63,   93,  107,   64,  113,   51,   55,   64,  115,

       55, 1160, 1153,   88,   88,   88,   88,   55,  116,   64,
      119,   65,   64,   55,   55,   55,   88,  132,  132,   55,
       64,   55,   65,   55,   65,   65,   55,   55,   55,   55,
       89,   89,   89,   89,  116,   96,  119,   65,   96,   55,
       55,   55,   96,   89,  132,   55, 1150,   55,   65,   55,
       65,   65,   55,   55,   55,   55,   61,   61, 1147, 1146,
       61,   61,   61,   61,   61,   61,   61,   66,   61,   61,
      130,   66,   67,   68,   71,  117,   67,  130,   66,  145,
       77,   66,   71,   67,   68,   71,   67,   68,   71,   68,
      117,   77,  145,   66,   77,   96,   61,   66,   67,   68,

       71,  117,   67,  130,   66, 1144,   77,   66,   71,   67,
       68,   71,   67,   68,   71,   68,  117,   77,  145, 1142,
       77,   61,   62,   62, 1141, 1137,   62,   62,   62,   62,
       62,   62,   62, 1134,   62,   62,  129,   62,   69,  129,
       86, 1129,   69,   91,   91,   91,   91, 1126,   62,   69,
       86,   62,   69,  136,   86,   86,   91,  101,  101,  101,
      101, 1125,   62,   62,   69,  129,   86,  114,   69,  136,
      101,  106,  114,  135,   62,   69,   86,   62,   69,  138,
       86,   86,  106,  134,  131,  106, 1122,   62,   70,  134,
      172,  135,   70,  114,  138,  136,  118,  106,  114,   70,

      118,  134,   70,  131,  118,  123,  123,   70,  106,  123,
      123,  106,  118,  123,   70,  134,  172,  135,   70,  133,
      138, 1120,  118,  133,  141,   70,  118,  134,   70,  131,
      118, 1119, 1109,   70,   74,  133,  181,   74,  118,  181,
      121,  121,  121,  121,  122,  122,  122,  122,  141,  133,
       74,   74,   74,  121,  137,  137,   74,  122,   74,  173,
       74,  133,  140,   74,   74,   74,   74,  124,  124,  124,
      124,  139,  139, 1101,  141,  143,   74,   74,   74,  142,
      140,  137,   74,  144,   74,  173,   74,  146,  150,   74,
       74,   74,   74,  142,  143,  147,  146,  142,  139,  147,

      148,  156,  144,  148,  149,  150,  140,  147,  154,  153,
      149,  151, 1098,  151,  147,  152, 1095,  152,  156,  142,
      143,  153,  146,  142,  151,  147,  174,  154,  144,  148,
      155,  150,  175,  147,  176,  155,  149,  163,  163,  151,
      147,  163,  163,  152,  156,  163,  235,  153,  235,  235,
      151,  177,  174,  154,  160,  160,  160,  160,  175, 1094,
      176,  155,  162,  162,  162,  162,  164,  164,  164,  164,
      165,  165,  165,  165,  171,  162,  178,  177, 1092,  164,
      179,  180,  183,  165,  200,  171,  201,  184,  171, 1090,
      202,  203,  204,  183, 1086,  179,  183,  523,  184,  523,

      171,  184,  178, 1084,  164,  184,  179,  180,  183,  185,
      200,  171,  201,  184,  171,  186,  202,  203,  204,  183,
      185,  179,  183,  185,  184,  187,  186,  184, 1083,  186,
      186,  184,  205,  188,  642,  185,  187,  642, 1071,  187,
      206,  186,  187,  189,  188,  209,  185,  188,  524,  185,
      524,  187,  186,  190,  189,  186,  186,  189,  205,  188,
      189,  210,  187,  191,  190,  187,  206,  190,  187,  189,
      188,  209,  707,  188,  191,  707,  190,  191,  211,  190,
      189,  191, 1064,  189,  192,  193,  189,  210,  193,  191,
      190,  748,  192,  190,  748,  192,  193,  213,  192,  193,

      191,  196,  190,  191,  211,  208,  194,  191,  194,  208,
      192,  193,  196,  207,  193,  196, 1058,  194,  192,  196,
      194,  192,  193,  213,  192,  193,  199,  196,  207,  214,
      212,  208,  194, 1046,  194,  208,  215,  199,  196,  207,
      199,  196,  212,  194,  216,  196,  194,  195,  195,  217,
      218,  219,  199,  220,  207,  214,  212,  221,  195,  195,
      223,  195,  215,  199,  222,  224,  199,  225,  212,  226,
      216,  227,  222,  195,  195,  217,  218,  219,  228,  220,
      226, 1043, 1040,  221,  195,  195,  223,  195, 1038,  236,
      222,  224,  236,  225, 1036,  226,  236,  227,  222,  229,

      229,  229,  229,  239,  228,  240,  226,  232,  232,  232,
      232,  234,  229,  234,  234,  241,  242,  244,  243,  245,
      232,  234,  246, 1033,  247,  248,  249,  250,  242,  239,
      243,  240,  251,  252,  253,  255, 1032,  257,  258,  259,
      260,  241,  242,  244,  243,  245,  256,  254,  246,  236,
      247,  248,  249,  250,  242,  254,  243,  256,  251,  252,
      253,  255,  254,  257,  258,  259,  260,  261,  262,  262,
      262,  262,  256,  254,  264,  265,  267,  269,  270,  266,
      268,  254,  264,  256,  266,  268,  271,  270,  254,  271,
      273,  274,  278,  261,  267,  265,  272,  275,  273,  272,

      276,  269,  284,  277,  274, 1027,  279,  276,  264,  280,
      266,  268, 1024,  270,  278,  271,  275,  279,  281, 1023,
      267,  265,  277,  284,  273,  272,  281,  269,  280,  282,
      274,  287,  285,  276,  282,  283,  288,  283,  286,  286,
      278,  285,  275,  279,  290,  289,  293, 1019,  277,  284,
      291,  287,  281,  292,  280,  288,  294,  295,  293,  290,
      282,  294,  297,  283,  289,  286,  292,  285,  291,  295,
      296,  301,  301,  301,  301,  296,  297,  287,  304,  305,
      306,  288,  307,  308,  293,  290,  309,  294,  310,  311,
      289,  312,  292,  314,  291,  295,  316,  334,  335,  313,

      315,  296,  297, 1016,  304,  305,  306,  313,  307,  308,
     1012,  315,  309,  336,  310,  311,  317,  312,  318,  314,
      317, 1007,  316,  334,  335,  313,  315,  317,  760,  318,
      317,  760,  318,  313,  319,  318,  320,  315,  320,  336,
      321,  337,  317,  338,  318,  319,  317,  320,  319,  339,
      320,  321,  321,  317,  321,  318,  317,  319,  318, 1002,
      319,  318,  320,  526,  320,  526,  321,  337,  322,  338,
      323,  319,  995,  320,  319,  339,  320,  321,  321,  322,
      321,  323,  322,  319,  323,  333,  322,  340,  324,  325,
      326,  323,  341,  342,  322,  324,  323,  333,  326,  324,

      325,  326,  324,  325,  326,  322,  343,  323,  322,  325,
      323,  333,  322,  340,  324,  325,  326,  323,  341,  342,
      327,  324,  328,  333,  326,  324,  325,  326,  324,  325,
      326,  327,  343,  328,  327,  325,  328,  344,  329,  330,
      328,  345,  346,  347,  348,  349,  327,  331,  328,  329,
      330,  330,  329,  330,  350,  329,  351,  327,  331,  328,
      327,  331,  328,  344,  329,  330,  328,  345,  346,  347,
      348,  349,  352,  331,  353,  329,  330,  330,  329,  330,
      350,  329,  351,  354,  331,  355,  356,  331,  357,  360,
      361,  362,  363,  364,  365,  366,  367,  368,  352,  369,

      353,  370,  371,  372,  373,  374,  375,  376,  377,  354,
      378,  355,  356,  379,  357,  360,  361,  362,  363,  364,
      365,  366,  367,  368,  380,  369,  381,  370,  371,  372,
      373,  374,  375,  376,  377,  382,  378,  383,  384,  379,
      385,  386,  387,  389,  390,  395,  391,  392,  763,  394,
      380,  763,  381,  391,  396,  397,  399,  390,  389,  395,
      400,  382,  394,  383,  384,  392,  385,  386,  387,  398,
      398,  396,  399,  401,  400,  397,  402,  402,  401,  391,
      403,  408,  410,  390,  389,  395,  408,  406,  394,  409,
      409,  392,  411,  412,  415,  403,  398,  396,  399,  410,

      400,  397,  406,  402,  401,  413,  417,  417,  415,  424,
      412,  411,  408,  416,  413,  418,  409,  420,  416,  419,
      418,  403,  420,  422,  425,  410,  426,  427,  406,  428,
      429,  430,  422,  417,  415,  424,  412,  411,  419,  431,
      413,  432,  433,  434,  416,  435,  418,  436,  420,  437,
      425,  438,  426,  427,  454,  428,  429,  430,  422,  455,
      779,  456,  457,  779,  419,  431,  993,  432,  433,  434,
      439,  435,  440,  436,  458,  437,  439,  438,  460,  441,
      454,  439,  966,  440,  439,  455,  440,  456,  457,  440,
      441,  441,  442,  441,  461,  462,  439,  463,  440,  533,

      458,  533,  439,  442,  460,  441,  442,  439,  442,  440,
      439,  443,  440,  444,  464,  440,  441,  441,  442,  441,
      461,  462,  443,  463,  444,  443,  443,  444,  465,  442,
      445,  446,  442,  466,  442,  447,  961,  443,  468,  444,
      464,  445,  446,  469,  445,  446,  447,  960,  443,  447,
      444,  443,  443,  444,  465,  798,  445,  446,  798,  466,
      470,  447,  448,  449,  468,  959,  471,  445,  446,  469,
      445,  446,  447,  448,  449,  447,  448,  449,  448,  450,
      451,  449,  813,  472,  451,  813,  470,  450,  448,  449,
      450,  451,  471,  450,  451,  474,  475,  452,  476,  448,

      449,  477,  448,  449,  448,  450,  451,  449,  452,  472,
      451,  452,  478,  450,  453,  479,  450,  451,  453,  450,
      451,  474,  475,  452,  476,  453,  480,  477,  453,  481,
      483,  484,  485,  486,  452,  487,  488,  452,  478,  489,
      453,  479,  490,  492,  453,  494,  495,  496,  497,  498,
      499,  453,  480,  500,  453,  481,  483,  484,  485,  486,
      501,  487,  488,  502,  503,  489,  504,  506,  490,  492,
      508,  494,  495,  496,  497,  498,  499,  509,  511,  500,
      510,  516,  509,  513,  517,  514,  501,  508,  513,  502,
      503,  511,  504,  506,  514,  510,  515,  511,  518,  516,

      519,  529,  517,  528,  521,  515,  529,  522,  509,  527,
      518,  957,  525,  508,  513,  519,  525,  511,  521,  531,
      514,  510,  528,  511,  522,  516,  527,  538,  517,  530,
      532,  515,  529,  531,  530,  535,  518,  536,  535,  534,
      542,  519,  525,  541,  521,  532,  534,  540,  528,  540,
      522,  538,  527,  543,  536,  544,  545,  541,  546,  531,
      530,  547,  548,  549,  535,  550,  542,  551,  552,  553,
      554,  532,  534,  555,  556,  956,  628,  538,  628,  543,
      536,  544,  545,  541,  546,  955,  954,  547,  548,  549,
      557,  550,  573,  551,  552,  553,  554,  574,  559,  555,

      556,  557,  559,  639,  557,  639,  953,  575,  578,  559,
      579,  560,  559,  580,  581,  561,  557,  826,  573,  560,
      826,  583,  560,  574,  559,  560,  561,  557,  559,  561,
      557,  558,  558,  575,  578,  559,  579,  560,  559,  580,
      581,  561,  951,  558,  558,  560,  558,  583,  560,  562,
      558,  560,  561,  564,  949,  561,  564,  563,  558,  584,
      562,  948,  562,  562,  564,  940,  565,  564,  563,  558,
      558,  563,  558,  563,  939,  562,  558,  565,  829,  564,
      565,  829,  564,  563,  565,  584,  562,  566,  562,  562,
      564,  566,  565,  564,  563,  936,  586,  563,  566,  563,

      567,  566,  587,  565,  567,  568,  565,  569,  588,  569,
      565,  567,  589,  566,  567,  933,  568,  566,  569,  568,
      590,  569,  586,  932,  566,  570,  567,  566,  587,  592,
      567,  568,  593,  569,  588,  569,  570,  567,  589,  570,
      567,  570,  568,  594,  569,  568,  590,  569,  571,  571,
      595,  570,  597,  576,  598,  592,  601,  922,  593,  602,
      571,  603,  570,  571,  599,  570,  576,  570,  604,  594,
      605,  606,  576,  607,  608,  571,  595,  599,  597,  610,
      598,  612,  601,  599,  613,  602,  571,  603,  614,  571,
      615,  616,  576,  617,  604,  618,  605,  606,  576,  607,

      608,  619,  621,  599,  624,  610,  626,  612,  627,  599,
      613,  920,  630,  629,  614,  632,  615,  616,  629,  617,
      626,  618,  633,  631,  631,  627,  631,  619,  621,  630,
      624,  634,  635,  636,  632,  637,  640,  638,  919,  640,
      637,  633,  636,  646,  629,  641,  626,  634,  646,  641,
      635,  627,  647,  917,  649,  630,  638,  647,  649,  915,
      632,  643,  643,  643,  643,  640,  637,  633,  636,  645,
      645,  645,  645,  634,  646,  641,  635,  648,  650,  651,
      648,  654,  638,  647,  649,  652,  652,  652,  652,  655,
      656,  657,  656,  651,  661,  658,  650,  658,  660,  662,

      654,  659,  659,  659,  659,  660,  648,  657,  663,  664,
      665,  666,  662,  655,  667,  668,  669,  670,  662,  651,
      661,  671,  650,  672,  673,  674,  654,  906,  694,  696,
      745,  660,  745,  657,  663,  664,  665,  666,  662,  655,
      667,  668,  669,  670,  662,  676,  904,  671,  697,  672,
      673,  674,  679,  678,  694,  696,  676,  678,  680,  676,
      765,  676,  765,  679,  678,  903,  679,  678,  679,  680,
      698,  676,  680,  700,  697,  901,  680,  682,  679,  678,
      900,  682,  676,  678,  680,  676,  681,  676,  682,  679,
      678,  682,  679,  678,  679,  680,  698,  681,  680,  700,

      681,  681,  680,  682,  683,  684,  683,  682,  684,  685,
      685,  687,  681,  687,  682,  683,  684,  682,  683,  684,
      890,  685,  687,  681,  685,  687,  681,  681,  882,  686,
      683,  684,  683,  686,  684,  688,  685,  687,  688,  687,
      686,  683,  684,  686,  683,  684,  688,  685,  687,  688,
      685,  687,  875,  701,  689,  686,  774,  702,  774,  686,
      690,  688,  691,  703,  688,  689,  686,  689,  689,  686,
      705,  690,  688,  691,  690,  688,  691,  706,  690,  701,
      689,  699,  699,  702,  699,  691,  690,  709,  691,  703,
      710,  689,  711,  689,  689,  712,  705,  690,  715,  691,

      690,  716,  691,  706,  690,  713,  713,  713,  713,  717,
      718,  691,  719,  709,  721,  722,  710,  724,  711,  723,
      723,  712,  723,  725,  715,  726,  727,  716,  728,  729,
      730,  731,  733,  734,  735,  717,  718,  736,  719,  737,
      721,  722,  738,  724,  739,  740,  742,  744,  746,  725,
      749,  726,  727,  747,  728,  729,  730,  731,  733,  734,
      735,  750,  747,  736,  755,  737,  750,  746,  738,  749,
      739,  740,  742,  744,  751,  751,  753,  751,  754,  757,
      756,  758,  874,  755,  753,  759,  761,  754,  747,  756,
      759,  761,  750,  746,  767,  749,  873,  757,  767,  758,

      764,  764,  764,  764,  766,  766,  766,  766,  769,  755,
      753,  814,  814,  754,  814,  756,  759,  761,  773,  773,
      773,  773,  775,  757,  767,  758,  782,  769,  783,  784,
      785,  775,  777,  777,  777,  777,  778,  780,  780,  780,
      780,  778,  786,  787,  788,  789,  791,  792,  793,  794,
      795,  796,  782,  769,  783,  784,  785,  775,  878,  815,
      878,  817,  820,  820,  881,  820,  881,  778,  786,  787,
      788,  789,  791,  792,  793,  794,  795,  796,  797,  799,
      800,  818,  819,  822,  800,  815,  797,  817,  801,  797,
      799,  800,  797,  799,  800,  801,  823,  799,  863,  801,

      864,  863,  801,  824,  797,  799,  800,  818,  819,  822,
      800,  862,  797,  802,  801,  797,  799,  800,  797,  799,
      800,  801,  823,  799,  802,  801,  803,  802,  801,  824,
      804,  802,  866,  825,  804,  866,  827,  803,  860,  802,
      803,  804,  831,  803,  804,  858,  805,  805,  836,  838,
      802,  839,  803,  802,  857,  856,  804,  802,  805,  825,
      804,  805,  827,  803,  807,  807,  803,  804,  831,  803,
      804,  808,  854,  805,  836,  838,  807,  839,  840,  807,
      809,  809,  808,  841,  805,  808,  842,  805,  852,  808,
      844,  807,  809,  843,  843,  809,  843,  808,  810,  810,

      876,  851,  807,  876,  840,  807,  811,  809,  808,  841,
      810,  808,  842,  810,  811,  808,  844,  811,  809,  845,
      811,  809,  812,  812,  846,  810,  834,  834,  834,  834,
      847,  848,  811,  849,  812,  850,  810,  812,  853,  810,
      811,  855,  859,  811,  861,  845,  811,  865,  868,  812,
      846,  869,  865,  868,  867,  893,  847,  848,  870,  849,
      812,  850,  867,  812,  853,  871,  869,  855,  859,  872,
      861,  880,  877,  870,  871,  887,  837,  879,  865,  868,
      879,  893,  835,  880,  872,  877,  833,  883,  867,  883,
      887,  884,  869,  884,  885,  888,  885,  888,  894,  870,

      871,  886,  886,  886,  886,  889,  889,  889,  889,  880,
      872,  877,  891,  895,  896,  891,  887,  892,  897,  892,
      898,  899,  902,  905,  894,  908,  916,  907,  908,  916,
      923,  907,  832,  923,  924,  924,  830,  924,  907,  895,
      896,  907,  925,  828,  897,  909,  898,  899,  902,  905,
      821,  910,  909,  907,  927,  910,  909,  907,  911,  909,
      926,  816,  910,  926,  907,  910,  806,  907,  925,  911,
      928,  909,  911,  790,  781,  912,  921,  910,  909,  776,
      927,  910,  909,  912,  911,  909,  912,  921,  910,  912,
      921,  910,  913,  913,  914,  911,  928,  929,  911,  918,

      918,  912,  921,  930,  913,  914,  914,  913,  914,  912,
      931,  918,  912,  921,  918,  912,  921,  935,  934,  913,
      914,  934,  938,  929,  941,  942,  918,  943,  944,  930,
      913,  914,  914,  913,  914,  945,  931,  918,  946,  947,
      918,  950,  952,  935,  937,  937,  937,  937,  938,  958,
      941,  942,  962,  943,  944,  962,  963,  965,  963,  964,
      968,  945,  967,  969,  946,  947,  967,  950,  952,  970,
      772,  971,  965,  971,  968,  958,  988,  964,  969,  972,
      973,  972,  973,  970,  974,  975,  977,  976,  975,  974,
      976,  978,  967,  980,  978,  977,  980,  979,  965,  979,

      968,  771,  988,  964,  969,  981,  981,  981,  981,  970,
      982,  984,  986,  982,  986,  974,  983,  983,  983,  983,
      985,  977,  989,  985,  990,  984,  987,  987,  987,  987,
      991,  992,  994,  996, 1004,  997, 1005, 1004, 1006, 1005,
     1008, 1006, 1009, 1008, 1011, 1009,  997, 1011,  989,  997,
      990,  984,  997,  998,  999,  999,  991,  992,  994,  996,
     1000,  997, 1001, 1000,  998, 1013,  999,  998, 1013,  999,
     1014, 1000,  997, 1001, 1000,  997, 1001, 1015,  997,  998,
     1003,  999, 1017, 1042, 1003, 1042, 1000, 1018, 1001, 1000,
      998, 1003,  999,  998, 1003,  999, 1014, 1000, 1010, 1001,

     1000, 1020, 1001, 1015,  770,  768, 1003, 1022, 1017, 1010,
     1003, 1010, 1010, 1018, 1025, 1026, 1028, 1003, 1029, 1030,
     1003, 1031, 1034, 1035, 1010, 1037,  762, 1020, 1021, 1021,
     1021, 1021,  752, 1022, 1050, 1010, 1039, 1010, 1010, 1039,
     1025, 1026, 1028, 1044, 1029, 1030, 1041, 1031, 1034, 1035,
     1041, 1037, 1045, 1050, 1052, 1044, 1047, 1047, 1047, 1047,
     1048, 1048, 1048, 1048,  743,  741, 1045, 1049, 1049, 1049,
     1049, 1051, 1052,  732, 1051, 1053, 1041, 1054, 1053, 1050,
     1054, 1044, 1055, 1062, 1063, 1055, 1056, 1056, 1056, 1056,
     1057, 1059, 1045, 1057, 1059, 1065, 1060, 1060, 1052, 1060,

     1061, 1061, 1061, 1061, 1066, 1067, 1068, 1069, 1069, 1062,
     1063, 1085, 1070, 1072, 1072, 1070, 1087, 1076,  720, 1069,
     1076, 1065, 1069, 1070, 1077, 1072, 1070, 1077, 1072,  714,
     1066, 1067, 1068, 1073, 1069,  708, 1078, 1085, 1070, 1078,
     1072, 1070, 1087, 1089, 1073, 1069, 1073, 1073, 1069, 1070,
     1075, 1072, 1070, 1093, 1072, 1074, 1074, 1074, 1074, 1073,
     1079, 1075, 1080, 1079, 1075, 1080, 1081, 1081, 1075, 1089,
     1073, 1082, 1073, 1073, 1082, 1096, 1075, 1097, 1081, 1093,
     1099, 1081, 1088, 1088, 1088, 1088, 1100, 1075, 1091, 1091,
     1075, 1091,  704, 1081, 1075, 1102, 1102, 1103, 1102, 1105,

     1103, 1096, 1106, 1097, 1081, 1106, 1099, 1081, 1104, 1107,
     1104, 1107, 1100, 1108, 1110, 1115, 1110, 1105, 1111, 1111,
     1111, 1111, 1108, 1112, 1112, 1112, 1112, 1113, 1113, 1113,
     1113, 1114, 1116, 1121, 1115, 1116, 1117, 1123, 1117, 1114,
     1124, 1118, 1118, 1105, 1118,  695, 1128, 1127, 1108, 1128,
     1131, 1131, 1131, 1131, 1133, 1130, 1130, 1133, 1127, 1121,
     1115, 1127, 1136, 1123, 1127, 1114, 1124, 1130, 1139, 1132,
     1130, 1135, 1135, 1127, 1135, 1143, 1132, 1145, 1140, 1140,
     1132, 1140, 1130, 1132, 1127, 1148, 1149, 1127, 1136, 1152,
     1127,  693, 1152, 1130, 1139, 1132, 1130, 1138, 1138, 1138,

     1138, 1143, 1132, 1145, 1151, 1151, 1132, 1151, 1156, 1132,
     1154, 1148, 1149, 1154, 1155, 1159, 1157, 1155, 1157, 1158,
     1158, 1158, 1158, 1162, 1161, 1164, 1156, 1161, 1165, 1170,
     1159, 1165, 1166, 1166, 1167, 1168, 1171, 1167, 1168, 1171,
     1170, 1174, 1176, 1170, 1166, 1172, 1172, 1166, 1172, 1162,
     1178, 1164, 1156, 1183, 1180, 1170, 1159, 1180, 1181, 1166,
     1181, 1182,  692, 1187, 1182, 1187, 1170, 1174, 1176, 1170,
     1166, 1186, 1183, 1166, 1190, 1186, 1178, 1184, 1184, 1184,
     1184, 1185, 1185, 1185, 1185, 1188, 1191, 1193, 1188, 1191,
     1193, 1194, 1194, 1194, 1194, 1197, 1195, 1199, 1183, 1195,

     1190, 1186, 1196, 1200, 1207, 1196, 1205, 1195, 1211, 1213,
     1195, 1202, 1202, 1202, 1202, 1204, 1204, 1204, 1204,  677,
      675, 1197, 1195, 1199, 1205, 1195, 1215,  653, 1215, 1200,
     1207,  644,  625, 1195, 1211, 1213, 1195, 1206, 1206, 1206,
     1206, 1208, 1208, 1208, 1208, 1209, 1209, 1209, 1209, 1210,
     1205, 1214, 1214, 1214, 1214, 1217, 1217, 1217, 1217, 1218,
     1210, 1220, 1220, 1210,  623,  622, 1210, 1219, 1219, 1219,
     1219,  620, 1225, 1220, 1225, 1210, 1220, 1224, 1224, 1224,
     1224, 1229, 1229, 1229, 1229, 1218, 1210,  611, 1220, 1210,
      609,  600, 1210, 1230, 1230, 1230, 1230,  596,  591, 1220,

      585,  582, 1220, 1231, 1231, 1231, 1231, 1232, 1232, 1232,
     1232, 1233, 1233, 1233, 1233, 1235, 1235, 1235, 1235, 1235,
     1235, 1235, 1235, 1235, 1236, 1236, 1237,  577,  572, 1237,
     1237, 1237,  539, 1237, 1238, 1238,  537, 1238,  520, 1238,
      505, 1238, 1239, 1239,  493, 1239,  491, 1239,  482, 1239,
     1240, 1240, 1240,  473, 1240, 1240, 1240, 1240, 1240, 1241,
      467, 1241, 1242,  459,  421, 1242,  414, 1242,  407, 1242,
     1242,  405,  404,  393,  303,  263,  237,  233,  230,  197,
      182,  167,  166,  159,  158,  157,  128,  127,  120,  104,
      102,   90,   72,   59,   49,   43,   27,   25,   23,   17,

     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
     1234, 1234, 1234, 1234, 1234, 1234, 1234
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[104] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 
    1, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int scdoc_flex_debug;
int scdoc_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scdoctext;
#line 1 "SCDoc.l"
#line 2 "SCDoc.l"
/************************************************************************
*
* Copyright 2012 Jonatan Liljedahl <lijon@kymatica.com>
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
************************************************************************/

#include <string.h>
#include "SCDoc.h"
#include "SCDoc.tab.hpp"

int scdoc_start_token = 0;
//int colnum;
//#define YY_USER_ACTION { scdoclloc.first_column = colnum; colnum=colnum+scdocleng; scdoclloc.last_column=colnum; if(scdoclloc.first_line!=scdoclineno) colnum=1; scdoclloc.first_line = scdoclloc.last_line = scdoclineno;}

static int method_caller;

#define YY_NO_UNISTD_H 1







#line 1817 "lex.scdoc.cpp"

#define INITIAL 0
#define verbatim 1
#define verbatim2 2
#define metadata 3
#define eat 4
#define eat2 5
#define eat3 6
#define method 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scdoclex_destroy (void );

int scdocget_debug (void );

void scdocset_debug (int debug_flag  );

YY_EXTRA_TYPE scdocget_extra (void );

void scdocset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scdocget_in (void );

void scdocset_in  (FILE * in_str  );

FILE *scdocget_out (void );

void scdocset_out  (FILE * out_str  );

yy_size_t scdocget_leng (void );

char *scdocget_text (void );

int scdocget_lineno (void );

void scdocset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scdocwrap (void );
#else
extern int scdocwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( scdoctext, scdocleng, 1, scdocout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scdocin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scdocin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scdocin))==0 && ferror(scdocin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scdocin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scdoclex (void);

#define YY_DECL int scdoclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scdoctext and scdocleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 45 "SCDoc.l"




if (scdoc_start_token) {
    int t = scdoc_start_token;
    scdoc_start_token = 0;
//    colnum = 1;
    if(t==START_METADATA) BEGIN(eat);
    return t;
}



#line 2021 "lex.scdoc.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scdocin )
			scdocin = stdin;

		if ( ! scdocout )
			scdocout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scdocensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scdoc_create_buffer(scdocin,YY_BUF_SIZE );
		}

		scdoc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scdoctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1235 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1234 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < scdocleng; ++yyl )
				if ( scdoctext[yyl] == '\n' )
					   
    scdoclineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "SCDoc.l"
return CLASS;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "SCDoc.l"
return TITLE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "SCDoc.l"
return SUMMARY;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "SCDoc.l"
return RELATED;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "SCDoc.l"
return CATEGORIES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "SCDoc.l"
return REDIRECT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "SCDoc.l"
return CLASSTREE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "SCDoc.l"
return KEYWORD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "SCDoc.l"
return PRIVATE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "SCDoc.l"
return SECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "SCDoc.l"
return SUBSECTION;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "SCDoc.l"
return COPYMETHOD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "SCDoc.l"
return ARGUMENT;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 76 "SCDoc.l"
return DESCRIPTION;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 77 "SCDoc.l"
return CLASSMETHODS;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 78 "SCDoc.l"
return INSTANCEMETHODS;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 79 "SCDoc.l"
return EXAMPLES;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 81 "SCDoc.l"
return RETURNS;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 82 "SCDoc.l"
return DISCUSSION;
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 84 "SCDoc.l"
return LIST;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 85 "SCDoc.l"
return TREE;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 86 "SCDoc.l"
return NUMBEREDLIST;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 87 "SCDoc.l"
return DEFINITIONLIST;
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 88 "SCDoc.l"
return TABLE;
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 89 "SCDoc.l"
return FOOTNOTE;
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 90 "SCDoc.l"
return WARNING;
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 91 "SCDoc.l"
return NOTE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "SCDoc.l"
BEGIN(verbatim); return LINK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "SCDoc.l"
BEGIN(verbatim); return ANCHOR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "SCDoc.l"
BEGIN(verbatim); return IMAGE;
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 96 "SCDoc.l"
BEGIN(verbatim); return SOFT;
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 97 "SCDoc.l"
BEGIN(verbatim); return STRONG;
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 98 "SCDoc.l"
BEGIN(verbatim); return EMPHASIS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "SCDoc.l"
BEGIN(verbatim); return CODE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "SCDoc.l"
BEGIN(verbatim); return TELETYPE;
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 102 "SCDoc.l"
BEGIN(verbatim2); return CODEBLOCK;
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 103 "SCDoc.l"
BEGIN(verbatim2); return TELETYPEBLOCK;
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 105 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 106 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 107 "SCDoc.l"
scdoclval.str = strdup("\n::"); return TEXT;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 108 "SCDoc.l"
return BARS;
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 109 "SCDoc.l"
return HASHES;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 111 "SCDoc.l"
scdoclval.str = strdup("\n"); return TEXT;
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 112 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 113 "SCDoc.l"
return NEWLINE;
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 114 "SCDoc.l"
return EMPTYLINES;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 118 "SCDoc.l"
scdoclval.str = strdup("||"); return TEXT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "SCDoc.l"
scdoclval.str = strdup("##"); return TEXT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "SCDoc.l"
scdoclval.str = strdup("    "); return TEXT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 122 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "SCDoc.l"
/* eat this */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 126 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return URL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODNAME;
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 128 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODARGS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 129 "SCDoc.l"
/* eat this */
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 130 "SCDoc.l"
BEGIN(method_caller); return NEWLINE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 131 "SCDoc.l"
return BAD_METHODNAME;
	YY_BREAK
case 61:
#line 134 "SCDoc.l"
case 62:
#line 135 "SCDoc.l"
case 63:
#line 136 "SCDoc.l"
case 64:
#line 137 "SCDoc.l"
case 65:
YY_RULE_SETUP
#line 137 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 139 "SCDoc.l"
BEGIN(metadata); return CLASS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 140 "SCDoc.l"
BEGIN(metadata); return TITLE;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "SCDoc.l"
BEGIN(metadata); return SUMMARY;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "SCDoc.l"
BEGIN(metadata); return RELATED;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 143 "SCDoc.l"
BEGIN(metadata); return CATEGORIES;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "SCDoc.l"
BEGIN(metadata); return REDIRECT;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "SCDoc.l"
BEGIN(metadata); return CLASSTREE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "SCDoc.l"
BEGIN(metadata); return KEYWORD;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "SCDoc.l"
BEGIN(metadata); return PRIVATE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "SCDoc.l"
BEGIN(metadata); return SECTION;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "SCDoc.l"
BEGIN(metadata); return SUBSECTION;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "SCDoc.l"
BEGIN(metadata); return COPYMETHOD;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 152 "SCDoc.l"
BEGIN(eat); return DESCRIPTION;
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 153 "SCDoc.l"
BEGIN(eat); return CLASSMETHODS;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 154 "SCDoc.l"
BEGIN(eat); return INSTANCEMETHODS;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 155 "SCDoc.l"
BEGIN(eat); return EXAMPLES;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 156 "SCDoc.l"
BEGIN(eat); return NEWLINE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 157 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 85:
#line 159 "SCDoc.l"
case 86:
#line 160 "SCDoc.l"
case 87:
#line 161 "SCDoc.l"
case 88:
YY_RULE_SETUP
#line 161 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 162 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 163 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 164 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 165 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 166 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 167 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 168 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 171 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 172 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 173 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 174 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 175 "SCDoc.l"
/* empty */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 176 "SCDoc.l"
ECHO;
	YY_BREAK
#line 2647 "lex.scdoc.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(verbatim):
case YY_STATE_EOF(verbatim2):
case YY_STATE_EOF(metadata):
case YY_STATE_EOF(eat):
case YY_STATE_EOF(eat2):
case YY_STATE_EOF(eat3):
case YY_STATE_EOF(method):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scdocin at a new source and called
			 * scdoclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scdocin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scdocwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scdoctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scdoclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					scdocrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scdocrestart(scdocin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scdocrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1235 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1235 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1234);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scdoctext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --scdoclineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scdocrestart(scdocin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scdocwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scdoctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    scdoclineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scdocrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scdocensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scdoc_create_buffer(scdocin,YY_BUF_SIZE );
	}

	scdoc_init_buffer(YY_CURRENT_BUFFER,input_file );
	scdoc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scdoc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scdocpop_buffer_state();
	 *		scdocpush_buffer_state(new_buffer);
     */
	scdocensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scdoc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scdocwrap()) processing, but the only time this flag
	 * is looked at is after scdocwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scdoc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scdocin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scdoc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scdocalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scdoc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scdoc_create_buffer()
 * 
 */
    void scdoc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scdocfree((void *) b->yy_ch_buf  );

	scdocfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scdocrestart() or at EOF.
 */
    static void scdoc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scdoc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scdoc_init_buffer was _probably_
     * called from scdocrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scdoc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scdoc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scdocensure_buffer_stack();

	/* This block is copied from scdoc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scdoc_switch_to_buffer. */
	scdoc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scdocpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scdoc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scdoc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scdocensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scdoc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scdoc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scdoclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scdoc_scan_bytes() instead.
 */
YY_BUFFER_STATE scdoc_scan_string (yyconst char * yystr )
{
    
	return scdoc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scdoclex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scdoc_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scdocalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scdoc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scdoc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scdoctext[scdocleng] = (yy_hold_char); \
		(yy_c_buf_p) = scdoctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scdocleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scdocget_lineno  (void)
{
        
    return scdoclineno;
}

/** Get the input stream.
 * 
 */
FILE *scdocget_in  (void)
{
        return scdocin;
}

/** Get the output stream.
 * 
 */
FILE *scdocget_out  (void)
{
        return scdocout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t scdocget_leng  (void)
{
        return scdocleng;
}

/** Get the current token.
 * 
 */

char *scdocget_text  (void)
{
        return scdoctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scdocset_lineno (int  line_number )
{
    
    scdoclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scdoc_switch_to_buffer
 */
void scdocset_in (FILE *  in_str )
{
        scdocin = in_str ;
}

void scdocset_out (FILE *  out_str )
{
        scdocout = out_str ;
}

int scdocget_debug  (void)
{
        return scdoc_flex_debug;
}

void scdocset_debug (int  bdebug )
{
        scdoc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scdoclex_destroy(), so don't allocate here.
     */

    /* We do not touch scdoclineno unless the option is enabled. */
    scdoclineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scdocin = stdin;
    scdocout = stdout;
#else
    scdocin = (FILE *) 0;
    scdocout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scdoclex_init()
     */
    return 0;
}

/* scdoclex_destroy is for both reentrant and non-reentrant scanners. */
int scdoclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scdoc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scdocpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scdocfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scdoclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scdocalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scdocrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scdocfree (void * ptr )
{
	free( (char *) ptr );	/* see scdocrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 176 "SCDoc.l"


