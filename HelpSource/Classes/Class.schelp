class::Class
summary::A Class describes the structure and implementation of a set of objects which are its instances.
categories::Core>Kernel, Language>OOP
related:: Guides/WritingClasses, Reference/Classes

ClassMethods::
method:: allClasses
returns:: an link::Classes/Array:: of all Classes


method:: initClass

When SuperCollider starts up, just after it has compiled the library, it initializes all the classes from Object down, a depth first traversal of subclasses.

This method can be overloaded in any class that requires initialization of classvars or other resources.

note::
Each class will be initialized once, thus each class' code::initClass:: is called exactly once during the initialization phase.
::

method:: initClassTree

used in link::#*initClass:: to assure the initialisation of code::aClass:: before using it. Wherever necessary, it recursively initializes all classes required by code::aClass::.

In some cases it is required that another class and its resources are initialized before you initialize your own. This can be accomplished by


code::
YourClass {
    *initClass {
		// initialize OtherClass before continuing
        Class.initClassTree(OtherClass);

        ..

        // use OtherClass

        ..
    }

    ..

}
::

Pre-initialized data such as link::Classes/SynthDef::s should be deferred to link::Classes/StartUp::

code::
YourClass {
    *initClass {
        StartUp.add {
            ..
        }
    }

    ..

}
::

InstanceMethods::

method::browse

Open a graphical browser for this Class. Shows methods, arguments, variables, subclasses, and has buttons for navigating to the superclass, source, helpfile, etc.

code::
Dictionary.browse;
::

method::findMethod

Find the Method referred to by name. If not found, return nil.

code::
Integer.findMethod('>'); // nil
Integer.findMethod('*'); // Integer:*
::


method::findRespondingMethodFor

As above, but climb the class tree to see if the method is inherited from a superclass. If not found, return nil.

code::
Integer.findRespondingMethodFor('>'); // SimpleNumber:>
Integer.findRespondingMethodFor('+'); // Integer:*
::

method::respondingMethods

Return a list of methods for the selectors that an object of this class responds to.

code::
Integer.respondingMethods.do { |item| item.postln };
::

method::instancesRespondTo

Return true if the message selector or array of message selectors are understood by objects of this class.

code::
Collection.instancesRespondTo(\flop); // false
Set.instancesRespondTo(\clear); // true
Set.instancesRespondTo([\flop, \clear]) // false: not both
::

method::findRespondingSubclasses

Return a list of all subclasses whose instances respond to the message selector or all message selector in an array.

code::
Collection.findRespondingSubclasses(\flop); // a long list
Set.findRespondingSubclasses(\clear);
Set.findRespondingSubclasses([\flop, \clear]); // not both
::

method::findRespondingUpperSubclasses

Return a list of all classes down the class tree starting from the receiver, whose instances respond to the message selector or all message selector in an array.

code::
Collection.findRespondingUpperSubclasses(\flop);
Set.findRespondingUpperSubclasses(\clear);
Set.findRespondingUpperSubclasses([\flop, \clear]); // not both
::

method::findSimilarSelectors

Returns a list of selectors similar to the argument passed. For other arguments and sorting, see link::Classes/String#-findSimilarIn::.

code::
Array.findSimilarSelectors(\skramle);
Array.findSimilarSelectors(\flip);
Array.findSimilarSelectors(\flip, maxEditDistance: 7);
::

method::dumpAllMethods

Post all instance methods which instances of this class responds too, including inherited ones. code::this.class.dumpAllMethods:: will post all class methods which this class responds to.

code::
Integer.dumpAllMethods
::

method::dumpByteCodes

Dump the byte codes of the named method.

code::
Integer.findMethod(\do).dumpByteCodes
::

method::dumpClassSubtree

Post the tree of all Classes that inherit from this class.

code::
Collection.dumpClassSubtree
::

method::dumpInterface

Post all the methods defined in this Class and their arguments.

code::
Array.dumpInterface
Array.class.dumpInterface
::

method::dumpFullInterface

Post all the class and instance methods that this class responds to.

code::
Array.dumpFullInterface
::


method::help

Opens the help file for this Class if it exists. It may take a little while until the help window responds.

code::
Array.help
::

method::helpFilePath

Returns the path of this Class's helpfile as a String.

code::
Array.helpFilePath
::

method::helpFileForMethod

Opens the helpfile for the class in which the responding method is implemented.

code::
Array.helpFileForMethod('select'); // This will open the Collection helpfile
::

method::asClass

Return this.

method::asString

Return the name of the class as a String.


subsection:: Accessing

method::name

A Symbol that is the name of the class.

method::nextclass

The next class in a linked list of all classes.

code::
Set.nextclass
::

method::superclass

The Class from which this class directly inherits.

code::
Set.superclass // Collection
::

method::superclasses

An Array of this class's superclasses, going back to Object.

code::
Set.superclasses // [class Collection, class Object]
::

method::subclasses

An Array of the direct subclasses of this.

code::
Set.subclasses // [class Dictionary, class IdentitySet]
::

method::allSubclasses

An Array of all subclasses of this.

code::
Set.allSubclasses
::

method::superclassesDo

Call a function passing each superclass of the receiver.

code::
List.superclassesDo { |x| x.postln };
::


method::methods

An Array of the methods of this class.

code::
Set.methods.do { |item| item.name.postln }
::

method::instVarNames

An Array of the names of the instance variables for this class.

method::classVarNames

An Array of the names of the class variables for this class.

method::iprototype

An Array of the initial values of instance variables.

method::cprototype

An Array of the initial values of class variables.

method::filenameSymbol

A Symbol which is a path to the file which defines the Class.

code::
Set.filenameSymbol
::
