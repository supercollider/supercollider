class::Process
categories::Core>Kernel
summary:: Runtime environment for the virtual machine and interpreter.

description::
A Process is the runtime environment for the virtual machine and interpreter.
It has a subclass named link::Classes/Main:: which is where you should override the methods
of Process. There are two methods of interest. One is named code::startup:: and is
called after the class library has been compiled. The other is named code::run:: and
is called when the user chooses the Run menu command.

classMethods::

method::tailCallOptimize
Get or set tail call optimization. The default is on. Setting this to code::false:: can help with debugging by including intermediate levels in an error backtrace.

instanceMethods::

method::nowExecutingPath

Usage:
code::
thisProcess.nowExecutingPath
::

Returns the full path to the file containing the code that is currently executing emphasis::interactively:: in the interpreter. Usually this is the current document. If the code block executes another file on disk, using link::Classes/String#-load:: or link::Classes/String#-loadPaths::, teletype::nowExecutingPath:: will be the location of the executed file.

teletype::nowExecutingPath:: is valid only for interactive code, i.e., code files with a teletype::.scd:: extension. It does not apply to class definitions (teletype::.sc::). For that, use code::thisMethod.filenameSymbol:: or code::this.class.filenameSymbol::.

The method is supported in various environments, including the SuperCollider IDE, Neovim (SCNvim), Emacs (scel), VSCode/VSCodium, and the command line interface (CLI). In unsupported editors, it will return code::nil::.

See link::#examples#Examples:: for various uses of code::thisProcess.nowExecutingPath:: with saved files, loaded files and link::Classes/Function:: calls, link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree::, link::Classes/Routine:: and link::Classes/Task::.

WARNING:: teletype::nowExecutingPath:: has a corresponding setter method, teletype::nowExecutingPath_::, for internal use only by the interpreter. Do not call the setter method!::

method::startup

called after the class library has been compiled. Override this in class link::Classes/Main:: to do whatever you want.

method::run

called when the user chooses the Run menu command. Override this in class link::Classes/Main:: to do whatever you want.

method::mainThread

The top-level link::Classes/Thread::, i.e the link::Classes/Thread#-parent#parent:: of all
other Threads. This instance of Thread always exists and is created with the Process when
SuperCollider starts.

discussion::

All SuperCollider code initially runs in the context of the main Thread:

list::
## Code evaluated in code editor
## Code evaluated on command line
## Tasks scheduled on any link::Classes/Clock::
## Functions evaluated in response to incoming OSC and MIDI messages
::

This means that link::Classes/Thread#.thisThread#thisThread:: will always initially point
to the main Thread. However, when some code starts a link::Classes/Routine::, the Routine
becomes the current Thread, with the main Thread as its parent.

examples::

subsection:: .nowExecutingPath

subsubsection:: In a locally saved scd file

When evaluating code::thisProcess.nowExecutingPath:: in a saved emphasis::SuperCollider document:: (file extension: scd) on local storage, it returns the path of that file itself.

definitionlist::

## Preparing for the Test||

numberedlist::
## Create an empty file in SuperCollider IDE or an editor that can evaluate sclang.
## Write the following code:
code::
thisProcess.nowExecutingPath.postln
::
## Save it as teletype::test.scd:: in your account home folder.
## (Open teletype::test.scd:: in SuperCollider IDE or an editor that can evaluate sclang.)
::
note::
Alternatively, evaluating the following code block executes all the steps above automatically
(If emphasis::SuperCollider IDE:: is installed, the final line of code usually opens the file in it):

code::
(
var filePath = "~/test.scd".standardizePath;
var code = "thisProcess.nowExecutingPath.postln";
File.use(filePath, "w", { |f| f.write(code) });
filePath.openDocument
)
::
::

## Testing the example code||

list::
## Within emphasis::SuperCollider IDE:: (Code Editor or Help Browser) or in other editors:

numberedlist::
## Evaluate the code in the prepared teletype::test.scd:::

## Post window returns:
list::
## On Linux:
teletype::
/home/AccountFolder/test.scd
-> /home/AccountFolder/test.scd
::
## On macOS:
teletype::
/Users/AccountFolder/test.scd
-> /Users/AccountFolder/test.scd
::
## On Windows:
teletype::
C:/Users/AccountFolder/test.scd
-> C:/Users/AccountFolder/test.scd
::
::
::

## In command line interface (CLI):
numberedlist::
## Run sclang to execute the prepared teletype::test.scd:: file:
list::
## On Linux:
code::
sclang ~/test.scd
::
## On macOS (teletype::/Applications/SuperCollider.app:: might be changed to properly):
code::
/Applications/SuperCollider.app/Contents/MacOS/sclang ~/test.scd
::
## On Windows (teletype::C:\Program Files\SuperCollider_dev\ :: should be changed to properly):
code::
"C:\Program Files\SuperCollider_dev\sclang.exe" %userprofile%\test.scd
::
::
## See the result:

The last two lines sclang returns to the terminal window (or command prompt window on Windows) are as follows:

list::
## On Linux:
teletype::
*** Welcome to SuperCollider 3.14.0-dev. *** For help type ctrl-c ctrl-h (Emacs) or :SChelp (vim).
/home/AccountFolder/test.scd
::

## On macOS:
teletype::
*** Welcome to SuperCollider 3.14.0-dev. *** For help type cmd-d.
/Users/AccountFolder/test.scd
::
## On Windows:
teletype::
*** Welcome to SuperCollider 3.14.0-dev. *** For help press F1.
C:\Users\AccountFolder\test.scd
::
::
## Quit sclang and return to prompt: anchor::3. Quit sclang and return to prompt::

While sclang is running as a foreground process (occupying the terminal until interrupted),
users can interrupt it to regain control of the CLI:

list::
## On Linux: Press teletype::Ctrl + C:: (press teletype::c:: while holding down the Control key).
## On macOS: Press teletype::Command + .:: (press teletype::.:: while holding down the Command key).
## On Windows: Press teletype::Ctrl + C:: (press teletype::c:: while holding down the Control key).
::
note::
To automatically return to the CLI, it is recommended to append code::0.exit:: to the end of the code in the prepared teletype::test.scd:: file as follows:
code::
thisProcess.nowExecutingPath.postln;
0.exit
::
See link::Classes/Integer#-exit::.
::
::
::
::

subsubsection:: In a loaded file

If a code (teletype::main.scd:: in the example code below) executes another file on local storage (teletype::test.scd:: in the example code below) using link::Classes/String#-load::, link::Classes/String#-loadRelative:: or link::Classes/String#-loadPaths::, code::thisProcess.nowExecutingPath:: will be the location of the executed file (teletype::test.scd:: in the example code below).

definitionlist::

## Preparing for the Test||

numberedlist::
## Create an SCD file called teletype::test.scd:: in your home folder using the following block of code:
code::
thisProcess.nowExecutingPath.postln
::
## Create an SCD file called teletype::main.scd:: in your home folder using the following block of code:
code::
(
var path = thisProcess.nowExecutingPath;

"thisProcess.nowExecutingPath:".postln;
("- in main.scd:           " + path).postln;

"- in loaded test.scd:".postln;

"  - using .load:          ".post;
(path.dirname +/+ "test.scd").load;

"  - using .loadRelative:  ".post;
"test.scd".loadRelative;

"  - using .loadPaths:     ".post;
"~/test.scd".standardizePath.loadPaths;

"Test completed; main.scd tasks completed.".postln
)
::
::

## Testing the example code||

list::
## Within emphasis::SuperCollider IDE:: (Code Editor or Help Browser) or in other editors.

numberedlist::
## Evaluate the following code:

code::
"~/main.scd".standardizePath.load;
::

## Post window returns:
list::
## On Linux:
teletype::
thisProcess.nowExecutingPath:
- in main.scd:            /home/AccountFolder/main.scd
- in loaded test.scd:
  - using .load:          /home/AccountFolder/test.scd
  - using .loadRelative:  /home/AccountFolder/test.scd
  - using .loadPaths:     /home/AccountFolder/test.scd
Test completed; main.scd tasks completed.
-> Test completed; main.scd tasks completed.
::
## On macOS:
teletype::
thisProcess.nowExecutingPath:
- in main.scd:            /Users/AccountFolder/main.scd
- in loaded test.scd:
  - using .load:          /Users/AccountFolder/test.scd
  - using .loadRelative:  /Users/AccountFolder/test.scd
  - using .loadPaths:     /Users/AccountFolder/test.scd
Test completed; main.scd tasks completed.
-> Test completed; main.scd tasks completed.
::
## On Windows:
teletype::
thisProcess.nowExecutingPath:
- in main.scd:            C:/Users/AccountFolder/main.scd
- in loaded test.scd:
  - using .load:          C:/Users/AccountFolder\test.scd
  - using .loadRelative:  C:\Users\AccountFolder\test.scd
  - using .loadPaths:     C:\Users\AccountFolder\test.scd
Test completed; main.scd tasks completed.
-> Test completed; main.scd tasks completed.
::
::
::

## In command line interface (CLI):

numberedlist::
## Run sclang to execute the prepared teletype::main.scd:: file:
list::
## On Linux:
code::
sclang ~/main.scd
::
## On macOS (teletype::/Applications/SuperCollider.app:: might be changed to properly):
code::
/Applications/SuperCollider.app/Contents/MacOS/sclang ~/main.scd
::
## On Windows (teletype::C:\Program Files\SuperCollider_dev\ :: should be changed to properly):
code::
"C:\Program Files\SuperCollider_dev\sclang.exe" %userprofile%\main.scd
::
::

## See the result:

sclang returns to the terminal window (command prompt window on Windows):
list::
## On Lonux:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help type ctrl-c ctrl-h (Emacs) or :SChelp (vim).
thisProcess.nowExecutingPath:
- in main.scd:            /home/AccountFolder/main.scd
- in loaded test.scd:
  - using .load:          /home/AccountFolder/test.scd
  - using .loadRelative:  /home/AccountFolder/test.scd
  - using .loadPaths:     /home/AccountFolder/test.scd
Test completed; main.scd tasks completed.
::

## On macOS:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help type cmd-d.
thisProcess.nowExecutingPath:
- in main.scd:            /Users/AccountFolder/main.scd
- in loaded test.scd:
  - using .load:          /Users/AccountFolder/test.scd
  - using .loadRelative:  /Users/AccountFolder/test.scd
  - using .loadPaths:     /Users/AccountFolder/test.scd
Test completed; main.scd tasks completed.
::
## On Windows:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help press F1.
thisProcess.nowExecutingPath:
- in main.scd:            C:\Users\AccountFolder\main.scd
- in loaded test.scd:
  - using .load:          C:\Users\AccountFolder\test.scd
  - using .loadRelative:  C:\Users\AccountFolder\test.scd
  - using .loadPaths:     C:\Users\AccountFolder\test.scd
Test completed; main.scd tasks completed.
::
::
## Quit sclang and return to prompt:

See the test step link::#3. Quit sclang and return to prompt:: in link::#In a locally saved scd file#In a locally saved scd file of the .nowExecutingPath example::.
::
::
::

subsubsection:: In function calls in a loaded file

If a function containing thisProcess.nowExecutingPath is called (the function defined in teletype::test_function.scd:: in the example code below), code::thisProcess.nowExecutingPath:: will return the path of the document containing the function call (teletype::main_function.scd:: in the example code below).

definitionlist::

## Preparing for the Test||

numberedlist::
## Create an SCD file called teletype::test_function.scd:: in your home folder using the following block of code:
code::
var path = { thisProcess.nowExecutingPath };

("    - in test_function.scd: " + path.()).postln;

(
testFunction: {
	("    - in its testFunction:  " + path.()).postln
}
)
::
## Create an SCD file called teletype::main_function.scd:: in your home folder using the following block of code:
code::
(
~path = thisProcess.nowExecutingPath;

"thisProcess.nowExecutingPath:".postln;
("- in main_function.scd:     " + ~path).postln;

"- in the loaded test_function.scd and its functions:".postln;
"  - using .load:".postln;
(~path.dirname +/+ "test_function.scd").load.testFunction; // See comments 1 in the note below
"  - using .loadRelative:".postln;
"test_function.scd".loadRelative[0].testFunction; // See comments 1 & 2 in the note below
"  - using .loadPaths:".postln;
"~/test_function.scd".standardizePath.loadPaths[0].testFunction; // See comments 1 & 2 in the note below

"Test completed; main_function.scd tasks completed.".postln
)
::
note::
Comments on the above code example:

numberedlist::
## The methods link::Classes/String#-load#.load::, link::Classes/String#-loadRelative#.loadRelative:: and link::Classes/String#-loadPath#.loadPath:: evaluate the receiver. As a result, each of the following code examples produces output twice – first from the evaluation of link::Classes/String#-load#.load::/link::Classes/String#-loadRelative#.loadRelative::/link::Classes/String#-loadPath#.loadPath:: and then from teletype::.testFunction:::
code::
(~path.dirname +/+ "test_function.scd").load.testFunction;
::
code::
"test_function.scd".loadRelative[0].testFunction;
::
code::
"~/test_function.scd".standardizePath.loadPaths[0].testFunction;
::
## On the array index in the following two code lines:
code::
"test_function.scd".loadRelative[0].testFunction;
::
code::
"~/test_function.scd".standardizePath.loadPaths[0].testFunction;
::
In the String class, the methods link::Classes/String#-loadRelative#.loadRelative:: and link::Classes/String#-loadPath#.loadPath:: return an array, which means that specifying an index for accessing the test function is necessary.
::
::
::

## Testing the example code||

list::
## Within emphasis::SuperCollider IDE:: (Code Editor or Help Browser) or in other editors.

numberedlist::
## Evaluate the following code:
code::
"~/main_function.scd".standardizePath.load;
::

## Post window returns:
list::
## On Linux:
teletype::
thisProcess.nowExecutingPath:
- in main_function.scd:      /home/AccountFolder/main_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
  - using .loadRelative:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
  - using .loadPaths:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
Test completed; main_function.scd tasks completed.
-> Test completed; main_function.scd tasks completed.
::
## On macOS:
teletype::
thisProcess.nowExecutingPath:
- in main_function.scd:      /Users/AccountFolder/main_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
  - using .loadRelative:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
  - using .loadPaths:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
Test completed; main_function.scd tasks completed.
-> Test completed; main_function.scd tasks completed.
::
## On Windows:
teletype::
thisProcess.nowExecutingPath:
- in main_function.scd:      C:/Users/AccountFolder/mainn_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  C:/Users/AccountFolder\test_function.scd
    - in its testFunction:   C:/Users/AccountFolder/mainn_function.scd
  - using .loadRelative:
    - in test_function.scd:  C:\Users\AccountFolder\test_function.scd
    - in its testFunction:   C:/Users/AccountFolder/mainn_function.scd
  - using .loadPaths:
    - in test_function.scd:  C:\Users\AccountFolder\test_function.scd
    - in its testFunction:   C:/Users/AccountFolder/mainn_function.scd
Test completed; main_function.scd tasks completed.
-> Test completed; main_function.scd tasks completed.
::
::
::

## In command line interface (CLI):
numberedlist::
## Run sclang to execute the prepared teletype::main_function.scd:: file:
list::
## On Linux:
code::
sclang ~/main_function.scd
::
## On macOS (teletype::/Applications/SuperCollider.app:: might be changed to properly):
code::
/Applications/SuperCollider.app/Contents/MacOS/sclang ~/main_function.scd
::
## On Windows (teletype::C:\Program Files\SuperCollider_dev\ :: should be changed to properly):
code::
"C:\Program Files\SuperCollider_dev\sclang.exe" %userprofile%main_function.scd
::
::

## See the result:

sclang returns to the terminal window (command prompt window on Windows):
list::
## On Lonux:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help type ctrl-c ctrl-h (Emacs) or :SChelp (vim).
thisProcess.nowExecutingPath:
- in main_function.scd:      /home/AccountFolder/main_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
  - using .loadRelative:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
  - using .loadPaths:
    - in test_function.scd:  /home/AccountFolder/test_function.scd
    - in its testFunction:   /home/AccountFolder/main_function.scd
Test completed; main_function.scd tasks completed.
::

## On macOS:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help type cmd-d.
thisProcess.nowExecutingPath:
- in main_function.scd:      /Users/AccountFolder/main_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
  - using .loadRelative:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
  - using .loadPaths:
    - in test_function.scd:  /Users/AccountFolder/test_function.scd
    - in its testFunction:   /Users/AccountFolder/main_function.scd
Test completed; main_function.scd tasks completed.
::
## On Windows:
teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.14.0-dev. *** For help press F1.
thisProcess.nowExecutingPath:
- in main_function.scd:      C:\Users\AccountFolder\main_function.scd
- in the loaded test_function.scd and its functions:
  - using .load:
    - in test_function.scd:  C:\Users\AccountFolder\test_function.scd
    - in its testFunction:   C:\Users\AccountFolder\main_function.scd
  - using .loadRelative:
    - in test_function.scd:  C:\Users\AccountFolder\test_function.scd
    - in its testFunction:   C:\Users\AccountFolder\main_function.scd
  - using .loadPaths:
    - in test_function.scd:  C:\Users\AccountFolder\test_function.scd
    - in its testFunction:   C:\Users\AccountFolder\main_function.scd
Test completed; main_function.scd tasks completed.
::
::
## Quit sclang and return to prompt:

See the test step link::#3. Quit sclang and return to prompt:: in link::#In a locally saved scd file#In a locally saved scd file of the .nowExecutingPath example::.
::
::
::

subsubsection:: With CmdPeriod, ServerBoot and ServerTree


To get a proper path when using with link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree::, link::#-nowExecutingPath:: should be locate outside of their function. When used within link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree::, it will most likely return teletype::nil::. Only on MacOS, if startp.scd exists, sclang will return startp.scd when the interpreter boots. However, if the interpreter is restarted, sclang will return teletype::nil::.

warning::
Each code should be copied and pasted into an SCD file that already exists in a folder.
::
definitionlist::
## link::Classes/CmdPeriod::||
code::
(
var path = thisProcess.nowExecutingPath;

f = {
	("CmdPeriod’s thisProcess.nowExecutingPath:" + path).postln
};

CmdPeriod.add(f);
)
::

To remove this:

code::
CmdPeriod.remove(f);
::

## link::Classes/ServerBoot::||
code::
(
var path = thisProcess.nowExecutingPath;

g = {
	("ServerBoot’s thisProcess.nowExecutingPath:" + path).postln
};

ServerBoot.add(g);

s.reboot
)
::

To remove this:

code::
ServerBoot.remove(g);
::

## link::Classes/ServerTree::||
code::
(
var path = thisProcess.nowExecutingPath;

h = {
	("ServerTree’s thisProcess.nowExecutingPath:" + path).postln
};

ServerTree.add(h);
)
::

To remove this:

code::
ServerTree.remove(h);
::
::

subsubsection:: In Routine and Task

The following examples return the full path of the SCD file where the evaluated code block is located.

warning::
Each code should be copied and pasted into an SCD file that already exists in a folder.
::

definitionlist::
## link::Classes/Routine#-play::||
code::
(
Routine {
	var path = thisProcess.nowExecutingPath;
	("- thisProcess.nowExecutingPath in path Routine:" + path).postln
}.play;

r {
	var path = thisProcess.nowExecutingPath;
	("- thisProcess.nowExecutingPath in path r:      " + path).postln
}.play
)
::
## link::Classes/Function#-fork::||
code::
(
fork {
	var path = thisProcess.nowExecutingPath;
	("- fork's thisProcess.nowExecutingPath:" + path).postln
}
)
::
## link::Classes/Server#-waitForBoot::||
code::
(
s.waitForBoot {
	var path = thisProcess.nowExecutingPath;
	("- .waitForBoot's thisProcess.nowExecutingPath:" + path).postln
}
)
::
## link::Classes/Server#-doWhenBooted::||
code::
(
s.doWhenBooted {
	var path = thisProcess.nowExecutingPath;
	("- .doWhenBooted's thisProcess.nowExecutingPath:" + path).postln
};
s.reboot;
)
::
## link::Classes/Task::||
code::
(
Task {
	var path = thisProcess.nowExecutingPath;
	("- Task's thisProcess.nowExecutingPath:" + path).postln
}.start;

Task {
	var path = thisProcess.nowExecutingPath;
	("- Task's thisProcess.nowExecutingPath:" + path).postln
}.play
)
::
::
