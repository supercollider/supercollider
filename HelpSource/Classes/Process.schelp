class::Process
categories::Core>Kernel
summary:: Runtime environment for the virtual machine and interpreter.

description::
A Process is the runtime environment for the virtual machine and interpreter.
It has a subclass named link::Classes/Main:: which is where you should override the methods
of Process. There are two methods of interest. One is named code::startup:: and is
called after the class library has been compiled. The other is named code::run:: and
is called when the user chooses the Run menu command.

classMethods::

method::tailCallOptimize
Get or set tail call optimization. The default is on. Setting this to code::false:: can help with debugging by including intermediate levels in an error backtrace.

instanceMethods::

method::nowExecutingPath

Usage: code::thisProcess.nowExecutingPath::

Returns the full path to the file containing the code that is currently executing emphasis::interactively:: in the interpreter. Usually this is the current document. If the code block executes another file on disk, using link::Classes/String#-load:: or link::Classes/String#-loadPaths::, teletype::nowExecutingPath:: will be the location of the executed file.

teletype::nowExecutingPath:: is valid only for interactive code, i.e., code files with a teletype::.scd:: extension. It does not apply to class definitions (teletype::.sc::). For that, use code::thisMethod.filenameSymbol:: or code::this.class.filenameSymbol::.

The method is supported in various environments, including the SuperCollider IDE, Neovim (SCNvim), Emacs (scel), VSCode/VSCodium, and the command line interface (CLI). In unsupported editors, it will return code::nil::.

See link::#examples#Examples:: for various uses of code::thisProcess.nowExecutingPath:: with link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree::, link::Classes/Routine:: and link::Classes/Task::.

WARNING:: teletype::nowExecutingPath:: has a corresponding setter method, teletype::nowExecutingPath_::, for internal use only by the interpreter. Do not call the setter method!::

method::startup

called after the class library has been compiled. Override this in class link::Classes/Main:: to do whatever you want.

method::run

called when the user chooses the Run menu command. Override this in class link::Classes/Main:: to do whatever you want.

method::mainThread

The top-level link::Classes/Thread::, i.e the link::Classes/Thread#-parent#parent:: of all
other Threads. This instance of Thread always exists and is created with the Process when
SuperCollider starts.

discussion::

All SuperCollider code initially runs in the context of the main Thread:

list::
## Code evaluated in code editor
## Code evaluated on command line
## Tasks scheduled on any link::Classes/Clock::
## Functions evaluated in response to incoming OSC and MIDI messages
::

This means that link::Classes/Thread#.thisThread#thisThread:: will always initially point
to the main Thread. However, when some code starts a link::Classes/Routine::, the Routine
becomes the current Thread, with the main Thread as its parent.

examples::

strong::Example 1.:: Comparison of the path of the evaluated code block in a saved SCD, the loaded SCD and the function in the loaded SCD:

table::
##

If a code ("fileMain.scd" in the example code below) executes another file on disk ("fileForLoad.scd" in the example code below) using link::Classes/String#-load:: or link::Classes/String#-loadPaths::, teletype::thisProcess.nowExecutingPath:: will be the location of the executed file ("fileForLoad.scd" in the example code below). If a function containing thisProcess.nowExecutingPath is called (the function defined in "fileForLoad.scd" in the example code below), teletype::thisProcess.nowExecutingPath:: will return the path of the document containing the function call ("fileMain.scd" in the example code below).

table::
## strong::Steps:::

numberedlist::

## Preparation:

numberedlist::
## Create an SCD file called fileMain.scd in your home folder using the following block of code:
code::
(
("thisProcess.nowExecutingPath:").postln;
("	in fileMain.scd:                       " + thisProcess.nowExecutingPath).postln;
~test = (thisProcess.nowExecutingPath.dirname +/+ "fileForLoad.scd");
~test.load.testFunction;
'fileMain.scd tasks finished'.postln;
)
::
## Create an SCD file called fileForLoad.scd in your home folder using the following block of code:
code::
("	in fileForLoad.scd:                    " + thisProcess.nowExecutingPath).postln;
(
testFunction: {
	("	in the testFunction in fileForLoad.scd:" + thisProcess.nowExecutingPath).postln
}
)
::
::

## Execute SCD file:

list::
## In SC-IDE or other editors:

numberedlist::
## Create a new SCD file (you do not need to save it for this step), then evaluate the following code:

code::
"~/fileMain.scd".standardizePath.openOS;
// Note:
// - .openDocument only works in SC-IDE.
// - .openOS will work in other editors and
//   the system default application will open the SCD file.
::

## Post window returns:

teletype::
-> /Users/_Your_Account_Folder_/fileMain.scd
thisProcess.nowExecutingPath:
	in fileMain.scd:                        /Users/_Your_Account_Folder_/fileMain.scd
	in fileForLoad.scd:                     /Users/_Your_Account_Folder_/fileForLoad.scd
	in the testFunction in fileForLoad.scd: /Users/_Your_Account_Folder_/fileMain.scd
fileMain.scd tasks finished
-> fileMain.scd tasks finished
::
::

## In command line interface (CLI):

code::
// Linux:
sclang '/home/_Your_Account_Folder_/fileMain.scd'

// macOS (/Applications/SuperCollider.app might be changed to properly):
/Applications/SuperCollider.app/Contents/MacOS/sclang ~/fileMain.scd

// Windows (C:\Program Files\SuperCollider_dev\ should be changed to properly):
"C:\Program Files\SuperCollider_dev\sclang.exe" %userprofile%\fileMain.scd
::

sclang returns to the terminal window (command prompt window on Windows):

teletype::
... (messages are truncated) ...
*** Welcome to SuperCollider 3.13.0. *** For help press F1.
thisProcess.nowExecutingPath:
        in fileMain.scd:                        C:\Users\_Your_Account_Folder_\fileMain.scd
        in fileForLoad.scd:                     C:\Users\_Your_Account_Folder_\fileForLoad.scd
        in the testFunction in fileForLoad.scd: C:\Users\_Your_Account_Folder_\fileMain.scd
fileMain.scd tasks finished
::
::
::
::
::

strong::Example 2.:: link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree:::

table::
##
warning::The retuned path depends on the existence of the startup.scd file when the interpreter boots.::

When used in link::Classes/CmdPeriod::, link::Classes/ServerBoot:: and link::Classes/ServerTree::, it will return teletype::nil:: unless startup.scd exists.

code::
(
CmdPeriod.add {
	var path = thisProcess.nowExecutingPath;
	("- CmdPeriod’s thisProcess.nowExecutingPath:" + path).postln
};
ServerBoot.add {
	var path = thisProcess.nowExecutingPath;
	("- ServerBoot’s thisProcess.nowExecutingPath:" + path).postln
};
ServerTree.add {
	var path = thisProcess.nowExecutingPath;
	("- ServerTree’s thisProcess.nowExecutingPath:" + path).postln
};
s.reboot
)
::

list::
## If startup.scd exists:

list::
## When evaluating the code above, post window returns
teletype::
... (messages are truncated) ...
localhost: keeping clientID (0) as confirmed by server process.
- ServerBoot’s thisProcess.nowExecutingPath: /Users/_Your_Account_Folder_/Library/Application Support/SuperCollider/startup.scd
- ServerTree’s thisProcess.nowExecutingPath: /Users/_Your_Account_Folder_/Library/Application Support/SuperCollider/startup.scd
Shared memory server interface initialized
::

## When pressing CMD/control + . after evaluating the code above:

teletype::
- CmdPeriod’s thisProcess.nowExecutingPath: /Users/_Your_Account_Folder_/Library/Application Support/SuperCollider/startup.scd
- ServerTree’s thisProcess.nowExecutingPath: /Users/_Your_Account_Folder_/Library/Application Support/SuperCollider/startup.scd
::
::
## If there is no startup.scd:

list::
## When evaluating the code above, post window returns
teletype::
... (messages are truncated) ...
localhost: keeping clientID (0) as confirmed by server process.
- ServerBoot’s thisProcess.nowExecutingPath: nil
- ServerTree’s thisProcess.nowExecutingPath: nil
Shared memory server interface initialized
::

## When pressing CMD/control + . after evaluating the code above:

teletype::
- CmdPeriod’s thisProcess.nowExecutingPath: nil
- ServerTree’s thisProcess.nowExecutingPath: nil
::
::
::
::

strong::Example 3.:: In link::Classes/Routine:: and link::Classes/Task:::

table::
## The following examples return the full path of the SCD file where the evaluated code block is located.
warning::Each code should be copied and pasted into an SCD file that has already been saved in a folder.::
list::
## link::Classes/Routine#play:::
code::
(
Routine {
	var path = thisProcess.nowExecutingPath;
	("- thisProcess.nowExecutingPath in path Routine:" + path).postln
}.play;

r {
	var path = thisProcess.nowExecutingPath;
	("- thisProcess.nowExecutingPath in path r:      " + path).postln
}.play
)
::
## link::Classes/Function#fork:::
code::
(
fork {
	var path = thisProcess.nowExecutingPath;
	("- fork's thisProcess.nowExecutingPath:" + path).postln
}
)
::
## link::Classes/Server#waitForBoot:::
code::
(
s.waitForBoot {
	var path = thisProcess.nowExecutingPath;
	("- .waitForBoot's thisProcess.nowExecutingPath:" + path).postln
}
)
::
## link::Classes/Server#doWhenBooted:::
code::
(
s.doWhenBooted {
	var path = thisProcess.nowExecutingPath;
	("- .doWhenBooted's thisProcess.nowExecutingPath:" + path).postln
};
s.reboot;
)
::
## link::Classes/Task:::
code::
(
Task {
	var path = thisProcess.nowExecutingPath;
	("- Task's thisProcess.nowExecutingPath:" + path).postln
}.start;

Task {
	var path = thisProcess.nowExecutingPath;
	("- Task's thisProcess.nowExecutingPath:" + path).postln
}.play
)
::
::
::
