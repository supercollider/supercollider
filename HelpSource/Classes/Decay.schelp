class:: Decay
summary:: Exponential decay
related:: Classes/Decay2, Classes/Integrator
categories:: UGens>Filters>Linear, UGens>Envelopes

Description::

An integrating filter which, if given an impulse, will produce an exponentially decaying envelope.
code::Decay:: is essentially the same as link::Classes/Integrator::, but instead of specifying the integration coefficient directly, it is calculated from the strong::decayTime::â€”the time required for input signal to attentuate 60 dB, or decay to 99.9% of its value.

classmethods::

method::ar, kr

argument::in
The input signal.

argument::decayTime
The time it takes for the input signal to decay 60 dB.

argument::mul
The output will be multiplied by this value.

argument::add
This value will be added to the output.

Examples::

code::
// Plot the exponentially decaying envelope
(
var t60 = 0.1; // decayTime
plot({ Decay.ar(Impulse.ar(0), t60) }, t60);
)
::

code::
// Used as an evelope generator
(
play({
    Decay.ar(
        in: Impulse.ar(XLine.kr(5,50,10), 0.25),
        decayTime: 0.2,
        mul: FSinOsc.ar(300)
    )
})
)
::

As can be heard in the previous example, when code::Decay:: is used as a modulator, its immediate onset can lead to discontinuities and audible clicks. This can be seen in the waveform:

code::
(
plot({
    Decay.ar(
        in: Impulse.ar(50),
        decayTime: 0.015,
        mul: FSinOsc.ar(370)
    )
}, 0.1, bounds: Rect(50,50,1200,400))
)
::

link::Classes/Decay2:: allows for onset control, as shown below:

code::
(
var t60, riseScale, riseFac, normFac;

t60 = 0.3; // decay time

// Onset control and normalization factor for Decay2
// (See Decay2 Help doc for more info)
riseScale = 0.3;
riseFac = riseScale / (2 - riseScale);
normFac = riseFac.pow(riseFac / (riseFac - 1)) / (1 - riseFac);

// Compare Decay (blue) and Decay2 (red)
plot({
    var imp = Impulse.ar(0);
    [
        Decay.ar(imp, t60),
        Decay2.ar(imp,
            attackTime: t60 * riseFac,
            decayTime: t60,
            mul: normFac
        )
    ]
}, duration: t60/2)
.plotColor_([Color.blue, Color.red])
.superpose_(true)
)
::
