class:: SoundIn
summary:: Read audio from hardware inputs
categories:: UGens>InOut
related:: Classes/In, Classes/ServerOptions

description::
SoundIn is a convenience UGen to read audio from the input of your computer or soundcard. It is a wrapper link::Classes/UGen:: based on link::Classes/In::, which offsets the index such that 0 will always correspond to the first input regardless of the number of inputs present.

note::
On Intel based Macs, reading the built-in microphone or input may require creating an aggregate device in AudioMIDI Setup.

code::"open -a 'Audio MIDI Setup'".unixCmd; // execute this to launch it::
::

classmethods::
method:: ar

argument:: bus
the channel (or array of channels) to read in. These start at 0, which will correspond to the first audio input.

argument:: mul

argument:: add

examples::
code::
// world's most expensive patchcord (use headphones to avoid feedback)
{ SoundIn.ar(0) }.play;

// stereo version
{ SoundIn.ar([0, 1]) }.play;

// scope input; silent output
{ Amplitude.kr(SoundIn.ar(0)); }.scope;

(

/////////////////////////////////////////
/////////////////////////////////////////

/*

RM octaver

inSignal is RingModulated by a sinusoidal tone with half frequency.
The resulting spectrum is given by all the components of inSignal with
half freqs.
This means that the new spectrum is a one 8ve below version of the input signal's one,
with only odd partials.
As a consequence, if inSignal is added again, even partials are
recovered.

See:
Miller Puckette, The Theory and Technique of Electronic Music, p. 126
http://crca.ucsd.edu/~msp/techniques/latest/book.pdf
http://crca.ucsd.edu/~msp/techniques/latest/book-html/node77.html#sect5.ringmod

andreavalle

*/

s = Server.local.waitForBoot({
	SynthDef.new(\RmOctaver, { var in, out = 0, freq, hasFreq ;
		in = SoundIn.ar(0) ;
		# freq, hasFreq = Pitch.kr(in) ;
		Out.ar(out, SinOsc.ar(freq: freq*0.5)*in+in);
	}).send(s) ;
})
)

Synth.new(\RmOctaver) ;

/////////////////////////////////////////
/////////////////////////////////////////

::
