class:: PV_Copy
summary:: Copy an FFT buffer
categories:: UGens>FFT

description::

Copies the spectral frame in code::bufferA:: to code::bufferB::. This allows for parallel processing of spectral data without the need for multiple FFT UGens. Further it allows to extract data at a given point in the FFT chain e.g. for monitoring purposes. 

note::As of SC 3.7 instances of PV_Copy are added automatically where necessary for parallel processing. Please see link::Guides/FFT-Overview:: for the current implementation. 

This document is provided for legacy purposes only. Existing code explicitly using PV_Copy should continue to work.::

classmethods::
method:: new
argument:: bufferA
source buffer.
argument:: bufferB
destination buffer.

note:: 
code::bufferA:: and code::bufferB:: must be the same size.
::

examples::
code::

//proof of concept - PV_Copy creates a duplicate
(
x = { var inA, chainA, inB, chainB, chain;
	inA = LFClipNoise.ar(100);
	chainA = FFT(LocalBuf(1024), inA);
	chainB = PV_Copy(chainA, LocalBuf(1024));

	IFFT(chainA) - IFFT(chainB); // cancels to zero so silent!
}.play(s);
)
x.free;


(
x = { var in, chain, chainB;
	in = WhiteNoise.ar(0.8);
	chain = FFT(LocalBuf(2048), in);
	chainB = PV_Copy(chain,LocalBuf(2048));  //copies the FFT analysis into a new buffer
	chain = PV_RandComb(chain, 0.95, Impulse.kr(0.4));
	chainB = PV_BrickWall(chainB, SinOsc.kr(0.2));

	[IFFT(chain), IFFT(chainB)*0.1];
}.play;
)
x.free;


//// Spectral 'pan'
(
x = { var in, chain, chainB, pan;
	in = BrownNoise.ar;
	chain = FFT(LocalBuf(2048), in);
	chainB = PV_Copy(chain, LocalBuf(2048));
	pan = MouseX.kr(0.001, 1.001, 'exponential') - 0.001;
	chain = PV_BrickWall(chain, pan);
	chainB = PV_BrickWall(chainB, -1 + pan);

	0.1 * IFFT([chain, chainB]);
}.play(s);
)
x.free;
::

