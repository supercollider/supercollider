class:: LatoocarfianC
summary:: Latoocarfian chaotic generator
categories:: UGens>Generators>Chaotic
related:: Classes/LatoocarfianN, Classes/LatoocarfianL

description::
A cubic-interpolating sound generator based on a function given in Clifford Pickover's book Chaos In Wonderland, pg 26. The function is:

teletype::
	x(n+1) = sin(b * y(n)) + c * sin(b * x(n))
	y(n+1) = sin(a * x(n)) + d * sin(a * y(n))
::

According to Pickover, parameters code::a:: and code::b:: should be in the range from -3 to +3, and parameters code::c:: and code::d:: should be in the range from 0.5 to 1.5. The function can, depending on the parameters given, give continuous chaotic output, converge to a single value (silence) or oscillate in a cycle (tone).

sclang code translation:

code::
(
var a = 1, b = 3, c = 0.5, d = 0.5, xi = 0.5, yi = 0.5, size = 64;
plot(size.collect { var x = xi;
xi = sin(b * yi) + (c * sin(b * xi));
yi = sin(a * x) + (d * sin(a * yi));
xi
});
)
::

note::This UGen is experimental and not optimized currently, so is rather hoggish of CPU.::

classmethods::
method:: ar
argument:: freq
Iteration frequency in Hertz
argument:: a
Equation variable
argument:: b
Equation variable
argument:: c
Equation variable
argument:: d
Equation variable
argument:: xi
Initial value of x
argument:: yi
Initial value of y

examples::
code::
// default initial params
{ LatoocarfianC.ar(MouseX.kr(20, SampleRate.ir)) * 0.2 }.play(s);
//you can also do
{ ChaosGen.allSubclasses.choose.ar(MouseX.kr(20, SampleRate.ir)) * 0.2 }.play(s);
// and
~lce1 = { ChaosGen.allSubclasses.choose.ar(MouseX.kr(20, SampleRate.ir)) * 0.2 };
::

code::
// randomly modulate all params
(
{ LatoocarfianC.ar(
	SampleRate.ir/4,
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,0.5,1.5),
	LFNoise2.kr(2,0.5,1.5)
) * 0.2 }.play(s);
)

// you can also do
(
{ ChaosGen.allSubclasses.choose.ar(
	SampleRate.ir/4,
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,0.5,1.5),
	LFNoise2.kr(2,0.5,1.5)
) * 0.2 }.play(s);
)

// or
(
~chaosGen = (
{ ChaosGen.allSubclasses.choose.ar(
	SampleRate.ir/4,
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,1.5,1.5),
	LFNoise2.kr(2,0.5,1.5),
	LFNoise2.kr(2,0.5,1.5)
) * 0.2 };
)
)
::

code::
// you can then do
(~thing.free;~thing={[~chaosGen, ~lce1].choose}.play;)
::
