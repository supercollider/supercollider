title:: HIDElement
summary:: a class describing an element of an HID device
categories:: External Control>HID
related:: Classes/HID, Guides/Working_with_HID, Classes/HIDCollection, Classes/HIDUsage


description::


An HIDElement describes an element, or a control, of an HID device.
These are created for the device automatically when you open a device. The only interaction a user will have with elements are to query the properties of the element (with code::.postElement::), query the code::value:: or code::rawValue::, or set the value, set the code::repeat:: property or set an code::action:: to be performed when new data comes in.


classmethods::


private:: new


instancemethods::


private:: setValueFromInput, mapValueFromRaw, initElementRepeat


method::action

sets/gets the action to be performed upon receiving element data. The function will be passed the following arguments: the value (mapped between 0 and 1) and the raw value.


method::value

sets/gets the value of the element. Setting only makes sense for an output element.

argument::val
the raw value to send to the device


method::repeat

by default element's data from the device is not updated unless the data is changing. However, for certain elements, you may want to receive updates even if the data is not changing, e.g. for scrollwheel of mice.

argument::rp
a Boolean to turn repeat on or off


method::rawValue

the raw value of the element.


method::logicalValue

the logical value of the element. In principal the same as value.


method::physicalValue

the physical value of the element. This can be calculated from the raw value and the device's specification for conversion: the physical minimum, the physical maximum, the unit and unit exponent. How the conversion works is described in the USB HID standard documentation. 

note::
The conversion is not yet implemented in the backend.
::


method::arrayValue

the array value of the element. This value is only of importance for those elements which can represent multiple usages, such as from keyboards. In that case it indicates the key that is pressed, and by adding this number to the usage of the element you know which function the key has.

note::
Values from a keyboard are parsed in two ways: first as the element how they come in, second just with the usage and the value (on or off) as the data comes in.
::


subsection:: Properties of the element


method::postElement

posts a human readable description of the element to the post window.


method::id

the index of this element. This index may vary between operating systems.


method::device

gets the device to which this element belongs.

note::
Do not set this as a user!
::

returns::

an instance of HID


method::collection

gets the collection index to which this element belongs.


method::usage

retrieves the usage index of this collection.

returns::

a Number - the usage index of this element


method::usagePage

retrieves the usage page index of this element.

returns::

a Number- the usage page index


method::usageName

retrieves the usage name of this element. The name is looked up from the standardized HID usage tables using the usage page index.

returns::

a String - the usage name


method::pageName

retrieves the page name of this element. The name is looked up from the standardized HID usage tables using the usage page index.

returns::

a String - the usage page name


method::type

a byte describing the type of element.

returns::

a number describing the type of element.


method::typeSpec

the type of element, decoded from the type byte.

returns::

an Array with Strings describing the type of element.


method::ioType

type of the element, input (1), output (2) or feature (3)

returns::

a Number indicating the ioType


method::iotypeName

type of the element, one of code::\input::, code::\output::, or code::\feature::

returns::

a Symbol indicating the type


method::logicalMin

minimum value of the range that is to be expected. This is reported by the device. The element's raw value is mapped between the logical minimum and maximum to obtain the element's value.


method::logicalMax

maximum value of the range that is to be expected. This is reported by the device. The element's raw value is mapped between the logical minimum and maximum to obtain the element's value.


method::physicalMin

minimum value of the range that is to be expected in a physical sense. This is reported by the device. For example, for a hat switch the physical range may be the direction in degrees in which the hat switch is pointing.


method::physicalMax

maximum value of the range that is to be expected in a physical sense. This is reported by the device. For example, for a hat switch the physical range may be the direction in degrees in which the hat switch is pointing.


method::unit

index for the unit of the physical range.


method::unitExponent

the exponent for the physical range.


method::usageMin

minimum value of the usage range that is to be expected. This is reported by the device. This is only relevant for elements that report array values.


method::usageMax

maximum value of the usage range that is to be expected. This is reported by the device. This is only relevant for elements that report array values.


method::getUsages

this method is used to get a dictionary of all the usages that this element produces. In most cases an element has only one usage, but in the case of an array-element it will have several uses (for a keyboard, an element represents one keypress, but they can be various different keys).


method::reportID

the report ID with which this element receives the data. This is a low level device specific identifier


method::reportSize

the report size in bits with which this element receives the data. This is a low level device specific identifier


method::reportIndex

the report index with which this element receives the data. This is a low level device specific identifier


examples::

code::
HID.findAvailable; // find available devices
HID.postAvailable; // post available devices
~myhid = HID.open(1103, 53251); // open a device
~myhid.postElements; // post available elements
// Set actions for the second element:
~myhid.elements[1].action = { |...args| args.postln };
::
