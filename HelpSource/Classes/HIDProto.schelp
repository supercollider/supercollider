title:: HIDProto
categories:: External Control>HID
summary:: Prototype HID device to match with HIDFunc
related:: Classes/HIDFunc, Classes/HIDdef, Classes/HIDElementProto, Classes/HID, Classes/HIDInfo, Guides/Working_with_HID

description::

Human input devices can be used as controllers for making music.
This class can be used in conjunction with link::Classes/HIDFunc:: or link::Classes/HIDdef:: to match incoming messages with a particular link::Classes/HID:: device.

HIDProto has all the variables that specify an HID device.
The more of these variables you specify, the more need to be matched when filtering the incoming HID data.

classmethods::

method:: new

Create a new instance of HIDProto.

method:: newType

Create a new instance of HIDProto based on usage and usagePage of the device.

argument:: uName

Name of the usage id

argument:: pName

Name of the usage page id

returns::
  
an HIDProto

method:: newProduct

Create a new instance of HIDProto based on the product information.

argument:: pName

The product name to match.

argument:: vName

The vendor name to match.

returns::
 
an HIDProto

method:: newFromDict

Create a new instance of HIDProto based on an IdentityDictionary with a set of parameters to match.

argument:: dict

An IdentityDictionary with a set of parameters to match.
The keys in the dictionary should be one of the instance variables of HIDProto.

returns::
 
an HIDProto

instancemethods::

private:: init

subsection:: Instance variables that can be used to match a device

method:: id

The device id that should be matched.
This is dependent on the order of opening HID devices.

method:: productName

The product name to match (see also link::Classes/HIDInfo::).

method:: vendorName

The vendor name to match (see also link::Classes/HIDInfo::).

method:: productID

The product id to match (see also link::Classes/HIDInfo::).

method:: vendorID

The vendor id to match (see also link::Classes/HIDInfo::).

method:: interfaceNumber

The interface number to match (see also link::Classes/HIDInfo::).

method:: releaseNumber

The release number to match (see also link::Classes/HIDInfo::).

method:: serialNumber

The serial number to match (see also link::Classes/HIDInfo::).

method:: path

The path to match (see also link::Classes/HIDInfo::).

method:: usage

The usage ID of the device to match (see also link::Classes/HIDInfo::).

method:: usagePage

The usage page ID of the device to match (see also link::Classes/HIDInfo::).

method:: usageName

The usage name of the device to match (see also link::Classes/HIDInfo::).

method:: pageName

The page name of the device to match (see also link::Classes/HIDInfo::).

subsection:: Methods to match

method:: matches

Match the argument with the template.

argument:: hid

An instance of HID.

returns::
 
a Boolean indicating whether the incoming HID matches the template

method:: shouldMatch

The variables that should be matched when filtering

returns::
 
a Set with variable names.

subsection:: Methods to add matching parameters

method:: addTypeMatch

Add a match for usage name and usage page name of the device.

argument:: uName

The usage name to match

argument:: pName

The page name to match

method:: addProductMatch

Add a match for product name and vendor name of the device.

argument:: pName

The product name to match

argument:: vName

The vendor name to match

method:: addDictionaryMatch

Add an IdentityDictionary with a set of parameters to match.
The keys in the dictionary should be one of the instance variables of HIDProto.

argument:: dict

An IdentityDictionary with a set of parameters to match.

examples::

code::
b = HIDProto.newFromDict((path: "/dev/hidraw2"));

a = HIDFunc.usage({ |...args| args.postln }, \X, deviceInfo: b);
a.free

b = HIDProto.newType(\Mouse, \GenericDesktop);

a = HIDFunc.usage({ |...args| args.postln }, \X, deviceInfo: b);
a.free;

b = HIDProto.newProduct("USB Mouse", "Logitech");

a = HIDFunc.usage({ |...args| args.postln }, \X, deviceInfo: b);
a.free;
::
