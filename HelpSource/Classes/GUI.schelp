title:: gui
categories:: GUI, Common methods
summary:: Create a Graphical User Interface
related:: Classes/ObjectGui

method:: gui
The code::gui:: message is of common use in SC. It originated in the crucial library where it is used to create an link::Classes/ObjectGui:: or an ObjectGui subclass as part of a Model View Controller system.

The implementation and accepted arguments to .gui varies.  This helpfile explains the default behavior of Object and hence of all Object subclasses that haven't implemented their own .gui method. This helpfile and the implementation come from the original crucial library.

Any object can create a GUI, albeit a very simple one that just displays the object's string representation on a view:

code::
nil.gui;
"2".gui;
2.gui;
[1,nil,"tree"].gui;
::

This means that any object can be .gui(ed) without knowing exactly what the object is.  This is identical in purpose to .asString which is used for posting an object's representation to the post window.


section:: Argument conventions

The convention as stated in crucial library states that the .gui method should accept parent and bounds as its arguments in the same manner as a View does.

code::
thing.gui(parent,bounds);
// or with optional additional arguments:
things.gui(parent,bounds,arg1,arg2,...argN)
::

This convention hasn't been followed by many who have written their own .gui methods (perhaps calling it that rather than .makeView or .makeWindow because they liked that .gui was nice and short to type)

This is the default implementation for Object, and is thus the implementation for all subclasses that have not written an explicit .gui method

definitionlist::
## parent ||
list::
##  a Window,
##  a FlowView
##  CompositeVIew
##  HLayoutView
##  VLayoutView
##  nil (which will create a Window with a FlowView on it)
::
## bounds ||
list::
## anything that responds to asRect:
## Nil - the gui will use its own default size
## Point - width @ height
::
::

Usually the bounds are not specified.  The object's gui class first adds a container, lays its things inside that container and then shrinks the container to fit it. If you do specify a bounds, the container will be set to exactly that size.

Add a view to a parent view (window)
code::
(
	f = FlowView.new;
	nil.gui(f);
	"2".gui(f);
	2.gui(f);
)

/////////////////////////////////////////////
/////////////////////////////////////////////

/**
 * Two Auditory Scene Analysis (ASA) experiences
 * as proposed by Albert Bregman, Auditory Scene Analysis, MIT Press, 1990
 *
 * 1. Streaming: if rate of presentation and
 * frequency gap between the two series of sinusoidal tones are varied,
 * one or two stream(s) appear(s).
 *
 * 2. Miniature ASA Problem:
 * Three short sinusoidal segments.
 * Varying frequency distance of A and C with respect to B, and attack time of C, two groupings are possible:
 * (A-B)/C: a two note melody with a low tone (parallel)
 * A-(B+C): a simple tone and a complex tone (sequence)
 *
 * (andrea valle)
 */

// start server
s.boot;

(
// Streaming
var r;
var rateSlide, deltaSlide, volumeSlide;
var pauseButton1, pauseButton2, recButton;
var volume1 = 1.0, volume2 = 1.0;
var base = 500;
var durVar1 = [0.05, 0.3, 0.15, 0.5], durVar2 = [0.5, 0.05, 0.3, 0.15];
var levels1 = [0, 1, 1, 0, 0], levels2 = [0, 0, 1, 1, 0];
var synth1, synth2;
var ezFunc = { |ez| ez.() };
var rateSpec = ControlSpec(0.05, 2.0, \exp, 1e-3, 0.01);
var deltaSpec = ControlSpec(0, 1000, \lin, 1, 1);
var volumeSpec = ControlSpec(0.0, 1.0, \lin, 0.1, 0.1);


// a SynthDef
SynthDef(\asaSine1, { |out=0, freq=440, dur=1.0, levels=#[0, 1, 1, 0, 0], durVar=#[1, 1, 1, 1], mul=0.5|
	var env, snd;

	env = Env.new(levels, dur * durVar, 'welch');
	snd = SinOsc.ar(freq, mul: mul);

	Out.ar(out, snd * EnvGen.kr(env));
}).add;

// a Routine
r = Routine {
	inf.do { |i|
		var k;
		var arr1 = [0, 0, 1, 0, 2],
		arr2 = [1, 0, 3, 1, 2];

		// 1st Synth
		synth1 = Synth.new(\asaSine1, [\levels, levels1, \durVar, durVar1]);
		k = arr1[i.mod(5)] * 100 + base;
		synth1.set(\freq, k);
		synth1.set(\dur, rateSlide.value);
		synth1.set(\mul, volumeSlide.value * volume1);

		// 2nd Synth
		synth2 = Synth(\asaSine1, [\levels, levels2, \durVar, durVar2]);
		k = arr2[i.mod(5)] * 100 + base + deltaSlide.value;
		synth2.set(\freq, k);
		synth2.set(\dur, rateSlide.value);
		synth2.set(\mul, volumeSlide.value * volume2);

		// wait and free the Synths
		rateSlide.value.wait;
		[synth1, synth2].do(_.free);
	}
};

// GUI stuff
w = Window("ASA: Streaming", Rect(20, 400, 440, 150)).front;
w.view.decorator = FlowLayout(w.view.bounds);

rateSlide = EZSlider(w, 400@20, "DurEach", rateSpec, ezFunc, 0.1);
deltaSlide = EZSlider(w, 400@20, "Delta", deltaSpec, ezFunc, 500);
volumeSlide = EZSlider(w, 400@20, "Volume", volumeSpec, ezFunc, 0.5);

w.view.decorator.nextLine.shift(50, 20);

pauseButton1 = Button(w, 110@30);
pauseButton1.states = [
	["1 now is active", Color.black, Color.red],
	["1 now is muted", Color.white, Color.black],
];
pauseButton1.action = { |state|
	switch(state.value,
		1, { volume1 = 0; "muted 1".postln },
		0, { volume1 = 1; "activated 1".postln }
	)
};

w.view.decorator.shift(10, 0);

pauseButton2 = Button(w, 110@30);
pauseButton2.states = [
	["2 now is active", Color.black, Color.red],
	["2 now is muted", Color.white, Color.black],
];
pauseButton2.action = { |state|
	switch(state.value,
		1, { volume2 = 0; "muted 2".postln },
		0, { volume2 = 1; "activated 2".postln }
	)
};

w.onClose_({ r.stop; [synth1, synth2].do(_.free); });

SystemClock.play(r);
)

/////////////////////////////////////////////
/////////////////////////////////////////////


::


method:: guiClass

Each class can specify an associated guiClass, which is a subclass of ObjectGui.
Writing useful subclasses is the purpose of the ObjectGui system and many can be found in the crucial library.

Examples specifying guiClass:

code::
	Object-guiClass {  ^ObjectGui }
	Server-guiClass {  ^ServerGui }
	AbstractPlayer-guiClass { ^AbstractPlayerGui }
	Patch-guiClass { ^PatchGui }
::

For any class where it is appropriate, a separate gui class is implemented, usually inheriting much of its behavior from the gui class of its superclass.

see link::Classes/ObjectGui::
