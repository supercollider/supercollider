class:: EZGui
summary:: An abstract superclass for EZ widget wrappers
categories:: GUI>EZ-GUI
related:: Classes/EZListView, Classes/EZPopUpMenu, Classes/EZSlider, Classes/EZNumber, Classes/EZRanger, Classes/EZKnob

description::
Typically, users will not create instances of EZGui directly; instead, they will utilize its subclasses, which provide basic mechanisms for various EZ widget wrappers. EZGui serves as a standard for EZ GUI Classes, and new EZ Classes should subclass EZGUI to maintain a consistent user interface.

instancemethods::

subsection:: Accessing Instance Variables

method:: view
Returns the enclosing link::Classes/CompositeView::.

method:: bounds
Returns the bounds of the enclosing link::Classes/CompositeView::.

method:: label
Sets/gets it the label. Will add the label view if none was initially created.
argument:: string
An Instance of link::Classes/String::.

method:: window
Returns the window if you used the popUp window function.


subsection:: Accessing GUI options

method:: alwaysOnTop
Makes the popup window always on top, if there is one.
argument:: bool
An Instance of link::Classes/Boolean::. Default is false.

method:: visible
Sets/gets it the component views are visible.
argument:: bool
An Instance of link::Classes/Boolean::. Default is true.

method:: enabled
Sets/gets if the list is enabled.
argument:: bool
An Instance of link::Classes/Boolean::. Default is true.

method:: onClose
Sets/gets the onClose function of either code::view:: or code::window::, depending on whether the EZ view used a popup window.
argument:: func
An Instance of link::Classes/Function:: or link::Classes/FunctionList::.

method:: font
argument:: font
An instance of link::Classes/Font::.


subsection:: Subclassing

EZGui offers a standardized set of basic tools for most EZ classes. To create a new EZ class, it's recommended to subclass EZGui and override any necessary methods. However, if your class only consists of a label and a widget, overriding may not be necessary and you may only need to write the 'new' and 'init' class methods. Examples of this can be found in existing EZGui subclasses. Additionally, you may want to consider overriding the following methods:
method:: widget
Returns the active widget. Subclasses will typically refer to it or ignore it, e.g.:
code::
MyEZClass{
	myOtherMethods{}
	....
	listView{ ^widget }
}
::

method:: action
Gets/sets the action of the EZ class instance.
argument:: func
An Instance of link::Classes/Function:: or link::Classes/FunctionList::.

method:: value
Gets/sets the value of the code::widget::. Does not perform the action.
argument:: val
An integer.

method:: valueAction
Gets/sets the value of the widget. Performs do action.
argument:: val
An integer.

method:: doAction
Performs code::this.action.value(this)::.


subsection:: Internal Utilities

method:: prSubViewBounds
The method calculates the bounds of the subviews and gaps, returning an array of Rects that depends on the number of subviews. Subclasses should override this method if they contain more than one widget.

method:: prMakeView
This method is called by the 'init' function and returns 'code::[view, bounds]::'. The container can be either the enclosing Container or a pop-up window that contains the view.

method:: prSetViewParams
Some subclasses define this method, which sets the 'resize' and 'align' properties of all views based on the 'layout' state.

method:: prMakeMarginGap
This method is called in the 'init' method of all subclasses and sets the margin and gap of the 'view'. By default, it attempts to use the gap of the parent view, and defaults to '2@2' if none is found. The 'argGap' parameter can be used to override this default behavior.
