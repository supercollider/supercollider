CLASS:: Rational
summary:: Rational number
categories:: Math
related:: Classes/SimpleNumber, Classes/Float, Classes/Integer

DESCRIPTION::
A rational number. Alternative syntax: code::x %/ y::

note::
LIST::
## Operations with code::Rational:: can be one order of magnitude slower compared to link::Classes/Float::.
## code::Rational:: internally represents numerator and denominator as 64-bit link::Classes/Float::s. If you want to initialize it with a term outside the range code::-2147483648:: to code::2147483647:: you will need to force the number to be a Float by adding a decimal zero, e.g. code::-2147483649.0:: and code::2147483648.0::.
::
::

CLASSMETHODS::

method:: new
Rational also accepts Floats and Strings in its code::new:: instantiation method. This class will always reduce a rational expression to its lowest terms (e.g. code::3 %/ 2:: instead of code::6 %/ 4::).

code::
Rational(6,4)     // -> 3 %/ 2
Rational("8/4")   // -> 2 %/ 1
Rational(0.33333) // -> 1 %/ 3
::

INSTANCEMETHODS::

method:: %/
Alternative syntax for code::Rational(x,y)::
code::
5 %/ 7 == Rational(5,7) // -> true
::

method:: +
Addition
code::
Rational(3,2) + Rational(3,2) // -> 3 %/ 1
(3 %/ 2) + (3 %/ 2)           // -> 3 %/ 1
::

method:: -
Subtraction
code::
Rational(6,5) - Rational(1,3) // -> 13 %/ 15
(6 %/ 5) - (1 %/ 3)           // -> 13 %/ 15
::

method:: *
Multiplication
code::
Rational(3,7) * Rational(9,5) // -> 27 %/ 35
(3 %/ 7) * (9 %/ 5)           // -> 27 %/ 35
::

method:: /
Division
code::
Rational(5,3) / Rational(7,5) // -> 25 %/ 21
(5 %/ 3) / (7 %/ 5)           // -> 25 %/ 21
::

method:: abs
Absolute value.
code::
Rational(-5,4).abs // -> 5 %/ 4
::

method:: asFloat
As link::Classes/Float::
code::
Rational(5,7).asFloat // -> 0.71428571428571
::

method:: pow
code::
Rational(1,2).pow(2)
// same as:
(1 %/ 2) ** 2 // -> 1 %/ 4

Rational(4,5).pow(-4) // -> 625 %/ 256
::

method:: reciprocal
Reciprocal
code::
Rational(5,7).reciprocal // -> 7 %/ 5
::

method:: squared
Power of two
code::
Rational(5,7).squared // -> 25 %/ 49
::

EXAMPLES::

SUBSECTION:: Basic operations

code::
a = Rational(3, 2); // a rational number
b = 4%/5;           // another rational number

c = 1 %/ (1 + (1 %/ (1 + (1 %/ 2)))); // -> 3 %/ 5

a + b;    // -> 23 %/ 10
a - b;    // -> 7 %/ 10
a / b;    // -> 15 %/ 8
a * b;    // -> 6 %/ 5
a.pow(2); // -> 9 %/ 4

a.min(b);    // -> 4 %/ 5
b.max(2.32); // -> 2.32

// force denominator to be less than 20:
(4342%/3424).simplify(20); // -> 19 %/ 15
::


SUBSECTION:: Comparisons

code::
(7 %/ 3) >  (2 %/ 1) // -> true
(6 %/ 4) <  (3 %/ 2) // -> false
(5 %/ 5) == (4 %/ 3) // -> false
(4 %/ 6) <= (5 %/ 4) // -> true
(3 %/ 7) >= (6 %/ 5) // -> false
::

SUBSECTION:: Sorting

code::
d = [ 0 %/ 1, 3 %/ 5, -3 %/ 4, -1 %/ 5, 3 %/ 4, -2 %/ 3, 7 %/ 8, 1 %/ 1, -3 %/ 1, 1 %/ 6, 1 %/ 6, 7 %/ 8, -10 %/ 7, 0 %/ 1, 0 %/ 1, 5 %/ 3, 10 %/ 1, 3 %/ 5, 0 %/ 1, -2 %/ 7 ];

d.sort;

// sort an Array with Floats and Rationals:
e = [1, 1.5, 3 %/ 5, 8 %/ 5, 1.342];
e.sort;
::

SUBSECTION:: Continued fractions

Recursive function to calculate finite continued fractions:

code::
f = { | x | if (x == 0) { 1 %/ 1 } {  1 + Rational(1, f.(x-1)) } };
a = 20 collect: f.(_);
a.plot;
::

SUBSECTION:: Stern-Brocot numbers

In number theory, the Sternâ€“Brocot tree is an infinite complete binary tree in which the vertices correspond one-for-one to the positive rational numbers, whose values are ordered from the left to the right as in a search tree.

code::
f = { | n |
    var a = [ 1, 1 ];
    n do: { | i | a = a add: ( a[i] + a[i+1] ) add: a[i+1] };
    (a.size - 1) collect: { | i | a[i] %/ a[i+1] }
};
Post << f.(25);
::

SUBSECTION:: Conversion between Rational and Float

Conversion between link::Classes/Float:: and Rational can have different degrees of precision:

code::
pi;                       // 3.1415926535898

a = pi.asRational(99999); // 208341 %/ 66317
b = pi.asRational(999);   // 355 %/ 113
c = pi.asRational(99);    // 22 %/ 7

a.asFloat;                // 3.1415926534674
b.asFloat;                // 3.141592920354
c.asFloat;                // 3.1428571428571

pi.equalWithPrecision(a.asFloat, 0.000000001); // true
pi.equalWithPrecision(b.asFloat, 0.00001);     // true
pi.equalWithPrecision(c.asFloat, 0.01);        // true
::

SUBSECTION:: Sound Example

code::
(
var is, f, l, ds, p, ps, next_i;

s.waitForBoot {

    SynthDef(\blip, { | out, freq = 440, amp = 0.05, nharms = 10, pan = 0, gate = 1 |
        var audio = Blip.ar(freq, nharms, amp);
        var env = Linen.kr(gate, doneAction: 2);
        OffsetOut.ar(out, Pan2.ar(audio, pan, env) );
    }).add;

    is = [ 8%/15, 5%/9, 9%/16, 3%/5, 5%/8, 2%/3, 45%/64, 32%/45, 3%/4, 4%/5, 5%/6, 8%/9, 9%/10, 15%/16, 16%/15, 10%/9, 9%/8, 6%/5, 5%/4, 4%/3, 45%/32, 64%/45, 3%/2, 8%/5, 5%/3, 16%/9,9%/5, 15%/8 ];

    ds = Array.fill2D(25, 25, { | r, c | (c+11) %/ (r+13) }).flat.pow(pi) / pi;

    ps = Array.geom( 7, 4 %/ 1, 4 %/ 7 );

    f = rrand( 20, 16000 );

    l = {
        loop {
            next_i=is.choose;
            if ( f <= 200  ) { next_i = max(next_i,next_i.reciprocal) };
            if ( f >= 2600 ) { next_i = min(next_i,next_i.reciprocal) };

            " -> ".post;
            f = f * next_i.post.asFloat;
            " -> ".post;

            (
                instrument: \blip,
                freq:       f.post,
                nharms:     rrand(1,4),
                dur:        is.choose.asFloat,
                pan:        rrand(-0.75,0.75),
                amp:        rrand(0.01,0.1)
            ).play;

            " Hz\n    dur: ".post;
            (ds.choose.postln * p).asFloat.wait;

        }
    };


    fork {
        loop {
            p = ps.choose;
            Post << format("\n\n========== Tempo % ==========\n\n", p);
            rrand(3,13.0).wait;
        }
    };

    s.sync;

    { l.fork } ! 3
}
)
::
