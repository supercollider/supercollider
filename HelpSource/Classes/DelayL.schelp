title:: DelayL
summary:: simple delay line with linear interpolation
categories:: UGens>Delays
related:: Classes/DelayC, Classes/DelayN, Classes/BufDelayL


description::


Simple delay line with linear interpolation. See also
link::Classes/DelayN::  which uses no interpolation, and
link::Classes/DelayC::  which uses cubic interpolation. Cubic
interpolation is more computationally expensive than linear,
but more accurate.

The term "delay" is often used in electronic music to refer to a delay line with feedback. If you are looking for that, try CombL.


classmethods::


method::ar, kr

argument::in
the input signal.

argument::maxdelaytime
the maximum delay time in seconds. used to initialize the delay buffer size.

argument::delaytime
delay time in seconds.

argument::mul
output will be multiplied by this value.

argument::add
this value will be added to the output.


examples::

code::
(
// Dust randomly triggers Decay to create an exponential
// decay envelope for the WhiteNoise input source
{
z = Decay.ar(Dust.ar(1, 0.5), 0.3, WhiteNoise.ar);
DelayL.ar(z, 0.2, 0.2, 1, z); // input is mixed with delay via the add input
}.play
)

(
// recursive application of delay.
{
z = Decay2.ar(Dust.ar(1, 0.5), 0.01, 0.1, Saw.ar(100 + [0, 1]));
5.do { |i| z = DelayL.ar(RLPF.ar(z, Rand(100, 3000), 0.03), 1, 1 / (2**i), 1, z * 0.5) };
z
}.play
)
::
