title:: Pair
summary:: LISP-like two element cells
categories:: Collections>Ordered


description::

note::
Implementation incomplete. See link::Guides/J-concepts-in-SC:: for similar functionality.
::

Most methods are inherited from the superclasses.


classmethods::


method::new

returns new instance.


method::newFrom

converts collection (e.g. arrays of arrays) to pairs.


instancemethods::


private:: storeOn, printOn, storeArgs


method::size

returns the size when linking across.


method::depth

returns the size when linking down.


method::do

iterates over the two elements.


method::traverse

same like: link::#-depthFirstPreOrderTraversal::


method::depthFirstPreOrderTraversal

traverses the data structure first link down, then across (see link::#examples::).


method::depthFirstPostOrderTraversal

traverses the data structure from bottom up (see link::#examples::).


examples::

code::
a = Pair(Pair(Pair(1, 2), 4), Pair(5, 6));

a.size;
a.depth;
a.do { |x| x.postln };
a.traverse { |x| x.postln };
a.depthFirstPreOrderTraversal { |x| x.postln };
a.depthFirstPostOrderTraversal { |x| x.postln };


// alternative instantiations:

Pair.newFrom([1, [2, [[4, 5], 6]]]);

[1, [2, [[4, 5], 6]]].as(Pair); // equivalent.
::
