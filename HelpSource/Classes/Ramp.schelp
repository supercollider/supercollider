title:: Ramp
summary:: breaks a continuous signal into line segments
categories:: UGens>Filters>Linear
related:: Classes/Lag, Classes/VarLag, Classes/Slew


description::


Break a continuous signal into linearly interpolated segments with specific durations.

Feeding Ramp with noise is similar to link::Classes/LFNoise1::

code::
Ramp.kr(WhiteNoise.kr(1), 0.5)
::

is equal to:

code::
LFNoise1.kr(1 / 0.5)
::

For smoothing out control signals, take a look at link::Classes/Lag:: and link::Classes/VarLag::


classmethods::


method::ar, kr

argument::in
the input signal.

argument::lagTime
segment duration in seconds.

argument::mul
output will be multiplied by this value.

argument::add
this value will be added to the output.


examples::

code::
s.boot;
(
// used to lag pitch
{
	SinOsc.ar(		// sine wave
		Ramp.kr(			// lag the modulator
			LFPulse.kr(4, 0, 0.5, 50, 400),	// frequency modulator
			Line.kr(0, 1, 15)				// modulate lag time
		),
		0,	// phase
		0.3	// sine amplitude
	)
}.scope;
)

// Compare
(
var pulse;
{
	pulse = LFPulse.kr(8.772);
	Out.kr(0, [Ramp.kr(pulse, 0.025), Lag.kr(pulse, 0.025), pulse]);
}.play;
s.scope(3, bufsize: 44100, rate: \control, zoom: 40);
)
::
