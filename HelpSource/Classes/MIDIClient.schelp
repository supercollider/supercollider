title:: MIDIClient
summary:: basic access to MIDI on your computer
categories:: External Control>MIDI
related:: Classes/MIDIIn, Classes/MIDIOut, Classes/MIDIFunc, Classes/MIDIdef, Guides/MIDI, Guides/UsingMIDI, Classes/MIDIEndPoint


description::


MIDIClient is the core class that provides access to the MIDI subsystem on your computer.

See the link::Guides/UsingMIDI:: helpfile for practical considerations and techniques for using MIDI in SC.


classmethods::


private:: prInit, prDisposeClient, prInitClient, prList


method::init

initializes the MIDIClient, checks which available MIDI sources and destinations there are, and opens as many connections as desired.

argument::inports
the number of MIDI input connections to open; if code::nil:: then opens as many inports as there are MIDI sources.

argument::outports
the number of MIDI output connections to open; if code::nil:: then opens as many outports as there are MIDI destinations.

argument::verbose
a flag whether or not to post the MIDI sources and destinations that were found. The default is code::true::.


method::initialized

a flag that tells whether of not the MIDIClient has been initialized.


method::disposeClient

cleans up the MIDIClient. After using this method, you will have to reinitialize the MIDIClient before you can use MIDI again.


method::list

refreshes the list of available sources and destinations.
If you have connected a MIDI device after MIDIClient initialization, you won't see it until this method is run.


method::sources

the list of available MIDI sources, including SuperCollider's own sources.

returns::

a code::list:: of code::MIDIEndPoints::


method::externalSources

the list of available MIDI sources, excluding SuperCollider's own sources. Only on Linux the list of code::sources:: and code::externalSources:: differs.

returns::

a code::list:: of code::MIDIEndPoints::


method::destinations

the list of available MIDI destinations, including SuperCollider's own destinations.

returns::

a code::list:: of code::MIDIEndPoints::


method::externalDestinations

the list of available MIDI destinations, excluding SuperCollider's own destinations. Only on Linux the list of code::destinations:: and code::externalDestinations:: differs.

returns::

a code::list:: of code::MIDIEndPoints::


method::restart

restarts the MIDIClient.


method::myinports

the number of input ports that SuperCollider created. This is mainly useful to know on the Linux platform.


method::myoutports

the number of output ports that SuperCollider created. This is mainly useful to know on the Linux platform.


method::getClientID

linux only. This gets the client ID by which the MIDIClient is defined in the ALSA subsystem. It can be used to identify whether a port is belonging to this client or another one.

On non-linux systems, it posts a warning and returns code::nil::.


examples::


This is Linux specific code.
The function takes care of initializing MIDIClient, detects a MIDI device named SE25 and connects it to port 0 of SuperCollider.

code::
(
~connect_midi_devices = { |device, name|
	// init or refresh MIDIClient end points
	if(MIDIClient.initialized == false) {
		MIDIClient.init;
	} {
		MIDIClient.list;
	};

	MIDIClient.sources.do({ |endPoint|
		if(device.notNil and: { name.notNil } and: { endPoint.device == device } and: { endPoint.name == name }) {
			// catch exception thrown when already connected
			try {
				// connect SuperCollider out port 0 to MIDI device
				MIDIOut.connect(0, endPoint.uid);
			};
			try {
				// connect MIDI device to SuperCollider in port 0
				MIDIIn.connect(0, endPoint.uid);
			}
		}
	})

}
)

~connect_midi_devices.("SE25", "SE25 MIDI 1"); // test it now
::
