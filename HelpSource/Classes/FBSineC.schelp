class:: FBSineC
summary:: Feedback sine with chaotic phase indexing
categories:: UGens>Generators>Chaotic
related:: Classes/FBSineN, Classes/FBSineL

description::
A cubic-interpolating sound generator based on the difference equations:

teletype::
	x(n+1) = sin(im * y(n) + fb * x(n))
	y(n+1) = (a * y(n) + c) % 2pi
::

This uses a linear congruential function to drive the phase indexing of a sine wave. For code:: im = 1 ::, code:: fb = 0 ::, and code:: a = 1 :: a normal sinewave results.

sclang code translation:

code::
(
var im = 1, fb = 0.1, a = 1.1, c = 0.5, xi = 0.1, yi = 0.1, size = 64;
plot(size.collect { xi = sin((im * yi) + (fb * xi)); yi = (a * yi + c) % 2pi; xi });
)
::

classmethods::
method:: ar
argument:: freq
Iteration frequency in Hertz
argument:: im
Index multiplier amount
argument:: fb
Feedback amount
argument:: a
Phase multiplier amount
argument:: c
Phase increment amount
argument:: xi
Initial value of x
argument:: yi
Initial value of y

examples::
code::
// default initial params
{ FBSineC.ar(SampleRate.ir/4) * 0.2 }.play(s);
::

code::
// increase feedback
{ FBSineC.ar(SampleRate.ir, 1, Line.kr(0.01, 4, 10), 1, 0.1) * 0.2 }.play(s);
::

code::
// increase phase multiplier
{ FBSineC.ar(SampleRate.ir, 1, 0, XLine.kr(1, 2, 10), 0.1) * 0.2 }.play(s);
::

code::
// modulate frequency and index multiplier
{ FBSineC.ar(LFNoise2.kr(1, 1e4, 1e4), LFNoise2.kr(1, 16, 17), 1, 1.005, 0.7) * 0.2 }.play(s);
::

code::
// randomly modulate params
(
{ FBSineC.ar(
	LFNoise2.kr(1, 1e4, 1e4),
	LFNoise2.kr(1, 32, 33),
	LFNoise2.kr(1, 0.5),
	LFNoise2.kr(1, 0.05, 1.05),
	LFNoise2.kr(1, 0.3, 0.3)
) * 0.2 }.play(s);
)
::
