class:: BinaryOpStream
summary:: two streams combined by a binary operator
related:: Classes/UnaryOpStream, Classes/NAryOpStream
categories:: Streams-Patterns-Events

description::

A BinaryOpStream is created as a result of a binary math operation on a pair of Streams. It is defined to respond to strong::next:: by returning the result of the math operation on the strong::next:: value from both streams. It responds to strong::reset:: by resetting both Streams.

Examples::

code::
x = Routine { 6.do { |i| i.yield } } + 64;
x.dump
::

code::
(
x = Routine { 6.do { |i| i.yield } } + 64;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
)
::

code::
(
x = Routine { 6.do { |i| i.yield } } + Routine { (1..7).do { |i| (1 / i).yield } };
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
x.next.postln;
)
::
