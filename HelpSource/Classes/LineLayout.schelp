title:: LineLayout
summary:: Superclass of layouts that distribute views in a line
categories:: GUI>Layout
related:: Classes/HLayout, Classes/VLayout, Classes/GridLayout, Classes/StackLayout, Guides/GUI-Layout-Management


description::


This is an abstract superclass of link::Classes/HLayout:: and link::Classes/VLayout:: which distribute views in a horizontal or vertical line, respectively.


subsection:: Fine tuning


Each item can be assigned a strong::stretch factor:: and an strong::alignment:: flag to fine tune how its size and position are managed. This can be done at layout link::#*new#construction::, when an item is link::#-add#added:: or link::#-insert#inserted:: or for an already present item with link::#-setStretch:: and link::#-setAlignment:: methods.

The strong::stretch factor:: only affects distribution in the direction of the layout (vertical or horizontal). All items have a stretch factor of 0 by default, so only their own preferences will determine space distribution. As soon as an item is assigned a stretch factor higher than 0, the space will be redistributed according to proportions of stretch factors.


subsection:: Leaving empty space


An empty space with an arbitrary stretch factor may be inserted using code::nil:: in place of an item in combination with the stretch factor. Similarly, an empty space of fixed size may be inserted using an integer in place of an item. See link::#*new#constructor:: and link::#-add:: for details.


classmethods::


private:: layoutClass
private:: parse


method::new

creates a link::Classes/HLayout:: or a link::Classes/VLayout:: and immediately fill it with items given as arguments. (Note that LineLayout is an abstract class and can not be instantiated, but HLayout and VLayout inherit this constructor).

argument::... items
each item can be a strong::view::, a strong::layout::, strong::nil:: (for stretchable empty space) or an strong::Integer:: (for fixed-size empty space).

discussion::

You can assign a strong::stretch factor:: and/or strong::alignment:: to an item by wrapping it into an array, followed by pairs of ('stretch', factor) and/or ('align', alignment). 'stretch' and 'align' may be abbreviated with 's' and 'a'. Simplified syntax for placing key-value pairs into an array comes handy (see link::Reference/Syntax-Shortcuts#Creating arrays with key-value pairs::, and the example below). For possible alignment values see link::Reference/gui_alignments::.

If the item is a stretchable empty space (nil) alignment will have no effect; if the item is a fixed-size empty space (an Integer), it is unaffected by both the stretch factor and alignment.

Example:

code::
(
w = Window.new;
w.layout = VLayout(
	[Button().states_([["Foo"]]), stretch: 1, align: \bottomLeft],
	20,
	[TextView().string_("Bar\nBar\nBar\n"), s: 3],
	[nil, s: 1]
);
w.front;
)
::


instancemethods::


method::add

adds an item to the right or the bottom end of the line, for HLayout and VLayout respectively.

argument::item
the item can be a strong::view::, a strong::layout::, an strong::Integer:: (specifying amount in pixels of empty space) or strong::nil:: (for stretchable empty space).

argument::stretch
an integer stretch factor.

argument::align
a symbol expressing the alignment. See link::Reference/gui_alignments:: for possible values.

discussion::
If the item is a stretchable empty space (nil) the align argument will have no effect; if the item is a fixed-size empty space (an Integer) both stretch and align arguments will have no effect.


method::insert

inserts an item at a specific position.

argument::item
the item can be a strong::view::, a strong::layout::, an strong::Integer:: (specifying amount in pixels of empty space) or strong::nil:: (for stretchable empty space).

argument::index
the integer position among current items at which to insert the new item. If index is smaller than 0 or larger than the current amount of items, the new item will always be added to the end of the line.

argument::stretch
an integer stretch factor.

argument::align
a symbol expressing the alignment. See link::Reference/gui_alignments:: for possible values.

discussion::
If the item is a stretchable empty space (nil) the align argument will have no effect; if the item is a fixed-size empty space (an Integer) both stretch and align arguments will have no effect.


method::setStretch

sets stretch factor of an item contained in the layout.

argument::item
a view or layout managed by this layout, or an Integer index of an item.

argument::stretch
an integer stretch factor.


method::setAlignment

sets alignment of an item contained in the layout.

argument::item
a view or a layout managed by this layout, or an Integer index of an item.

argument::align
a symbol expressing the alignment. See link::Reference/gui_alignments:: for possible values.


examples::


Try resizing the window created by the following code.

code::
(
w = Window.new;
w.layout = VLayout(
	TextView().string_("Foo\nBar\nFoo\nBar\nFoo"),
	HLayout(
		Button().states_([["Foo"]]),
		[TextField().string_("Bar"), stretch: 1],
		[TextField().string_("BarBarBar"), stretch: 4]
	)
);
w.front;
)
::

For a scroll view we need to set its canvas to a View with the desired layout.

code::
(
var view = ScrollView();
view.canvas = View().layout_(VLayout(
	*(
		100.collect {
			Slider().orientation_(\horizontal).background_(Color.rand)
		}
	)
));
view.front;
)
::
