title:: RingBuffer
summary:: fixed size ringbuffer
categories:: Collections>Ordered
related:: Classes/LinkedList


description::


A circular buffer that holds a fixed-size collection. Can be used as a queue.


classmethods::


method::new

creates a new buffer.

argument::size
initial size. The collection will be able to hold one minus this number of values.

argument::collectionClass
defaults to the link::Classes/Array:: class.


instancemethods::


method::array

the collection.


method::readPos

current read position.


method::writePos

current write position.


method::maxSize

maximum capacity.


method::size

alias of link::#-readable::.


method::readable

number of readble items.


method::writable

number of writable items.


method::add

adds value and increase link::#-writePos::. Do nothing if no items can be written.


method::pop

returns next readable item and increase link::#-readPos::. Returns code::nil:: if no items can be read.


method::overwrite

adds value and increase link::#-writePos:: by overwriting oldest readable item.


method::do

iterates over the currently readable items.


examples::

code::

r = RingBuffer(4);
r.add(\one);
r.add(\two);
r.add(\three);
r.readable;
r.do{ |x| x.postln };


r = RingBuffer(12, Int16Array);
r.writable.do{ |i| r.add(i + 1 * 100) };
r.array;
r.readable;  // 11
r.writable;  // 0 = full
r.pop;
r.pop;
r.pop;
r.readable;  // 8
r.writable;  // 3


(
var num = 100;
var m = MultiSliderView().elasticMode_(1).size_(num).front;
var r = RingBuffer(num + 1, DoubleArray);
Routine({
	while { m.isClosed.not } {
		if(r.writable == 0, { r.pop });
		r.add(sin(thisThread.seconds).abs);
		r.do{ |v, i|
			m.index = i;
			m.currentvalue = v;
		};
		(1/60).wait;
	}
}).play(AppClock);
)
::
