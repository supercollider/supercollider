title:: KeyState
summary:: responds to the state of a key
categories:: UGens>User interaction
related:: Classes/MouseButton, Classes/MouseX, Classes/MouseY


description::


Respond to the state of a key.

note::
Note that this UGen does not prevent normal typing. It therefore may be
helpful to select a GUI window rather than an SC document when using
KeyState, as the latter will be altered by any keystrokes.
::


classmethods::


method::kr

argument::keycode
the keycode value of the key to check. This corresponds to the
keycode values passed into the keyDownActions of SCViews. See the
example below.

argument::minval
the value to output when the key is not pressed.

argument::maxval
the value to output  when the key is pressed.

argument::lag
a lag factor.


instancemethods::


private:: signalRange


examples::

code::
s.boot;

// execute the code below to find out a key's keycode
// the char and keycode of any key you press will be printed in the post window
(
w = Window.new("I catch keystrokes");
w.view.keyDownAction = { |view, char, modifiers, unicode, keycode|  [char, keycode].postln };
w.front;
)

// then execute this and then press the 'j' key
(
w.front; // something safe to type on
{ SinOsc.ar(800, 0, KeyState.kr(38, 0, 0.1)) }.play;
)
::
