title:: LIDSlot
summary:: handles incoming LID data
categories:: Platform>Linux, External Control>HID
related:: Classes/LID


description::


classmethods::


private:: new, initClass


method::slotTypeStrings

an IdentityDictionary mapping the evtTypes to descriptive strings.


instancemethods::


private:: initSpec, init


method::postInfo

posts the slots properties in a nice, human readable way.


method::debug

turns on or off the debug posting for this slot.


method::action

sets the action for this slot.


method::value

gets the current value of this slot, mapped according to its spec.


method::spec

the ControlSpec to map this slots value.


method::rawValue

gets the rawValue; the setter of this method is called from the primitive code::LID.prHandleEvent:: and should not be called by the user.


method::next

convenience method to use a LIDSlot in a pattern; this will call the value of the slot.


method::createBus

creates a bus on the server. The slot's value will automatically be set to this bus on the server.

argument::server
the server on which to create the bus and forward the value to. By default this is code::Server.default::


method::bus

the bus on the server that this slot's value is mapped to.


method::freeBus

frees the bus on the server and remove the action to forward the value.


method::kr

JITLib support to access the bus in NodeProxy's. This will create the bus if it does not already exist.


method::device

the device to which this slot belongs.


method::type

the type of slot that this is.


method::code

the eventCode for this slot.


method::key

the key by which this slot is known in the spec of the device.


examples::

code::
LID.findAvailable;
LID.postAvailable; // pick one that you want to open, and fill in the vendor and product id in the next line:
d = LID.open(2, 10); // trackpoint

s.boot;

d.slot(2, 1).createBus;

Ndef(\checkbus, { d.slot(2, 1).kr.poll });

d.slot(2, 1).freeBus;

Ndef(\checkbus).clear;

::
