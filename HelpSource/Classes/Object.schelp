class:: Object
summary:: abstract superclass of all objects
categories:: Core>Kernel, Language>OOP

related:: Classes/Class, Guides/Intro-to-Objects, Reference/Classes

description::
Object is the root class of all other classes. All objects are indirect instances of class Object.
We call "receiver" the object the message is sent to: receiver.method(argument).


classmethods::
private:: prNewCopyArgs,prNew
method::readArchive

Read in an object from a text archive. pathname is a String containing the archive file's path.
discussion::
code::
a = Array.fill(100, { 100.0.rand });
a.writeArchive(PathName.tmp ++ "myArray");
b = Object.readArchive(PathName.tmp ++ "myArray");
a == b // true

/////////

// closed Function
(
f = { 1 + 2 };
f.writeArchive(PathName.tmp ++ "myFunc"); // succeeds
)
// open Function
(
var num;
num = 2;
f = { num + 2 };
f.writeArchive(PathName.tmp ++ "myFunc"); // fails
)
::

method::new

Create a new instance. The creation of new instances of any Object actually happens in this method (or with newCopyArgs ) when it is called by a child class. see link::Guides/WritingClasses::

method::newCopyArgs

Creates a new instance and copies the arguments to the instance variables in the order that the variables were defined.

code::
MyClass{
	var a,b,c;

	*new{ |arg1,arg2,arg3|
		^super.newCopyArgs(arg1,arg2,arg3) //will copy arg1,arg2,arg3 to variables a,b,c
	}
}
::

instancemethods::
private::addFunc, addFuncTo, removeFunc, removeFuncFrom

subsection::Class Membership

method::class

Answer the class of the receiver.

code::
5.class;
::

method::respondsTo

Answer a Boolean whether the receiver understands the message selector. selector must be a Symbol.

code::
5.respondsTo('+');
::

method::isKindOf

Answer a Boolean indicationg whether the receiver is a direct or indirect instance of aClass. Use of this message in code must be questioned, because it often indicates a missed opportunity to exploit object polymorphism.

code::
5.isKindOf(Magnitude);
::

method::isMemberOf

Answer a Boolean whether the receiver is a direct instance of aClass. Use of this message in code is almost always a design mistake.

code::
5.isMemberOf(Magnitude);
::

subsection::Accessing

method::size

Different classes interpret this message differently.  Object always returns 0.


subsection::Copying

method::copy

Make a copy of the receiver. The implementation of this message depends on the object's class.  In class Object, copy calls shallowCopy.

method::shallowCopy

Makes a copy of the object. The copy's named and indexed instance variables refer to the same objects as the receiver.

method::deepCopy

Recursively copies the object and all of the objects contained in the instance variables, and so on down the structure. This method works with cyclic graphs.

method::copyImmutable

If object is immutable then return a shallow copy, else return receiver.

subsection::Conversion

To convert an object of a certain Class into a similar, Object provides a number of methods.

method::as

Returns a similar new Object of a different class.

code::
[1, 2, 3].as(Set);
Pwhite(0.0, 1.0, 10).as(Set);
::

method::asArray

Returns an Array with the receiver, unless it is an Array already.

code::
[1, 2, 3].asArray;
5.asArray;
::

method::asCompileString

Returns a String that can be interpreted to reconstruct a copy of the receiver.
For the complementary method, see String interpret	.

code::
a = { 10.do { 10.postln } };
a.asCompileString.postcs;
a.postcs;
::

method::cs

shortcut for asCompileString

code::
{ 10.do { 10.postln } }.cs;
::

subsection::Archiving

Object implements methods for writing and retrieving objects from disk. Note that you cannot archive instances of Thread and its subclasses (i.e. Routine), or open Functions (i.e. a Function which refers to variables from outside its own scope).

method::writeArchive

Write an object to disk as a text archive. pathname is a String containing the resulting file's path.


subsection::Equality and Identity

method::==

equality: Answer whether the receiver equals anotherObject. The definition of equality depends on the class of the receiver. The default implementation in Object is to answer if the two objects are identical (see below).

note:: Whenever == is overridden in a class, hash should be overridden as well.::

code::
5.0 == 5; // true
5.0 === 5; // false
a = [1, 2, 3]; b = [1, 2, 3];
a == b; // equal
a === b; // not identical
"worth trying" == "worth trying"; // equal
::


method::===

identity: Answer whether the receiver is the exact same object as anotherObject.

code::
5.0 === 5; // false
"worth trying" === "worth trying"; // not identical
'worth trying' === 'worth trying'; // identical (symbols are unique)
::

method::!=

non-equality: Answer whether the receiver does not equal anotherObject. The default implementation in Object is to answer if the two objects are not identical (see below).

method::fuzzyEqual

Retruns the degree of equality (in the range from 0 to 1) between two objects with regard to a given precision. Objects to compare must support max, substraction and division.

code::
5.0.fuzzyEqual(5.0, 0.5); // 1 - full equality
5.25.fuzzyEqual(5.0, 0.5); // 0.5 - 50 % equality
5.9.fuzzyEqual(5.0, 0.5); // 0 - no equality
::

method::compareObject

Tests if two Objects (of the same class) are the same in a certain respect: It returns true if instVarNames are equal in both. If none are given, all instance variables are tested (see also: instVarHash)

code::
a = Pseq([1, 2, 3], inf); b = Pseq([100, 200, 300], inf);
a.compareObject(b, [\repeats]); // true
a.compareObject(b, [\list]); // false
::

method::hash

Answer a code used to index into a hash table. This is used by Dictionary and Set and their subclasses to implement fast object lookup.  Objects which are equal == should have the same hash values. Whenever == is overridden in a class, hash should be overridden as well.

code::
a = "worth trying"; b = "worth trying";
a.hash;
b.hash;
::

method::identityHash

Answer a code used to index into a hash table. This method is implemented by a primitive and is not overridden. Objects which are identical === should have the same hash values.

code::
a = "worth trying"; b = "worth trying";
a.identityHash;
b.identityHash;
::

method::instVarHash

Returns a combined hash value for the object's instance variables and the object's class. If none are given, all instance variables are tested (see also: compareObject).


code::
a = Pseq([1, 2, 3], inf); b = Pseq([100, 200, 300], inf);

a.instVarHash([\repeats]); // same
b.instVarHash([\repeats]);

a.instVarHash([\list]); // different
b.instVarHash([\list]);

a = Pseq([1, 2, 3], inf); b = Prand([1, 2, 3], inf);
a.instVarHash([\list]); // different
b.instVarHash([\list]);
::


subsection::Testing

method::isNil

Answer a Boolean indicating whether the receiver is nil.

method::notNil

Answer a Boolean indicating whether the receiver is not nil.

method::isNumber

Answer a Boolean indicating whether the receiver is an instance of Number.

method::isInteger

Answer a Boolean indicating whether the receiver is an instance of Integer.

method::isFloat

Answer a Boolean indicating whether the receiver is an instance of Float.

method::?

If the receiver is nil then answer anObject, otherwise answer the receiver.

method::??

If the receiver is nil, evaluate the link::Classes/Function:: and return the result.

method::!?

If the receiver is not nil, evaluate the link::Classes/Function:: passing in the receiver as argument and return the result, otherwise return nil.

note::
The function will be inlined if it contains no variables or arguments.
::

discussion::
This method allow building up chains of actions to be performed on an object (possibly across several methods) without having to check if the object is nil or not. After all the desired actions are performed, link::#-??:: can be used to check if result the result is nil and supply a default value in that case.

Examples:
code::
x !? ( _ * 3 ) ?? { "It was a nil, so I give a default value".postln; Point(1,1) }
::
With code::x = nil::, this will result in:
teletype::
It was a nil, so I give a default value
Point( 1, 1 )
::
But if code::x = Point(3,4)::, the result will be:
teletype::
Point( 9, 12 )
::

Nested nil checks:
code::
(
x = nil;
y = Point(3,4);
z = Point(5,6);
x !? { |x| y !? { |y| z !? { |z|  x.rho * y.rho * z.rho } } }
)
::
Results in teletype::nil::
code::
(
x = Point(1,2);
y = Point(3,4);
z = Point(5,6);
x !? { |x| y !? { |y| z !? {  |z| x.rho * y.rho * z.rho } } }
)
::
Results in teletype::87.321245982865::

method::pointsTo

Returns true if receiver has a direct reference to obj.

code::
a = 9;
b = [1, a, 6, 8];
c = [1, b, 5];
c.pointsto(b); // true
c.pointsto(a); // false
::

method::mutable

Returns true if receiver is mutable.

code::
a = #[1, 2, 3]; b = [1, 2, 3];
a.mutable; // false
b.mutable; // true
::

method::frozen

Returns true if receiver is frozen.

method::switch

Object implements a switch method which allows for conditional evaluation with multiple cases. These are implemented as pairs of test objects (tested using if this == test.value) and corresponding functions to be evaluated if true. In order for switch to be inlined (and thus be as efficient as nested if statements) the matching values must be literal Integers, Floats, Chars, Symbols and the functions must have no variables or arguments.

discussion::
code::
(
var x, z;
z = [0, 1, 1.1, 1.3, 1.5, 2];
switch (z.choose.postln,
	1,   { \no },
	1.1, { \wrong },
	1.3, { \wrong },
	1.5, { \wrong },
	2,   { \wrong },
	0,   { \true }
).postln;
)
::

or:

code::
(
var x, z;
z = [0, 1, 1.1, 1.3, 1.5, 2];
x = switch (z.choose)
	{1}   { \no }
	{1.1} { \wrong }
	{1.3} { \wrong }
	{1.5} { \wrong }
	{2}   { \wrong }
	{0}   { \true };
x.postln;
)
::

subsection::Messaging

Instead of directly sending a method to an object, a method may be invoked given a method selector only (a Symbol). The other arguments may be provided by passing them directly, from an environment. If it si not known whether the receiver implements the metod, tryPerform only sends if it does, and superPerform invokes the method of the superclass.


method::perform

The selector argument must be a Symbol. Sends the method named by the selector with the given arguments to the receiver.

method::performList

The selector argument must be a Symbol. Sends the method named by the selector with the given arguments to the receiver. If the last argument is a List or an Array, then its elements are unpacked and passed as arguments.

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performList(\value, [1, 2, 3]);
::

method::performMsg

The argument must be a List or Array whose first element is a Symbol representing a method selector. The remaining elements are unpacked and passed as arguments to the method named by the selector.

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performMsg([\value, 1, 2, 3]);
::

method::performWithEnvir

argument:: selector
A Symbol representing a method selector.
argument:: envir
The remaining arguments derived from the environment and passed as arguments to the method named by the selector.
discussion::
code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performWithEnvir(\value, (a: 1, c: 3, d: 4, b: 2));
::

method::performKeyValuePairs

argument:: selector
A Symbol representing a method selector.
argument:: pairs
Array or List with key-value pairs.
discussion::
code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performKeyValuePairs(\value, [\a, 1, \b, 2, \c, 3, \d, 4]);
::

method::tryPerform

Like 'perform', but tryPerform passes the method to the receiver only if the receiver understands the method name. If the receiver doesn't implement that method, the result is nil. Note that this does not catch errors like 'try' does (see Exception). If the receiver does have a matching method but that method throws an error, execution will halt. But, 'tryPerform' is faster than 'try'.

code::
(a: 1, b: 2, c: 3).tryPerform(\keysValuesDo, { |key, value| [key, value].postln });

// Array does not understand keysValuesDo -- result is nil
[1, 2, 3].tryPerform(\keysValuesDo, { |key, value| [key, value].postln });

// Error occurs within keysValuesDo -- error is thrown back to halt execution
(a: 1, b: 2, c: 3).tryPerform(\keysValuesDo, { |key, value| [key, value].flippityblargh });
::

method::superPerform

Like perform, superPerform calls a method, however it calls the method on the superclass.
selector: A Symbol representing a method selector.
args: Method arguments.


method::superPerformList

Like performList, superPerformList calls a method, however it calls the method on the superclass.
selector: A Symbol representing a method selector.
args: Method arguments. If the last argument is a List or an Array, then its elements are unpacked and passed as arguments.

method::multiChannelPerform
Perform selector with multichannel-expansion.
argument:: selector
A Symbol representing a method selector.
argument:: ... args
Method arguments, which if they contain an array, will call the method multiple times for each sub-element.
discussion::
Example:
code::
a = { |a, b, c| format("% plus % times % is %", a, b, c, a + b * c).quote; };
a.multiChannelPerform(\value, [1, 10, 100, 1000], [2, 7, 9], [3, 7]);

["foo","bar"].multiChannelPerform('++',["l","bro","t"]);
::
See also link::Guides/Multichannel-Expansion::

subsection::Unique Methods

Method definitions not yet implemented may be added to an Object instance.

method::addUniqueMethod

Add a unique method.

code::
a = 5;
a.addUniqueMethod(\sayHello, { |to| "hello " ++ to ++ ", I am 5" });
a.sayHello;
::

method::removeUniqueMethod

Remove a unique method.

code::
a.removeUniqueMethod(\sayHello);
a.sayHello;
::

method::removeUniqueMethods

Remove all unique methods of an Object.

subsection::Dependancy

method::addDependant

Add aDependant to the receiver's list of dependants.

method::removeDependant

Remove aDependant from the receiver's list of dependants.

method::dependants

Returns an IdentitySet of all dependants of the receiver.

method::changed

Notify the receiver's dependants that the receiver has changed. The object making the change should be passed as theChanger.

method::update

An object upon which the receiver depends has changed. theChanged is the object that changed and theChanger is the object that made the change.

method::release

Remove all dependants of the receiver. Any object that has had dependants added must be released in order for it or its dependants to get garbage collected.

subsection::Error Support

Object implements a number of methods which throw instances of Error. A number of methods (e.g. doesNotUnderstand) are 'private' and do not normally need to be called directly in user code. Others, such as those documented below can be useful for purposes such as object oriented design (e.g. to define an abstract interface which will be implemented in subclasses) and deprecation of methods. The reserved keyword thisMethod can be used to refer to the enclosing method. See also Method and Function (for exception handling).

method::throw

Throws the receiver as an Exception, which may or may not be caught and handled by any enclosing Function.

method::subclassResponsibility

Throws a SubclassResponsibilityError. Use this to indicate that this method should be defined in all subclasses of the receiver.

discussion::
code::
someMethod {
	this.subclassResponsibility(thisMethod);
}
::

method::shouldNotImplement

Throws a ShouldNotImplementError. Use this to indicate that this inherited method should not be defined or used in the receiver.

method::deprecated

Throws a DeprecatedError. Use this to indicate that the enclosing method has been replaced by a better one (possibly in another class), and that it will likely be removed in the future. Unlike other errors, DeprecatedError only halts execution if Error.debug == true. In all cases it posts a warning indicating that the method is deprecated and what is the recommended alternative.

discussion::
code::
foo {
	this.deprecated(thisMethod, ThisOrSomeOtherObject.findMethod(\foo);
	… // execution of this method will continue unless Error.debug == true
}
::

subsection::Printing and Introspection

method::post

Print a string representation of the receiver to the post window.
code::
"hello".post; "hello".post; "";
::

method::postln

Print a string representation of the receiver followed by a newline.
code::
"hello".postln; "hello".postln; "";
::

method::postc

Print a string representation of the receiver preceded by comments.
code::
"hello".postc; "hello".postc; "";
::

method::postcln

Print a string representation of the receiver preceded by comments, followed by a newline.
code::
"hello".postcln; "hello".postcln; "";
::

method::postcs

Print the compile string representation of the receiver, followed by a newline.
code::
"hello".postcs; "hello".postcs; "";
::

method::dump

Print a detailed low level representation of the receiver to the post window.
code::
List[1, 2, 3].dump;
::

subsection::System Information

method::gcInfo

Posts garbage collector information in a table format.

discussion::
list::
## flips: the number of times the GC "flipped", i.e. when it finished incremental scanning of all reachable objects
## collects: the number of partial collections performed
## nalloc: total number of allocations
## alloc: total allocation in bytes
## grey: the number of "grey" objects, i.e. objects that point to reachable objects and are not determined to be (un)reachable yet
::

Then for each size class: numer of black, white and free objects, total number of objects and the total set size.

code::
flips 241  collects 689096   nalloc 40173511   alloc 322496998   grey 346541
	0  bwf t sz:    882      0 368573   369455    2955640
	1  bwf t sz:   6197    122 5702377   5708696   91339136
2  bwf t sz:    947      4 1500009   1500960   48030720
	3  bwf t sz:   8056  65201 301800   375057   24003648
4  bwf t sz:   4047    145   3457     7649     979072
5  bwf t sz:    422      1    431      854     218624
6  bwf t sz:    124      2     72      198     101376
7  bwf t sz: 153504      1      0   153505   157189120
8  bwf t sz:     22      0      0       22      45056
9  bwf t sz:      5      0      0        5      20480
10  bwf t sz:      5      0      0        5      40960
12  bwf t sz:      2      0      0        2      65536
13  bwf t sz:      1      0      0        1      65536
19  bwf t sz:      1      0      3        4   16777216
tot bwf t sz: 174215  65476 7876722   8116413   341832120
::


you can also query the amount of free memory with Object.totalFree and dump the currently grey objects with Object.dumpGrey. More memory status methods are: Object.largestFreeBlock, Object.gcDumpSet, and Object.gcSanity.

subsection::Iteration

method::do

Object evaluates the function with itself as an argument, returning the reasult. Different classes interpret this message differently.
discussion::
code::
f = { |x, i| [x, i].postln; };
[1, 2, 3].do(f); // Array.do
10.do(f); // Integer.do
($Q).do(f); // Object.do
::

method::generate

Object iterates by the message do, sent to the receiver.
This method is used internally by list comprehensions.

method::dup

Duplicates the receiver n times, returning an array of n copies. Different classes interpret this message differently.  The shortcut "!" can be used in place.
discussion::
code::
8.dup(10);
8 ! 10; // same as above
x = [[1], [2], [3]].dup(5);
x[0] === x[1]; // false: copies receiver.
x[0][0] === x[1][0] // true: doesn't deepCopy receiver
{ 1.0.rand }.dup(5) // other objects respond differently to dup
::

subsection:: Scheduling

method:: awake

This method is called by a link::Classes/Clock:: on which the object was
scheduled when its scheduling time is up. It calls link::#-next::, passing
on the scheduling time in beats as an argument.

argument:: beats
The scheduling time in beats. This is equal to the current logical time
(link::Classes/Thread#-beats::).

argument:: seconds
The scheduling time in seconds. This is equal to the current logical time
(link::Classes/Thread#-seconds::).

argument:: clock
The clock on which the object was scheduled.


subsection:: Stream Support

method:: next

Does nothing; simply returns the object itself.

method:: reset

Does nothing; simply returns the object itself.





subsection::Routine Support

Objects support the basic interface of Stream, just returning itself in respone to the following messages:
next, reset, stop, free, clear, removedFromScheduler, asStream.

method::yield

Must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The result of yield will be the value passed to the Routine's next method the next time it is called.

method::yieldAndReset

Must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The Routine is reset so that the next time it is called, it will start from the beginning. yieldAndReset never returns within the Routine.

method::alwaysYield

Must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The Routine, when called subsequently will always yield the receiver until it is reset. alwaysYield never returns within the Routine.

method::embedInStream

Yields the receiver

method::idle

within a routine, return values (the receiver) until this time is over. (see also link::Classes/Routine#play::)
Time is measured relative to the thread's clock.
code::
a = Routine { 1.yield; 0.idle(3); 400.yield };
fork { loop { a.next.postln; 0.5.wait } };
::

method::iter

Returns a link::Classes/OneShotStream:: with the receiver as return value.
code::
a = 9.iter;
a.nextN(4);
::

method::cyc

Embeds the receiver in the stream n times (default: inf), each time resetting it.
code::
a = 9.cyc(2);
a.nextN(4);
::

method::fin

Calls next with the receiver n times only (default: 1), yielding the result.
code::
a = (10..0).iter.fin(2);
a.nextN(4);
::

method::repeat

Repeatedly embeds the receiver in the stream using a Pn (may thus be used for patterns and other objects alike)
code::
a = (0..3).iter.repeat(2);
a.nextN(9)
::

method::loop

Indefinitely embeds the receiver in the stream

code::
a = (0..3).iter.loop;
a.nextN(9)
::

method:: nextN

Returns an array with the results of calling link::#-next:: a given number of times

argument:: n

Number of message calls

argument:: inval

argument passed to the next messagy

code::
Routine { inf.do { |i| i.rand.yield } }.nextN(8)
::


method::streamArg
	Dependent on whether an object that is passed to a stream the object will behave differently: it may be embedded in the stream or used as stream directly.

	This method allows to switch between the two behaviors. For efficiency, the subclasses link::Classes/Pattern:: and link::Classes/Stream:: implement this method simply as "asStream".
	argument::embed
	If set to true, the object embeds itself into the stream (and thus return only once). If set to false, it returns itself forever. For simplicity, subclasses implement this method without this switch.


code::
// embedding an event
a = (z: 77);
b = Pset(\y, 8, a.streamArg(true)).asStream;
c = Pset(\y, 8, a.streamArg(false)).asStream;
b.nextN(3, ()); // this ends
c.nextN(3, ()); // this loops

// embedding a pattern
a = Pbind(\note, Pseq([1, 2]));
b = Pset(\y, 8, a.streamArg(true)).asStream;
c = Pset(\y, 8, a.streamArg(false)).asStream;
b.nextN(3, ()); // this ends
c.nextN(3, ()); // this ends, too
::


method::addFunc
method::addFuncTo
method::removeFunc
method::removeFuncFrom


The messages link::Classes/Function#-addFunc::  link::Classes/Function#-addFuncTo::, link::Classes/Function#-removeFunc::, link::Classes/Function#-removeFuncFrom:: are supported by Object.

method::instill
method::obtain
The messages link::Classes/SequenceableCollection#-instill:: and link::Classes/SequenceableCollection#-obtain::, are supported by Object.

subsection:: Math Support
method::blend
Lineraly interpolate between this and argument
code::
blend(10, 100, 0.3);
blend([1, 2, 3], [1, 3, 4], 0.5);
blend((a: 6, b: 7), (a: 0, b: [1, 2], c: 9), 0.5);
::

