title:: Object
summary:: abstract superclass of all objects
categories:: Core>Kernel, Language>OOP

related:: Classes/Class, Guides/Intro-to-Objects, Reference/Classes


description::


Object is the root class of all other classes. All objects are indirect instances of class Object. We call the "receiver" the object the message is sent to: code::receiver.method(argument)::.


classmethods::


private:: prNewCopyArgs, prNew


method::readArchive

reads in an object from a text archive.

code::
(
a = Array.fill(100, { 100.rand });
a.writeArchive(PathName.tmp ++ "myArray");
b = Object.readArchive(PathName.tmp ++ "myArray");
a == b; // true
)

/////////

// closed Function
(
f = { 1 + 2 };
f.writeArchive(PathName.tmp ++ "myFunc"); // succeeds
)
// open Function
(
var num;
num = 2;
f = { num + 2 };
f.writeArchive(PathName.tmp ++ "myFunc"); // fails
)
::

argument::pathname
a String containing the archive file's path.


method::new

creates a new instance. The creation of new instances of any Object actually happens in this method (or with code::newCopyArgs::) when it is called by a child class. See link::Guides/WritingClasses::.


method::newCopyArgs

creates a new instance and copies the arguments to the instance variables in the order that the variables were defined. If the superclass's code::new:: method requires arguments, the first arguments passed to code::newCopyArgs:: will be passed on to that method, and the following arguments will be copied to this class's instance variables. Class variables are ignored.

code::
MyClass {
	var a, b, c;

	*new {
		arg arg1, arg2, arg3;
		// will copy arg1, arg2, arg3 to variables a, b, c
		^super.newCopyArgs(arg1, arg2, arg3);
	}
}
::


instancemethods::


private:: addFunc, addFuncTo, removeFunc, removeFuncFrom


subsection:: Class Membership


method::class

returns the class of the receiver.

code::
5.class;
::


method::respondsTo

returns a link::Classes/Boolean:: whether the receiver understands the message selector.

code::
5.respondsTo('+'); // true
5.respondsTo('indexOf'); // false
::

argument::aSymbol
a selector name. Must be a link::Classes/Symbol::.


method::isKindOf

returns a Boolean indicating whether the receiver is a direct or indirect instance of aClass. Use of this message in code must be questioned, because it often indicates a missed opportunity to exploit object polymorphism.

code::
5.isKindOf(Number); // true
5.isKindOf(String); // false
::


method::isMemberOf

returns a Boolean whether the receiver is a direct instance of aClass. Use of this message in code is almost always a design mistake.

code::
5.isMemberOf(Number); // false
5.isMemberOf(Integer); // true
::


subsection:: Accessing


method::size

different classes respond to this message differently. Object always returns 0.


method::rank

returns the number of dimensions the value has.
A single value (scalar) has rank of zero.
See link::Classes/ArrayedCollection#-rank:: for cases where this is useful.


method::shape

for a multidimensional array,
returns an array of the number of elements along each consecutive dimension,
see link::Classes/ArrayedCollection#-shape::.
For a scalar value (most objects) returns code::nil::.


subsection:: Copying


method::copy

makes a copy of the receiver. The implementation of this message depends on the object's class.  In class link::Classes/Object::, copy calls shallowCopy.


method::shallowCopy

makes a copy of the object. The copy's named and indexed instance variables refer to the same objects as the receiver.


method::deepCopy

recursively copies the object and all of the objects contained in the instance variables, and so on down the structure. This method works with cyclic graphs.


method::copyImmutable

if object is immutable then returns a shallow copy, else returns receiver.


subsection:: Conversion


To convert an object of a certain class into a similar object of another class, Object provides a number of methods.


method::as

returns a similar new Object of a different class.

code::
[1, 2, 3].as(Set);
Pwhite(0.0, 1.0, 10).as(Set);
::


method::asArray

returns an Array with the receiver, unless it is an Array already.

code::
[1, 2, 3].asArray;
5.asArray;
::


method::asCompileString

returns a String that can be interpreted to reconstruct a copy of the receiver. For the complementary method, see link::Classes/String#-interpret::.

code::
a = { 10.do { 10.postln } };
a.asCompileString.postcs;
a.postcs;
::


method::asInt

deprecated. Use code::asInteger:: instead.


method::cs

shorthand for link::#-asCompileString::.

code::
{ 10.do { 10.postln } }.cs;
"Strings don't post with surrounding quotes.".cs;
::


subsection:: Archiving


Object implements methods for writing and retrieving objects from disk. Note that you cannot archive instances of link::Classes/Thread:: and its subclasses (i.e. link::Classes/Routine::), or open link::Reference/Functions:: (i.e., a link::Classes/Function:: which refers to variables from outside its own scope).


method::writeArchive

writes an object to disk as a text archive.

argument::pathname
a String containing the resulting file's path.


subsection:: Equality and Identity


method::==

answers whether the receiver equals anotherObject. The definition of equality depends on the class of the receiver. The default implementation in Object is to answer if the two objects are identical.

note::
Whenever == is overridden in a class, hash should be overridden as well.
::

code::
5.0 == 5; // true
5.0 === 5; // false
a = [1, 2, 3]; b = [1, 2, 3];
a == b; // equal
a === b; // not identical
"worth trying" == "worth trying"; // equal
::


method::===

answers whether the receiver is the exact same object as anotherObject.

code::
5.0 === 5; // false
"worth trying" === "worth trying"; // not identical
'worth trying' === 'worth trying'; // identical (symbols are unique)
::


method::!=

answers whether the receiver does not equal anotherObject. The default implementation in Object is to determine '==' for the two operands and negate this result. (see below).


method::!==

answers whether the receiver is not identical to anotherObject.


method::|==|

a lazy equality operator. For typical object types, code::|==|:: behaves the same as link::Classes/Object#-==::. For link::Classes/AbstractFunction:: and its subclasses (including link::Classes/Pattern:: and link::Classes/UGen::), it does not perform the equality check immediately, but rather composes an equality operation to be performed at the time of evaluating the resulting function or stream.

code::
1 |==| 1  // true

Pseq([1], inf) == 1  // false (because "a Pseq" is not 1)

Pseq([1], inf) |==| 1  // a Pbinop

(Pseq([1], inf) |==| 1).asStream.next  // Pbinop evaluates to true
::


method::|!=|

a lazy inequality operator, defined as code::not(this |==| that)::. See link::Classes/Object#-|==|::.


method::fuzzyEqual

returns the degree of equality between two objects with regard to a given precision. The compared objects must support teletype::.max::, subtraction, and division.

code::
5.0.fuzzyEqual(5.0, 0.5);  // 1.0 - full equality
5.25.fuzzyEqual(5.0, 0.5); // 0.5 - 50% equality
4.75.fuzzyEqual(5.0, 0.5); // 0.5 - 50% equality
5.9.fuzzyEqual(5.0, 0.5);  // 0.0 - no equality
::

Resolve to a Boolean within your precision threshold by checking whether the returned degree of equality is above code::0.0::.

code::
(
// Cartesian to Polar and back, accumulating precision error
var x = 3.0, y = 5.0;
var hypot = hypot(y, x);
var angle = atan2(y, x);
var polar = Polar(hypot, angle);
var xFromPolar = polar.asPoint.x;
var equalWithin = 1e-5;
postf(
	"Exactly equal? %\n"
	"Fuzzily equal? %\n",
    x == xFromPolar,
    fuzzyEqual(x, xFromPolar, equalWithin) > 0
);
[x, xFromPolar]
)
::

returns::

a link::Classes/Float:: in the range code::0.0:: to code::1.0::.


method::compareObject

tests if two Objects (of the same class) are the same in a certain respect: It Returns code::true:: if instVarNames are equal in both. If none are given, all instance variables are tested (see also: link::#-instVarHash::)

code::
a = Pseq([1, 2, 3], inf); b = Pseq([100, 200, 300], inf);
a.compareObject(b, [\repeats]); // true
a.compareObject(b, [\list]); // false
::


method::hash

returns a code used to index into a hash table. This is used by Dictionary and Set and their subclasses to implement fast object lookup.  Objects which are equal == should have the same hash values. Whenever == is overridden in a class, hash should be overridden as well.

code::
a = "worth trying"; b = "worth trying";
a.hash;
b.hash;
::


method::identityHash

returns a code used to index into a hash table. This method is implemented by a primitive and is not overridden. Objects which are identical === should have the same hash values.

code::
a = "worth trying"; b = "worth trying";
a.identityHash;
b.identityHash;
::


method::instVarHash

returns a combined hash value for the object's instance variables and the object's class. If none are given, all instance variables are tested (see also: link::#-compareObject::).

code::
a = Pseq([1, 2, 3], inf); b = Pseq([100, 200, 300], inf);

a.instVarHash([\repeats]); // same
b.instVarHash([\repeats]);

a.instVarHash([\list]); // different
b.instVarHash([\list]);

a = Pseq([1, 2, 3], inf); b = Prand([1, 2, 3], inf);
a.instVarHash([\list]); // different
b.instVarHash([\list]);
::


subsection:: Testing


method::isNil

returns a Boolean indicating whether the receiver is code::nil::.


method::notNil

returns a Boolean indicating whether the receiver is not code::nil::.


method::isNumber

returns a Boolean indicating whether the receiver is an instance of Number.


method::isInteger

returns a Boolean indicating whether the receiver is an instance of Integer.


method::isFloat

returns a Boolean indicating whether the receiver is an instance of Float.


method::?

if the receiver is code::nil:: then answers anObject, otherwise answers the receiver.


method::??

if the receiver is code::nil::, evaluates the link::Classes/Function:: and returns the result.


method::!?

if the receiver is not code::nil::, evaluates the link::Classes/Function:: passing in the receiver as argument and returns the result, otherwise returns code::nil::.

note::
The function will be inlined if it contains no variables or arguments.
::

discussion::
This method allow building up chains of actions to be performed on an object (possibly across several methods) without having to check if the object is code::nil:: or not. After all the desired actions are performed, link::#-??:: can be used to check if result the result is code::nil:: and supply a default value in that case.

Examples:

code::
x !? (_ * 3) ?? { "It was a nil, so I give a default value".postln; Point(1, 1) }
::

With code::x = nil::, this will result in:

teletype::
It was a code::nil::, so I give a default value
Point(1, 1)
::

But if code::x = Point(3, 4)::, the result will be:

teletype::
Point(9, 12)
::

Nested code::nil:: checks:

code::
(
x = nil;
y = Point(3, 4);
z = Point(5, 6);
x !? { |x| y !? { |y| z !? { |z|  x.rho * y.rho * z.rho } } }
)
::

Results in teletype::nil::

code::
(
x = Point(1, 2);
y = Point(3, 4);
z = Point(5, 6);
x !? { |x| y !? { |y| z !? {  |z| x.rho * y.rho * z.rho } } }
)
::

Results in teletype::87.321245982865::


method::pointsTo

returns code::true:: if receiver has a direct reference to obj.

code::
a = 9;
b = [1, a, 6, 8];
c = [1, b, 5];
c.pointsTo(b); // true
c.pointsTo(a); // false
::


method::mutable

returns code::true:: if receiver is mutable.

code::
a = #[1, 2, 3]; b = [1, 2, 3];
a.mutable; // false
b.mutable; // true
::


method::frozen

returns code::true:: if receiver is frozen.


method::switch

Object implements a switch method which allows for conditional evaluation with multiple cases. These are implemented as pairs of test objects (tested using if this == test.value) and corresponding functions to be evaluated if code::true::. In order for switch to be inlined (and thus be as efficient as nested if statements) the matching values must be literal Integers, Floats, Chars, Symbols and the functions must have no variables or arguments.

discussion::

code::
(
var x, z;
z = [0, 1, 1.1, 1.3, 1.5, 2];
switch (z.choose.postln,
	1,   { \no },
	1.1, { \wrong },
	1.3, { \wrong },
	1.5, { \wrong },
	2,   { \wrong },
	0,   { \true }
).postln;
)
::

or:

code::
(
var x, z;
z = [0, 1, 1.1, 1.3, 1.5, 2];
x = switch (z.choose)
	{ 1 }   { \no }
	{ 1.1 } { \wrong }
	{ 1.3 } { \wrong }
	{ 1.5 } { \wrong }
	{ 2 }   { \wrong }
	{ 0 }   { \true };
x.postln;
)
::


subsection:: Messaging


Instead of directly sending a method to an object, a method may be invoked given a method selector only (a Symbol). The other arguments may be provided by passing them directly, from an environment. If it is not known whether the receiver implements the method, tryPerform only sends if it does, and superPerform invokes the method of the superclass.


method::perform

the selector argument must be a Symbol. Sends the method named by the selector with the given arguments to the receiver.

If the first argument is an Array or List, this method behaves like code::performMsg::. However, this usage is discouraged, and code::performMsg:: ought to be used instead.


method::performList

the selector argument must be a Symbol. Sends the method named by the selector with the given arguments to the receiver. If the last argument is a List or an Array, then its elements are unpacked and passed as arguments.

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performList(\value, [1, 2, 3]);
::


method::performArgs

like link::#-perform::, but allows you to pass a key-value array of keyword arguments.
Useful in link::#-doesNotUnderstand:: and other places where you might accept a variety of keyword arguments.

argument::selector
a link::Classes/Symbol:: of the method name.

argument::args
an link::Classes/Array:: of the arguments.

argument::kwargs
an link::Classes/Array:: of keyword-argument pairs.

Example

code::
x.performArgs(\foo, [1, 2], [\bar, 10]);
// is equivalent to...
x.foo(1, 2, bar: 10);
::


method::performMsg

the argument must be a List or Array whose first element is a Symbol representing a method selector. The remaining elements are unpacked and passed as arguments to the method named by the selector.

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performMsg([\value, 1, 2, 3]);
::


method::performWithEnvir

argument::selector
a Symbol representing a method selector.

argument::envir
the remaining arguments derived from the environment and passed as arguments to the method named by the selector.

discussion::

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performWithEnvir(\value, (a: 1, c: 3, d: 4, b: 2));
::


method::performKeyValuePairs

argument::selector
a Symbol representing a method selector.

argument::pairs
Array or List with key-value pairs.

discussion::

code::
a = { |a, b, c| postf("% plus % plus % is %\n", a, b, c, a + b + c); "" };
a.performKeyValuePairs(\value, [\a, 1, \b, 2, \c, 3, \d, 4]);
::


method::tryPerform

like link::#-perform::, but code::tryPerform:: passes the method to the receiver only if the receiver understands the method name. If the receiver doesn't implement that method, the result is code::nil::. Note that this does not catch errors like 'try' does (see Exception). If the receiver does have a matching method but that method throws an error, execution will halt. But, 'tryPerform' is faster than 'try'.

code::
(a: 1, b: 2, c: 3).tryPerform(\keysValuesDo, { |key, value| [key, value].postln });

// Set does not understand keysValuesDo -- result is code::nil::
Set[1, 2, 3].tryPerform(\keysValuesDo, { |key, value| [key, value].postln });

// Error occurs within keysValuesDo -- error is thrown back to halt execution
(a: 1, b: 2, c: 3).tryPerform(\keysValuesDo, { |key, value| [key, value].flippityblargh });
::


method::superPerform

like link::#-perform::, code::superPerform:: calls a method, however it calls the method on the superclass.
selector: A Symbol representing a method selector.
args: Method arguments.


method::superPerformList

like link::#-performList::, code::superPerformList:: calls a method, however it calls the method on the superclass.
selector: A Symbol representing a method selector.
args: Method arguments. If the last argument is a List or an Array, then its elements are unpacked and passed as arguments.


method::multiChannelPerform

performs selector with multichannel expansion. See also: link::Guides/Multichannel-Expansion::.

argument::selector
a Symbol representing a method selector.

argument::... args
method arguments which, if they contain an array, will call the method multiple times for each sub-element.

discussion::

code::
a = { |a, b, c| format("% plus % times % is %", a, b, c, a + b * c).quote };
a.multiChannelPerform(\value, [1, 10, 100, 1000], [2, 7, 9], [3, 7]);

["foo", "bar"].multiChannelPerform('++', ["l", "bro", "t"]);
::


subsection:: Unique Methods


Method definitions not yet implemented may be added to an Object instance.


method::addUniqueMethod

adds a unique method.

code::
a = 5;
a.addUniqueMethod(\sayHello, { |to| "hello " ++ to ++ ", I am 5" });
a.sayHello;
::


method::removeUniqueMethod

removes a unique method.

code::
a.removeUniqueMethod(\sayHello);
a.sayHello;
::


method::removeUniqueMethods

removes all unique methods of an Object.


subsection:: Dependancy


method::addDependant

adds aDependant to the receiver's list of dependants.


method::removeDependant

removes aDependant from the receiver's list of dependants.


method::dependants

returns an IdentitySet of all dependants of the receiver.


method::changed

notifies the receiver's dependants that the receiver has changed. The object making the change should be passed as theChanger.


method::update

an object upon which the receiver depends has changed. theChanged is the object that changed and theChanger is the object that made the change.


method::release

removes all dependants of the receiver. Any object that has had dependants added must be released in order for it or its dependants to get garbage collected.


subsection:: Error Support


Object implements a number of methods which throw instances of Error. A number of methods (e.g. doesNotUnderstand) are 'private' and do not normally need to be called directly in user code. Others, such as those documented below can be useful for purposes such as object oriented design (e.g. to define an abstract interface which will be implemented in subclasses) and deprecation of methods. The reserved keyword thisMethod can be used to refer to the enclosing method. See also Method and Function (for exception handling).


method::doesNotUnderstand

argument::selector
the method that was called.

argument::... args
an link::Classes/Array:: of arguments.

argument::kwargs
an link::Classes/Array:: of keyword argument pairs.


method::throw

throws the receiver as an Exception, which may or may not be caught and handled by any enclosing Function.


method::subclassResponsibility

throws a SubclassResponsibilityError. Use this to indicate that this method should be defined in all subclasses of the receiver.

discussion::

code::
someMethod {
	this.subclassResponsibility(thisMethod);
}
::


method::shouldNotImplement

throws a ShouldNotImplementError. Use this to indicate that this inherited method should not be defined or used in the receiver.


method::deprecated

throws a DeprecatedError. Use this to indicate that the enclosing method has been replaced by a better one (possibly in another class), and that it will likely be removed in the future. Unlike other errors, DeprecatedError only halts execution if code::Error.debug == true::. In all cases it posts a warning indicating that the method is deprecated and what is the recommended alternative.

discussion::

code::
foo {
	this.deprecated(thisMethod, ThisOrSomeOtherObject.findMethod(\foo);
	... // execution of this method will continue unless Error.debug == true
}

// For a class method:
*bar {
	this.deprecated(thisMethod, OtherClass.class.findMethod(\bar));
	...
}
::


subsection:: Printing and Introspection


method::post

prints a string representation of the receiver to the post window.

code::
"hello".post; "hello".post; "";
::


method::postln

prints a string representation of the receiver followed by a newline.

code::
"hello".postln; "hello".postln; "";
::


method::postc

prints a string representation of the receiver preceded by comments.

code::
"hello".postc; "hello".postc; "";
::


method::postcln

prints a string representation of the receiver preceded by comments, followed by a newline.

code::
"hello".postcln; "hello".postcln; "";
::


method::postcs

prints the compile string representation of the receiver, followed by a newline.

code::
"hello".postcs; "hello".postcs; "";
::


method::dump

prints a detailed low level representation of the receiver to the post window.
Any object understands this method (this means metaclasses, classes and their instances). Note that in link::Classes/List:: class, this method dumps the list's internal array.

code::
Meta_Object.dump // the meta class of the class Object
::

code::
Object.dump      // the class called Object
::

code::
Object.new.dump  // an istance of the class Object
::

discussion::

list::
## The detailed low level information varies depending on the receiver.
## Some instance objects, especially unique objects, return the class name and value (also more data if necessary) of the dumped object:

definitionlist::
## link::Classes/Float::
||

code::
1.0.dump
::

64-bit version of SuperCollider returns:

teletype::
   Float 1.000000   00000000 3FF00000
-> 1.0
::

For the detals, see link::Classes/Float#-dump::

## link::Classes/Integer::
||

code::
1.dump
::

teletype::
   Integer 1
-> 1
::

## link::Classes/Char::
	||

code::
$1.dump
::

teletype::
   Character 49 '1'
-> 1
::

The integer between emphasis::Character:: and emphasis::'1':: is the ASCII value of that character.
## link::Classes/Symbol::
||

code::
\1.dump
::

teletype::
   Symbol '1'
-> 1
::

::

## Some instances return more detailed information, such as

list::
## address in virtual memory (the hexadecimal number prefixed with 0x),
## emphasis::garbage collector color:: (gc),
## emphasis::data format type:: (fmt),
## emphasis::flags for immutablity, finalization and sanity information from the garbage collector:: (flg),
## emphasis::size class:: (set),
## and so on (the information on the second and subsequent lines varies depending on the class to which the instance belongs)
::

with the class name of the instance:

definitionlist::
## link::Classes/Array::
||

code::
[1, 2].dump;
::

teletype::
Instance of Array {    (0x1552c9558, gc=78, fmt=01, flg=00, set=02)
  indexed slots [2]
      0 : Integer 1
      1 : Integer 2
}
-> [1, 2]
::

## link::Classes/List::
||

code::
List[1, 2].dump;
::

teletype::
List's array:
Instance of Array {    (0x13b3cb5b8, gc=6C, fmt=01, flg=00, set=02)
  indexed slots [2]
      0 : Integer 1
      1 : Integer 2
}
-> List[1, 2]
::

## link::Classes/Set::
||

code::
Set[1, 2].dump;
::

teletype::
Instance of Set {    (0x1489e2068, gc=A4, fmt=00, flg=00, set=02)
  instance variables [2]
    array : instance of Array (0x13b458838, size=4, set=2)
    size : Integer 2
}
-> Set[2, 1]
::

::
::


subsection:: System Information


method::gcInfo

posts garbage collector information in a table format.

discussion::

list::
## flips: the number of times the GC "flipped", i.e. when it finished incremental scanning of all reachable objects
## collects: the number of partial collections performed
## nalloc: total number of allocations
## alloc: total allocation in bytes
## grey: the number of "grey" objects, i.e. objects that point to reachable objects and are not determined to be (un)reachable yet
::

Then for each size class: numer of black, white and free objects, total number of objects and the total set size.

code::
flips 241  collects 689096   nalloc 40173511   alloc 322496998   grey 346541
0  bwf t sz:    882      0 368573   369455    2955640
1  bwf t sz:   6197    122 5702377   5708696   91339136
2  bwf t sz:    947      4 1500009   1500960   48030720
3  bwf t sz:   8056  65201 301800   375057   24003648
4  bwf t sz:   4047    145   3457     7649     979072
5  bwf t sz:    422      1    431      854     218624
6  bwf t sz:    124      2     72      198     101376
7  bwf t sz: 153504      1      0   153505   157189120
8  bwf t sz:     22      0      0       22      45056
9  bwf t sz:      5      0      0        5      20480
10  bwf t sz:      5      0      0        5      40960
12  bwf t sz:      2      0      0        2      65536
13  bwf t sz:      1      0      0        1      65536
19  bwf t sz:      1      0      3        4   16777216
tot bwf t sz: 174215  65476 7876722   8116413   341832120
::


You can also query the amount of free memory with code::Object.totalFree:: and dump the currently grey objects with code::Object.dumpGrey::. More memory status methods are: largestFreeBlock, gcDumpSet, and gcSanity.


subsection:: Iteration


method::do

Object evaluates the function with itself as an argument, returning the result. Different classes respond to this message differently.

discussion::

code::
f = { |x, i| [x, i].postln };
[1, 2, 3].do(f); // Array.do
10.do(f); // Integer.do
($Q).do(f); // Object.do
::


method::generate

Object iterates by the message do, sent to the receiver.
This method is used internally by list comprehensions.


method::dup

duplicates the receiver n times, returning an array of n copies. Different classes respond to this message differently.  The shortcut "!" can be used in place.

discussion::

code::
8.dup(10);
8 ! 10; // same as above
x = [[1], [2], [3]].dup(5);
x[0] === x[1]; // false: copies receiver.
x[0][0] === x[1][0] // true: doesn't deepCopy receiver
{ 1.0.rand }.dup(5) // other objects respond differently to dup
::


subsection:: Scheduling


method::awake

this method is called by a link::Classes/Clock:: on which the object was
scheduled when its scheduling time is up. It calls link::#-next::, passing
on the scheduling time in beats as an argument.

argument::beats
the scheduling time in beats. This is equal to the current logical time
(link::Classes/Thread#-beats::).

argument::seconds
the scheduling time in seconds. This is equal to the current logical time
(link::Classes/Thread#-seconds::).

argument::clock
the clock on which the object was scheduled.


subsection:: Stream Support


method::next

does nothing; simply returns the object itself.


method::reset

does nothing; simply returns the object itself.


subsection:: Routine Support


Objects support the basic interface of Stream, just returning itself in response to the following messages:
next, reset, stop, free, clear, removedFromScheduler, asStream.


method::yield

must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The result of yield will be the value passed to the Routine's next method the next time it is called.


method::yieldAndReset

must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The Routine is reset so that the next time it is called, it will start from the beginning. yieldAndReset never returns within the Routine.


method::alwaysYield

must be called from inside a Routine. Yields control to the calling thread. The receiver is the result passed to the calling thread's method. The Routine, when called subsequently will always yield the receiver until it is reset. alwaysYield never returns within the Routine.


method::embedInStream

yields the receiver


method::idle

within a routine, returns values (the receiver) until this time is over. (see also link::Classes/Routine#-play::)
Time is measured relative to the thread's clock.

code::
a = Routine { 1.yield; 0.idle(3); 400.yield };
fork { loop { a.next.postln; 0.5.wait } };
::


method::iter

returns a link::Classes/OneShotStream:: with the receiver as return value.

code::
a = 9.iter;
a.nextN(4);
::


method::cyc

embeds the receiver in the stream n times (default: inf), each time resetting it.

code::
a = 9.cyc(2);
a.nextN(4);
::


method::fin

calls next with the receiver n times only (default: 1), yielding the result.

code::
a = (10..0).iter.fin(2);
a.nextN(4);
::


method::repeat

repeatedly embeds the receiver in the stream using a Pn (may thus be used for patterns and other objects alike)

code::
a = (0..3).iter.repeat(2);
a.nextN(9)
::


method::loop

indefinitely embeds the receiver in the stream

code::
a = (0..3).iter.loop;
a.nextN(9)
::


method::nextN

returns an array with the results of calling link::#-next:: a given number of times

argument::n
number of message calls

argument::inval
argument passed to the next message

code::
Routine { inf.do { |i| i.rand.yield } }.nextN(8)
::


method::streamArg

	Dependent on whether an object that is passed to a stream the object will behave differently: it may be embedded in the stream or used as stream directly.

	This method allows to switch between the two behaviors. For efficiency, the subclasses link::Classes/Pattern:: and link::Classes/Stream:: implement this method simply as "asStream".
	argument::embed
	If set to code::true::, the object embeds itself into the stream (and thus return only once). If set to code::false::, it returns itself forever. For simplicity, subclasses implement this method without this switch.

code::
// embedding an event
a = (z: 77);
b = Pset(\y, 8, a.streamArg(true)).asStream;
c = Pset(\y, 8, a.streamArg(false)).asStream;
b.nextN(3, ()); // this ends
c.nextN(3, ()); // this loops

// embedding a pattern
a = Pbind(\note, Pseq([1, 2]));
b = Pset(\y, 8, a.streamArg(true)).asStream;
c = Pset(\y, 8, a.streamArg(false)).asStream;
b.nextN(3, ()); // this ends
c.nextN(3, ()); // this ends, too
::


method::addFunc


method::addFuncTo


method::removeFunc


method::removeFuncFrom

the messages link::Classes/Function#-addFunc::  link::Classes/Function#-addFuncTo::, link::Classes/Function#-removeFunc::, link::Classes/Function#-removeFuncFrom:: are supported by Object.


method::instill


method::obtain

the messages link::Classes/SequenceableCollection#-instill:: and link::Classes/SequenceableCollection#-obtain::, are supported by Object.


subsection:: Math Support


method::blend

lineraly interpolates between this and argument

code::
blend(10, 100, 0.3);
blend([1, 2, 3], [1, 3, 4], 0.5);
blend((a: 6, b: 7), (a: 0, b: [1, 2], c: 9), 0.5);
::
