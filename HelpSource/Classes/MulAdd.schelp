title:: MulAdd
categories:: UGens>Maths
summary:: Multiply and add to a signal










description::




Multiplythe the signal by mul and adds add. This UGen is very efficient (it performs various optimisation checks, for example).
It is used very heavily throughout SuperCollider to perform multiply and add operations on the server; in fact it is  what "really" performs the mul and add arguments found in many UGens.

See also the discussion of mul and add arguments in the link::Classes/UGen:: help file.










classmethods::




private:: new1


method:: new


argument:: in

Input signal


argument:: mul

Multiply with this value


argument:: add

Add this value


discussion::
Same as:

code::
in.madd(mul, add)
::










instancemethods::




private:: init










examples::




code::
s.boot;

// The mul and add arguments of SinOsc themselves use MulAdd!
// These two examples will create precisely the same synth graph:
x = { SinOsc.ar(440, 0, 0.1, 0.05) }.play(s);
x.trace; // You should see a "MulAdd" in the trace
x.free;

x = { MulAdd(SinOsc.ar(440, 0), 0.1, 0.05) }.play(s);
x.trace;
x.free;

// In fact this will produce the same graph too - the separate multiply and add are optimised into one MulAdd
x = { SinOsc.ar(440, 0) * 0.1 + 0.05 }.play(s);
x.trace;
x.free;
::

(Note: the "trace" message is described in the helpfile for link::Classes/Node::.)
