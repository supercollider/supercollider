CLASS:: MIDIFunc
summary:: Fast Responder for incoming MIDI Messages
categories:: External Control>MIDI
related:: Guides/MIDI, Classes/MIDIdef

DESCRIPTION::
MIDIFunc (and its subclass link::Classes/MIDIdef::) registers one or more functions to respond to an incoming MIDI message. Many of its methods are inherited from its superclass link::Classes/AbstractResponderFunc::.

note:: MIDIFunc and link::Classes/MIDIdef:: aim to improve upon the MIDIresponder classes by being faster, easier to use, and providing support for all MIDI message types. They were made with the intention of creating a more convenient, logical and consistent interface, which shares a common design with link::Classes/OSCFunc:: and link::Classes/OSCdef::. Note that unlike the older classes, MIDIFuncs are removed on Cmd-. by default. This can be overriden using either of the fix or permanent methods.::


CLASSMETHODS::
private:: initClass, cmdPeriod

METHOD:: defaultDispatchers
Get or set an link::Classes/IdentityDictionary:: containing the default dispatcher objects for MIDIFuncs of different types (these are what you get if you pass nil as the dispatcher argument to link::#*new::). These objects will decide if any of their registered MIDIFuncs should respond to an incoming MIDI message. The dictionary should have the keys code::[\noteOn, \noteOff, \control, \polytouch, \touch, \program, \bend]:: and values of an appropriate subclass of link::Classes/AbstractDispatcher:: for each message type. By default these will be instances of link::Classes/MIDIMessageDispatcher:: for the the first four message types, and instances of link::Classes/MIDIMessageDispatcherNV:: for the last three.

returns:: The getter returns an link::Classes/IdentityDictionary::.

METHOD:: new
Create a new, enabled MIDIFunc. Normally one would use one of the message type specific convenience methods below, rather than use this method directly.

argument:: func
A link::Classes/Function:: or similar object which will respond to the incoming message. When evaluated for noteOn, noteOff, control, and polytouch messages it will be passed the arguments val, num, chan, and src, corresponding to the message value (e.g. velocity, control value, etc.), message number (e.g. note number), MIDI channel, and MIDI source uid. For touch, programme change and bend messages it will be passed only val, chan, and src.

argument:: msgNum
An link::Classes/Integer:: indicating the MIDI message number (note number, control number, or programme number) for this MIDIFunc. This can be an array. If nil, the MIDIFunc will respond to messages of all possible message numbers.

argument:: chan
An link::Classes/Integer:: indicating the MIDI channel number for this MIDIFunc. This can be an array. If nil, the MIDIFunc will respond to messages received on all channels.

argument:: msgType
A link::Classes/Symbol:: indicating which kind of MIDI message this MIDIFunc should respond to. One of code::\noteOn::, code::\noteOff::, code::\control::, code::\touch::, code::\polytouch::, code::\bend::, or code::program::.

argument:: srcID
An link::Classes/Integer:: corresponding to the uid of the MIDI input. (See link::Classes/MIDIClient::.) If nil, the MIDIFunc will respond to messages received from all sources.

argument:: argTemplate
An optional link::Classes/Integer:: or link::Classes/Function:: (or object which responds to the method link::Overviews/Methods#matchItem::) used to match the value of an incoming MIDI message. (e.g. velocity, control value, program number, etc.). If a Function, it will be evaluated with the message value as an argument, and should return a link::Classes/Boolean:: indicating whether the message matches and this MIDIFunc should respond.

argument:: dispatcher
An optional instance of an appropriate subclass of link::Classes/AbstractDispatcher::. This can be used to allow for customised dispatching. Normally this should not be needed.

returns:: A new instance of MIDIFunc.

METHOD:: cc
A convenience method to create a new MIDIFunc which responds to MIDI control messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI control messages.

METHOD:: noteOn
A convenience method to create a new MIDIFunc which responds to MIDI note on messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI note on messages.

METHOD:: noteOff
A convenience method to create a new MIDIFunc which responds to MIDI note off messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI note off messages.

METHOD:: polytouch
A convenience method to create a new MIDIFunc which responds to MIDI polytouch messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI polytouch messages.

METHOD:: touch
A convenience method to create a new MIDIFunc which responds to MIDI touch messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI touch messages.

METHOD:: bend
A convenience method to create a new MIDIFunc which responds to MIDI bend messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI bend messages.

METHOD:: program
A convenience method to create a new MIDIFunc which responds to MIDI program change messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI program change messages.

METHOD:: sysex
A convenience method to create a new MIDIFunc which responds to MIDI system exclusive messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI system exclusive messages.

SUBSECTION:: System Common

METHOD:: smpte
A convenience method to create a new MIDIFunc which responds to MIDI smpte messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI smpte messages.

METHOD:: mtcQuarterFrame
A convenience method to create a new MIDIFunc which responds to MIDI Time Code Quarter Frame messages. Note that the link::#smpte:: method above automatically assembles quarter frames into time code. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI Time Code Quarter Frame messages.

METHOD:: songPosition
A convenience method to create a new MIDIFunc which responds to MIDI song position messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI song position messages.

METHOD:: songSelect
A convenience method to create a new MIDIFunc which responds to MIDI song select messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI song select messages.

METHOD:: tuneRequest
A convenience method to create a new MIDIFunc which responds to MIDI song select messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI tune request messages.

METHOD:: midiClock
A convenience method to create a new MIDIFunc which responds to MIDI clock messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI clock messages.

SUBSECTION:: System Realtime

METHOD:: sysrt
A convenience method to create a new MIDIFunc which responds generically to MIDI System Realtime messages. Note that the message specific methods below are probably more convenient in most cases. Note that this does not include MIDI Time Code Quarter Frame messages (sysrt index 1). For those see link::#*mtcQuarterFrame:: and link::#*smpte::. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI System Realtime messages.

METHOD:: tick
A convenience method to create a new MIDIFunc which responds to MIDI tick messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI tick messages.

METHOD:: start
A convenience method to create a new MIDIFunc which responds to MIDI start messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI start messages.

METHOD:: stop
A convenience method to create a new MIDIFunc which responds to MIDI stop messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI stop messages.

METHOD:: continue
A convenience method to create a new MIDIFunc which responds to MIDI continue messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI continue messages.

METHOD:: reset
A convenience method to create a new MIDIFunc which responds to MIDI reset messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI reset messages.

METHOD:: activeSense
A convenience method to create a new MIDIFunc which responds to MIDI active sense messages. See link::#*new:: for argument descriptions.

returns:: A new instance of MIDIFunc which responds to MIDI active sense messages.

SUBSECTION:: Debugging

METHOD:: trace
A convenience method which dumps all incoming MIDI messages.

argument:: bool
A link::Classes/Boolean:: indicating whether dumping is on or off.

INSTANCEMETHODS::
private:: init, printOn

METHOD:: chan
Get this MIDIFunc's MIDI channel number.

returns:: An link::Classes/Integer::.

METHOD:: msgNum
Get this MIDIFunc's MIDI message number.

returns:: An link::Classes/Integer::.

METHOD:: msgType
Get this MIDIFunc's message type.

returns:: A link::Classes/Symbol::; one of code::\noteOn::, code::\noteOff::, code::\control::, code::\touch::, code::\polytouch::, code::\bend::, code::\program::, code::\sysex::, code::\mtcQF::, code::\smpte::, code::\songPosition::, code::\songSelect::, code::\tuneRequest::, code::\midiClock::, code::\sysrt::, code::\tick::, code::\start::, code::\continue::, code::\stop::, code::\activeSense::, or code::\reset::.

METHOD:: argTemplate
Get this MIDIFunc's argTemplate.
returns:: A link::Classes/Integer:: or link::Classes/Function:: (or object which responds to the method link::Overviews/Methods#matchItem::) used to match the value of an incoming MIDI message. (e.g. velocity, control value, program number, etc.).

METHOD:: learn
Train this MIDIFunc to respond to the next message of its type. Arguments passed at creation (e.g. chan, srcID, msgNum, etc.) will filter the training to the next matching message received.

argument:: learnVal
A link::Classes/Boolean:: indicating whether the responder should learn the specific value. For example, if used with a control change MIDIFunc, the object would learn to match the next specific control change value. If used with a note on MIDIFunc, it would match only a specific velocity. The default is false.


EXAMPLES::

code::
MIDIIn.connectAll

a = MIDIFunc.cc({arg ...args; args.postln}, 1); // match cc 1
a.free; // cleanup

b = MIDIFunc.cc({arg ...args; args.postln}, 1, 1); // match cc1, chan 1
b.free; // cleanup

c = MIDIFunc.cc({arg ...args; args.postln}, (1..10)); // match cc 1-10
c.free; // cleanup

n = MIDIFunc.noteOn({arg ...args; args.postln}); // match any noteOn
n.free; // cleanup

MIDIIn.doNoteOnAction(1, 1, 64, 64); // spoof a note on
MIDIIn.doControlAction(1, 1, 1, 64); // spoof a cc
MIDIIn.doControlAction(1, 1, 9, 64);
MIDIIn.doControlAction(1, 10, 1, 64);
::
