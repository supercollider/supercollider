title:: if
categories::Core, Common methods
related:: Reference/Control-Structures
summary:: conditional execution

method:: if

section::Basic examples

This section focuses solely on the basic writing style. For various writing styles of code::if::, refer to link::Reference/Control-Structures::.

code::
if ( [false, true].choose,				// Boolean expression (chooses one at random)
	{ "expression was true".postln },	// true function
	{ "expression was false".postln }	// false function
)

(
var a = 1, z;
z = if (a < 5, { 100 },{ 200 });
z.postln;
)
::

Any subclass of link::Classes/UGen:: can also utilize code::if::. An output value of code::0:: is interpreted as code::false::, while code::1:: is code::true::; values between code::0:: and code::1:: are interpolated accordingly. At code::0::, code::if:: outputs only the sound from the code::false:: UGen. Between code::0:: and code::0.5::, the sound from the code::true:: UGen gradually mixes in. At code::0.5::, code::if:: outputs the sound from both UGens in equal proportion. If both UGens are identical, their output levels match. Between code::0.5:: and code::1::, the sound from the code::false:: UGen diminishes, and at code::1::, code::if:: outputs only the sound from the code::true:: UGen.

code::
// Experience how if controls sound using MouseX:
(
{
	if(
		MouseX.kr(1, 0).poll, // left: true; right: false
		SinOsc.ar * [0.1, 0], // or: SinOsc.ar * 0.1,
		SinOsc.ar * [0, 0.1]  // or: SinOsc.ar * 0.1
	)
}.play
)

// Automatically mix two sound sources using the random generator LFNoise1:
(
	{
		if(
		LFNoise1.kr(1.0).range(0, 1).poll,
		SinOsc.ar,
		Saw.ar ) * 0.1
	}.play
)
::

Further explanations can be found in the following parts of the link::Guides/UserFAQ:::
list::
## 'If' statements inside a SynthDef
## link::Guides/UserFAQ#What is a Boolean in the server?::
## Why is x ＞ 0 'non-Boolean' in the 'test'?
## link::Guides/UserFAQ#If you can't branch, what good is a comparison in the server?::
## link::Guides/UserFAQ#Logical operators: And, Or, Not, Xor::
::

section:: Optimization

The functions will be inlined, which plucks the code from the functions and uses a more efficient jump statement.

code::
{
	if( 6 == 9,{
		"hello".postln;
	},{
		"hello".postln;
	})
}.def.dumpByteCodes

BYTECODES: (18)
  0   FE 06    PushPosInt 6
  2   FE 09    PushPosInt 9
  4   E6       SendSpecialBinaryArithMsg '=='
  5   F8 00 06 JumpIfFalse 6  (14)
  8   42       PushLiteral "hello"
  9   A1 00    SendMsg 'postln'
 11   FC 00 03 JumpFwd 3  (17)
 14   41       PushLiteral "hello"
 15   A1 00    SendMsg 'postln'
 17   F2       BlockReturn
a FunctionDef in closed FunctionDef
::




failure to inline due to variable declarations
code::
{

	if( 6 == 9,{
		var notHere;
		"hello".postln;
	},{
		"hello".postln;
	})

}.def.dumpByteCodes

WARNING: FunctionDef contains variable declarations and so will not be inlined.
   in file 'selected text'
   line 4 char 14 :
  		var notHere;•
  		"hello".postln;
-----------------------------------
BYTECODES: (12)
  0   FE 06    PushPosInt 6
  2   FE 09    PushPosInt 9
  4   E6       SendSpecialBinaryArithMsg '=='
  5   04 00    PushLiteralX instance of FunctionDef in closed FunctionDef
  7   04 01    PushLiteralX instance of FunctionDef in closed FunctionDef
  9   C3 0B    SendSpecialMsg 'if'
 11   F2       BlockReturn
a FunctionDef in closed FunctionDef
::

code::
{
	if( 6 == 9,{
		"hello".postln;
	},{
		"hello".postln;
	})
}.def.dumpByteCodes

BYTECODES: (18)
  0   FE 06    PushPosInt 6
  2   FE 09    PushPosInt 9
  4   E6       SendSpecialBinaryArithMsg '=='
  5   F8 00 06 JumpIfFalse 6  (14)
  8   42       PushLiteral "hello"
  9   A1 00    SendMsg 'postln'
 11   FC 00 03 JumpFwd 3  (17)
 14   41       PushLiteral "hello"
 15   A1 00    SendMsg 'postln'
 17   F2       BlockReturn
a FunctionDef in closed FunctionDef
::
